[
    {
        "selfText": " Disemvoweler\n\nDisemvoweling means removing the vowels from text. (For this challenge, the letters a, e, i, o, and u are considered vowels, and the letter y is not.) The idea is to make text difficult but not impossible to read, for when somebody posts something so idiotic you want people who are reading it to get extra frustrated.\n\nTo make things even harder to read, we'll remove spaces too. For example, this string:\n\n    two drums and a cymbal fall off a cliff\n\ncan be disemvoweled to get:\n\n    twdrmsndcymblfllffclff\n\nWe also want to keep the vowels we removed around (in their original order), which in this case is:\n\n    ouaaaaoai\n\n# Formal Inputs &amp; Outputs\n\n## Input description\n\nA string consisting of a series of words to disemvowel. It will be all lowercase (letters a-z) and without punctuation. The only special character you need to handle is spaces.\n\n## Output description\n\nTwo strings, one of the disemvoweled text (spaces removed), and one of all the removed vowels.\n\n# Sample Inputs &amp; Outputs\n\n## Sample Input 1\n\n    all those who believe in psychokinesis raise my hand\n\n## Sample Output 1\n\n    llthswhblvnpsychknssrsmyhnd\n    aoeoeieeioieiaiea\n\n## Sample Input 2\n\n    did you hear about the excellent farmer who was outstanding in his field\n\n## Sample Output 2\n\n    ddyhrbtthxcllntfrmrwhwststndngnhsfld\n    ioueaaoueeeeaeoaouaiiiie\n\n# Notes\n\nThanks to /u/abecedarius for inspiring this challenge on /r/dailyprogrammer_ideas!\n\nIn principle it may be possible to reconstruct the original text from the disemvoweled text. If you want to try it, check out this week's Intermediate challenge!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;em&gt;(Easy)&lt;/em&gt;: Disemvoweler&lt;/h1&gt;\n\n&lt;p&gt;Disemvoweling means removing the vowels from text. (For this challenge, the letters a, e, i, o, and u are considered vowels, and the letter y is not.) The idea is to make text difficult but not impossible to read, for when somebody posts something so idiotic you want people who are reading it to get extra frustrated.&lt;/p&gt;\n\n&lt;p&gt;To make things even harder to read, we&amp;#39;ll remove spaces too. For example, this string:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;two drums and a cymbal fall off a cliff\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can be disemvoweled to get:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;twdrmsndcymblfllffclff\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We also want to keep the vowels we removed around (in their original order), which in this case is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ouaaaaoai\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;A string consisting of a series of words to disemvowel. It will be all lowercase (letters a-z) and without punctuation. The only special character you need to handle is spaces.&lt;/p&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;Two strings, one of the disemvoweled text (spaces removed), and one of all the removed vowels.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;all those who believe in psychokinesis raise my hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;llthswhblvnpsychknssrsmyhnd\naoeoeieeioieiaiea\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;did you hear about the excellent farmer who was outstanding in his field\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;ddyhrbtthxcllntfrmrwhwststndngnhsfld\nioueaaoueeeeaeoaouaiiiie\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/abecedarius\"&gt;/u/abecedarius&lt;/a&gt; for inspiring this challenge on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/p&gt;\n\n&lt;p&gt;In principle it may be possible to reconstruct the original text from the disemvoweled text. If you want to try it, check out this week&amp;#39;s Intermediate challenge!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1ystvb/022414_challenge_149_easy_disemvoweler/",
        "title": "[02/24/14] Challenge #149 [Easy] Disemvoweler",
        "difficulty": "Easy"
    },
    {
        "selfText": " Tree Generation\n\nYour goal is to draw a tree given the base-width of the tree (the number of characters on the bottom-most row of the triangle section). This \"tree\" must be drawn through [ASCII art-style graphics](http://en.wikipedia.org/wiki/ASCII_art) on standard console output. It will consist of a 1x3 trunk on the bottom, and a triangle shape on the top. The tree must be centered, with the leaves growing from a base of N-characters, up to a top-layer of 1 character. Each layer reduces by 2 character, so the bottom might be 7, while shrinks to 5, 3, and 1 on top layers. See example output.\n\n_[Originally submitted by u/Onkel_Wackelflugel](http://www.reddit.com/r/dailyprogrammer_ideas/comments/1srsde/easy_build_a_christmas_treemenorah_with/)_\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nYou will be given one line of text on standard-console input: an integer and two characters, all space-delimited. The integer, N, will range inclusively from 3 to 21 and *always* be odd. The next character will be your trunk character. The next character will be your leaves character. Draw the trunk and leaves components with these characters, respectively.\n\n## Output Description\n\nGiven the three input arguments, draw a centered-tree. It should follow this pattern: (this is the smallest tree possible, with a base of 3)\n\n       *\n      ***\n      ###\n\nHere's a much larger tree, of base 7:\n\n       *\n      ***\n     *****\n    *******\n      ###\n\n# Sample Inputs &amp; Outputs\n## Sample Input 1\n\n    3 # *\n\n## Sample Output 1\n\n       *\n      ***\n      ###\n\n## Sample Input 2\n\n    13 = +\n\n## Sample Output 2\n\n          +\n         +++\n        +++++\n       +++++++\n      +++++++++\n     +++++++++++\n    +++++++++++++\n         ===\n\n# Challenge++\n\nDraw something special! Experiment with your creativity and engineering, try to render this tree in whatever cool way you can think of. [Here's an example](http://www.youtube.com/watch?v=QMYfkOtYYlg#t=15) of how far you can push a simple console for rendering neat graphics!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Tree Generation&lt;/h1&gt;\n\n&lt;p&gt;Your goal is to draw a tree given the base-width of the tree (the number of characters on the bottom-most row of the triangle section). This &amp;quot;tree&amp;quot; must be drawn through &lt;a href=\"http://en.wikipedia.org/wiki/ASCII_art\"&gt;ASCII art-style graphics&lt;/a&gt; on standard console output. It will consist of a 1x3 trunk on the bottom, and a triangle shape on the top. The tree must be centered, with the leaves growing from a base of N-characters, up to a top-layer of 1 character. Each layer reduces by 2 character, so the bottom might be 7, while shrinks to 5, 3, and 1 on top layers. See example output.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=\"http://www.reddit.com/r/dailyprogrammer_ideas/comments/1srsde/easy_build_a_christmas_treemenorah_with/\"&gt;Originally submitted by u/Onkel_Wackelflugel&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will be given one line of text on standard-console input: an integer and two characters, all space-delimited. The integer, N, will range inclusively from 3 to 21 and &lt;em&gt;always&lt;/em&gt; be odd. The next character will be your trunk character. The next character will be your leaves character. Draw the trunk and leaves components with these characters, respectively.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Given the three input arguments, draw a centered-tree. It should follow this pattern: (this is the smallest tree possible, with a base of 3)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   *\n  ***\n  ###\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&amp;#39;s a much larger tree, of base 7:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   *\n  ***\n *****\n*******\n  ###\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;3 # *\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;   *\n  ***\n  ###\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;13 = +\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;      +\n     +++\n    +++++\n   +++++++\n  +++++++++\n +++++++++++\n+++++++++++++\n     ===\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge++&lt;/h1&gt;\n\n&lt;p&gt;Draw something special! Experiment with your creativity and engineering, try to render this tree in whatever cool way you can think of. &lt;a href=\"http://www.youtube.com/watch?v=QMYfkOtYYlg#t=15\"&gt;Here&amp;#39;s an example&lt;/a&gt; of how far you can push a simple console for rendering neat graphics!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1t0r09/121613_challenge_145_easy_tree_generation/",
        "title": "[12/16/13] Challenge #145 [Easy] Tree Generation",
        "difficulty": "Easy"
    },
    {
        "selfText": " Roll the Dies\n\nIn many board games, you have to roll [multiple multi-faces dies](http://en.wikipedia.org/wiki/File:Dice_(typical_role_playing_game_dice).jpg) to generate random numbers as part of the game mechanics. A classic die used is the d20 (die of 20 faces) in the game Dungeons &amp; Dragons. This notation, often called the [Dice Notation](http://en.wikipedia.org/wiki/Dice_notation), is where you write NdM, where N is a positive integer representing the number of dies to roll, while M is a positive integer equal to or grater than two (2), representing the number of faces on the die. Thus, the string \"2d20\" simply means to roll the 20-faced die twice. On the other hand \"20d2\" means to roll a two-sided die 20 times.\n\nYour goal is to write a program that takes in one of these Dice Notation commands and correctly generates the appropriate random numbers. Note that it does not matter how you [seed your random number generation](http://en.wikipedia.org/wiki/Random_seed), but you should try to as good programming practice.\n\n*Author: nint22*\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nYou will be given a string of the for NdM, where N and M are describe above in the challenge description. Essentially N is the number of times to roll the die, while M is the number of faces of this die. N will range from 1 to 100, while M will range from 2 to 100, both inclusively. This string will be given through standard console input.\n\n## Output Description\n\nYou must simulate the die rolls N times, where if there is more than one roll you must space-delimit (not print each result on a separate line). Note that the range of the random numbers must be inclusive of 1 to M, meaning that a die with 6 faces could possibly choose face 1, 2, 3, 4, 5, or 6.\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n    2d20\n    4d6\n\n## Sample Output\n\n    19 7\n    5 3 4 6\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Roll the Dies&lt;/h1&gt;\n\n&lt;p&gt;In many board games, you have to roll &lt;a href=\"http://en.wikipedia.org/wiki/File:Dice_(typical_role_playing_game_dice\"&gt;multiple multi-faces dies&lt;/a&gt;.jpg) to generate random numbers as part of the game mechanics. A classic die used is the d20 (die of 20 faces) in the game Dungeons &amp;amp; Dragons. This notation, often called the &lt;a href=\"http://en.wikipedia.org/wiki/Dice_notation\"&gt;Dice Notation&lt;/a&gt;, is where you write NdM, where N is a positive integer representing the number of dies to roll, while M is a positive integer equal to or grater than two (2), representing the number of faces on the die. Thus, the string &amp;quot;2d20&amp;quot; simply means to roll the 20-faced die twice. On the other hand &amp;quot;20d2&amp;quot; means to roll a two-sided die 20 times.&lt;/p&gt;\n\n&lt;p&gt;Your goal is to write a program that takes in one of these Dice Notation commands and correctly generates the appropriate random numbers. Note that it does not matter how you &lt;a href=\"http://en.wikipedia.org/wiki/Random_seed\"&gt;seed your random number generation&lt;/a&gt;, but you should try to as good programming practice.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: nint22&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will be given a string of the for NdM, where N and M are describe above in the challenge description. Essentially N is the number of times to roll the die, while M is the number of faces of this die. N will range from 1 to 100, while M will range from 2 to 100, both inclusively. This string will be given through standard console input.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You must simulate the die rolls N times, where if there is more than one roll you must space-delimit (not print each result on a separate line). Note that the range of the random numbers must be inclusive of 1 to M, meaning that a die with 6 faces could possibly choose face 1, 2, 3, 4, 5, or 6.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;2d20\n4d6\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;19 7\n5 3 4 6\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1givnn/061713_challenge_130_easy_roll_the_dies/",
        "title": "[06/17/13] Challenge #130 [Easy] Roll the Dies",
        "difficulty": "Easy"
    },
    {
        "selfText": " Sum-the-Digits, Part II\n\nGiven a well-formed (non-empty, fully valid) string of digits, let the integer N be the sum of digits. Then, given this integer N, turn it into a string of digits. Repeat this process until you only have one digit left. Simple, clean, and easy: focus on writing this as cleanly as possible in your preferred programming language.\n\n*Author: nint22. This challenge is particularly easy, so don't worry about looking for crazy corner-cases or weird exceptions. This challenge is as up-front as it gets :-) Good luck, have fun!*\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nOn standard console input, you will be given a string of digits. This string will not be of zero-length and will be guaranteed well-formed (will always have digits, and nothing else, in the string).\n\n## Output Description\n\nYou must take the given string, sum the digits, and then convert this sum to a string and print it out onto standard console. Then, you must repeat this process again and again until you only have one digit left.\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n*Note:* Take from Wikipedia for the sake of keeping things as simple and clear as possible.\n\n    12345\n\n## Sample Output\n\n    12345\n    15\n    6\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Sum-the-Digits, Part II&lt;/h1&gt;\n\n&lt;p&gt;Given a well-formed (non-empty, fully valid) string of digits, let the integer N be the sum of digits. Then, given this integer N, turn it into a string of digits. Repeat this process until you only have one digit left. Simple, clean, and easy: focus on writing this as cleanly as possible in your preferred programming language.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: nint22. This challenge is particularly easy, so don&amp;#39;t worry about looking for crazy corner-cases or weird exceptions. This challenge is as up-front as it gets :-) Good luck, have fun!&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On standard console input, you will be given a string of digits. This string will not be of zero-length and will be guaranteed well-formed (will always have digits, and nothing else, in the string).&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You must take the given string, sum the digits, and then convert this sum to a string and print it out onto standard console. Then, you must repeat this process again and again until you only have one digit left.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Take from Wikipedia for the sake of keeping things as simple and clear as possible.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;12345\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;12345\n15\n6\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1fnutb/06413_challenge_128_easy_sumthedigits_part_ii/",
        "title": "[06/4/13] Challenge #128 [Easy] Sum-the-Digits, Part II",
        "difficulty": "Easy"
    },
    {
        "selfText": "\n Sum Them Digits\nAs a crude form of hashing function, Lars wants to sum the digits of a number. Then he wants to sum the digits of the result, and repeat until he have only one digit left. He learnt that this is called the [digital root](http://en.wikipedia.org/wiki/Digital_root) of a number, but the Wikipedia article is just confusing him.\n\nCan you help him implement this problem in your favourite programming language?\n\nIt is possible to treat the number as a string and work with each character at a time. This is pretty slow on big numbers, though, so Lars wants you to at least try solving it with only integer calculations (the [modulo operator](http://en.wikipedia.org/wiki/Modulo_operation) may prove to be useful!).\n\n*Author: TinyLebowski*\n# Formal Inputs &amp; Outputs\n## Input Description\nA positive integer, possibly 0.\n## Output Description\nAn integer between 0 and 9, the digital root of the input number.\n# Sample Inputs &amp; Outputs\n## Sample Input\n31337\n## Sample Output\n8, because 3+1+3+3+7=17 and 1+7=8\n# Challenge Input\n1073741824\n## Challenge Input Solution\n?\n# Note\nNone\n\t\t\t\t",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Sum Them Digits&lt;/h1&gt;\n\n&lt;p&gt;As a crude form of hashing function, Lars wants to sum the digits of a number. Then he wants to sum the digits of the result, and repeat until he have only one digit left. He learnt that this is called the &lt;a href=\"http://en.wikipedia.org/wiki/Digital_root\"&gt;digital root&lt;/a&gt; of a number, but the Wikipedia article is just confusing him.&lt;/p&gt;\n\n&lt;p&gt;Can you help him implement this problem in your favourite programming language?&lt;/p&gt;\n\n&lt;p&gt;It is possible to treat the number as a string and work with each character at a time. This is pretty slow on big numbers, though, so Lars wants you to at least try solving it with only integer calculations (the &lt;a href=\"http://en.wikipedia.org/wiki/Modulo_operation\"&gt;modulo operator&lt;/a&gt; may prove to be useful!).&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: TinyLebowski&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;A positive integer, possibly 0.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;An integer between 0 and 9, the digital root of the input number.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;31337&lt;/p&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;p&gt;8, because 3+1+3+3+7=17 and 1+7=8&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;1073741824&lt;/p&gt;\n\n&lt;h2&gt;Challenge Input Solution&lt;/h2&gt;\n\n&lt;p&gt;?&lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;None&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1berjh/040113_challenge_122_easy_sum_them_digits/",
        "title": "[04/01/13] Challenge #122 [Easy] Sum Them Digits",
        "difficulty": "Easy"
    },
    {
        "selfText": "\n\nTo disarm the bomb you have to cut some wires. These wires are either white, black, purple, red, green or orange.\n\nThe rules for disarming are simple:\n\n    If you cut a white cable you can't cut white or black cable.\n    If you cut a red cable you have to cut a green one\n    If you cut a black cable it is not allowed to cut a white, green or orange one\n    If you cut a orange cable you should cut a red or black one\n    If you cut a green one you have to cut a orange or white one\n    If you cut a purple cable you can't cut a purple, green, orange or white cable\n\nIf you have anything wrong in the wrong order, the bomb will explode. \n\n\nThere can be multiple wires with the same colour and these instructions are for one wire at a time. Once you cut a wire you can forget about the previous ones. \n#Formal Inputs &amp; Outputs\n\n##Input description\n\nYou will recieve a sequence of wires that where cut in that order and you have to determine if the person was succesfull in disarming the bomb or that it blew up.\n\n\n### Input 1\n\n    white\n    red\n    green\n    white\n\n### Input 2\n\n    white\n    orange\n    green\n    white\n\n##Output description\n\nWheter or not the bomb exploded\n\n### Output 1\n\n    \"Bomb defused\"\n\n### Output 2\n\n    \"Boom\"\n\n#Notes/Hints\n\nA state machine will help this make easy\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;To disarm the bomb you have to cut some wires. These wires are either white, black, purple, red, green or orange.&lt;/p&gt;\n\n&lt;p&gt;The rules for disarming are simple:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;If you cut a white cable you can&amp;#39;t cut white or black cable.\nIf you cut a red cable you have to cut a green one\nIf you cut a black cable it is not allowed to cut a white, green or orange one\nIf you cut a orange cable you should cut a red or black one\nIf you cut a green one you have to cut a orange or white one\nIf you cut a purple cable you can&amp;#39;t cut a purple, green, orange or white cable\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you have anything wrong in the wrong order, the bomb will explode. &lt;/p&gt;\n\n&lt;p&gt;There can be multiple wires with the same colour and these instructions are for one wire at a time. Once you cut a wire you can forget about the previous ones. &lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;You will recieve a sequence of wires that where cut in that order and you have to determine if the person was succesfull in disarming the bomb or that it blew up.&lt;/p&gt;\n\n&lt;h3&gt;Input 1&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;white\nred\ngreen\nwhite\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 2&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;white\norange\ngreen\nwhite\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;Wheter or not the bomb exploded&lt;/p&gt;\n\n&lt;h3&gt;Output 1&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;Bomb defused&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output 2&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;Boom&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;A state machine will help this make easy&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/5e4mde/20161121_challenge_293_easy_defusing_the_bomb/",
        "title": "[2016-11-21] Challenge #293 [Easy] Defusing the bomb",
        "difficulty": "Easy"
    },
    {
        "selfText": " Polygon Perimeter\n\n[A Polygon](http://en.wikipedia.org/wiki/Polygon) is a geometric two-dimensional figure that has n-sides (line segments) that closes to form a loop. Polygons can be in many different shapes and have many different neat properties, though this challenge is about [Regular Polygons](http://en.wikipedia.org/wiki/Regular_polygon). Our goal is to compute the permitter of an n-sided polygon that has equal-length sides given the [circumradius](http://en.wikipedia.org/wiki/Regular_polygon#Circumradius). This is the distance between the center of the Polygon to any of its vertices; not to be confused with the [apothem](http://en.wikipedia.org/wiki/Apothem)!\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nInput will consist of one line on standard console input. This line will contain first an integer N, then a floating-point number R. They will be space-delimited. The integer N is for the number of sides of the Polygon, which is between 3 to 100, inclusive. R will be the circumradius, which ranges from 0.01 to 100.0, inclusive.\n\n## Output Description\n\nPrint the permitter of the given N-sided polygon that has a circumradius of R. Print up to three digits precision.\n\n# Sample Inputs &amp; Outputs\n## Sample Input 1\n\n    5 3.7\n\n## Sample Output 1\n\n    21.748\n\n## Sample Input 2\n\n    100 1.0\n\n## Sample Output 2\n\n    6.282\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Polygon Perimeter&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Polygon\"&gt;A Polygon&lt;/a&gt; is a geometric two-dimensional figure that has n-sides (line segments) that closes to form a loop. Polygons can be in many different shapes and have many different neat properties, though this challenge is about &lt;a href=\"http://en.wikipedia.org/wiki/Regular_polygon\"&gt;Regular Polygons&lt;/a&gt;. Our goal is to compute the permitter of an n-sided polygon that has equal-length sides given the &lt;a href=\"http://en.wikipedia.org/wiki/Regular_polygon#Circumradius\"&gt;circumradius&lt;/a&gt;. This is the distance between the center of the Polygon to any of its vertices; not to be confused with the &lt;a href=\"http://en.wikipedia.org/wiki/Apothem\"&gt;apothem&lt;/a&gt;!&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;Input will consist of one line on standard console input. This line will contain first an integer N, then a floating-point number R. They will be space-delimited. The integer N is for the number of sides of the Polygon, which is between 3 to 100, inclusive. R will be the circumradius, which ranges from 0.01 to 100.0, inclusive.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print the permitter of the given N-sided polygon that has a circumradius of R. Print up to three digits precision.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;5 3.7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;21.748\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;100 1.0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;6.282\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1tixzk/122313_challenge_146_easy_polygon_perimeter/",
        "title": "[12/23/13] Challenge #146 [Easy] Polygon Perimeter",
        "difficulty": "Easy"
    },
    {
        "selfText": "\n Words With Ordered Vowels\nFind words in a word list that contain all the vowels in alphabetical\n order, non-repeated, where vowels are defined as A E I O U Y.\n\n*Author: ikea_riot*\n# Formal Inputs &amp; Outputs\n## Input Description\n A text file with one word on each line.\n## Output Description\nAll words in the list that contains all the vowels A E I O U Y in alphabetical order.\n# Sample Inputs &amp; Outputs\n## Sample Input\nUse [this word list](http://code.google.com/p/dotnetperls-controls/downloads/detail?name=enable1.txt)\n## Sample Output\nabstemiously\n...\n# Challenge Input\nNothing special, see sample input\n## Challenge Input Solution\nNothing special, see sample output\n# Note\nWe are starting to fill the queue with new challenges! Please help out by posting suggestions to /r/dailyprogrammer_ideas\n\t\t\t\t",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Words With Ordered Vowels&lt;/h1&gt;\n\n&lt;p&gt;Find words in a word list that contain all the vowels in alphabetical\n order, non-repeated, where vowels are defined as A E I O U Y.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: ikea_riot&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;A text file with one word on each line.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;All words in the list that contains all the vowels A E I O U Y in alphabetical order.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;Use &lt;a href=\"http://code.google.com/p/dotnetperls-controls/downloads/detail?name=enable1.txt\"&gt;this word list&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;p&gt;abstemiously\n...&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;Nothing special, see sample input&lt;/p&gt;\n\n&lt;h2&gt;Challenge Input Solution&lt;/h2&gt;\n\n&lt;p&gt;Nothing special, see sample output&lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;We are starting to fill the queue with new challenges! Please help out by posting suggestions to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1aih0v/031813_challenge_122_easy_words_with_ordered/",
        "title": "[03/18/13] Challenge #122 [Easy] Words With Ordered Vowels",
        "difficulty": "Easy"
    },
    {
        "selfText": " Pangrams\n\n[Wikipedia](http://en.wikipedia.org/wiki/Pangram) has a great definition for Pangrams: \"*A pangram or holoalphabetic sentence for a given alphabet is a sentence using every letter of the alphabet at least once.*\" A good example is the English-language sentence \"[The quick brown fox jumps over the lazy dog](http://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog)\"; note how all 26 English-language letters are used in the sentence.\n\nYour goal is to implement a program that takes a series of strings (one per line) and prints either True (the given string is a pangram), or False (it is not).\n\n**Bonus:** On the same line as the \"True\" or \"False\" result, print the number of letters used, starting from 'A' to 'Z'. The format should match the following example based on the above sentence:\n\n    a: 1, b: 1, c: 1, d: 1, e: 3, f: 1, g: 1, h: 2, i: 1, j: 1, k: 1, l: 1, m: 1, n: 1, o: 4, p: 1, q: 1, r: 2, s: 1, t: 2, u: 2, v: 1, w: 1, x: 1, y: 1, z: 1\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nOn standard console input, you will be given a single integer on the first line of input. This integer represents the number of lines you will then receive, each being a string of alpha-numeric characters ('a'-'z', 'A'-'Z', '0'-'9') as well as spaces and [period](http://en.wikipedia.org/wiki/Period_(punctuation\\)).\n\n## Output Description\n\nFor each line of input, print either \"True\" if the given line was a pangram, or \"False\" if not.\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n    3\n    The quick brown fox jumps over the lazy dog.\n    Pack my box with five dozen liquor jugs\n    Saxophones quickly blew over my jazzy hair\n\n## Sample Output\n\n    True\n    True\n    False\n\n# Authors Note: [Horay, we're back with a queue of new challenges](http://i.imgur.com/chKCAPM.jpg)! Sorry fellow r/DailyProgrammers for the long time off, but we're back to business as usual.",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Pangrams&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Pangram\"&gt;Wikipedia&lt;/a&gt; has a great definition for Pangrams: &amp;quot;&lt;em&gt;A pangram or holoalphabetic sentence for a given alphabet is a sentence using every letter of the alphabet at least once.&lt;/em&gt;&amp;quot; A good example is the English-language sentence &amp;quot;&lt;a href=\"http://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog\"&gt;The quick brown fox jumps over the lazy dog&lt;/a&gt;&amp;quot;; note how all 26 English-language letters are used in the sentence.&lt;/p&gt;\n\n&lt;p&gt;Your goal is to implement a program that takes a series of strings (one per line) and prints either True (the given string is a pangram), or False (it is not).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; On the same line as the &amp;quot;True&amp;quot; or &amp;quot;False&amp;quot; result, print the number of letters used, starting from &amp;#39;A&amp;#39; to &amp;#39;Z&amp;#39;. The format should match the following example based on the above sentence:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a: 1, b: 1, c: 1, d: 1, e: 3, f: 1, g: 1, h: 2, i: 1, j: 1, k: 1, l: 1, m: 1, n: 1, o: 4, p: 1, q: 1, r: 2, s: 1, t: 2, u: 2, v: 1, w: 1, x: 1, y: 1, z: 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On standard console input, you will be given a single integer on the first line of input. This integer represents the number of lines you will then receive, each being a string of alpha-numeric characters (&amp;#39;a&amp;#39;-&amp;#39;z&amp;#39;, &amp;#39;A&amp;#39;-&amp;#39;Z&amp;#39;, &amp;#39;0&amp;#39;-&amp;#39;9&amp;#39;) as well as spaces and &lt;a href=\"http://en.wikipedia.org/wiki/Period_(punctuation)\"&gt;period&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;For each line of input, print either &amp;quot;True&amp;quot; if the given line was a pangram, or &amp;quot;False&amp;quot; if not.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;3\nThe quick brown fox jumps over the lazy dog.\nPack my box with five dozen liquor jugs\nSaxophones quickly blew over my jazzy hair\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;True\nTrue\nFalse\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Authors Note: &lt;a href=\"http://i.imgur.com/chKCAPM.jpg\"&gt;Horay, we&amp;#39;re back with a queue of new challenges&lt;/a&gt;! Sorry fellow &lt;a href=\"/r/DailyProgrammers\"&gt;r/DailyProgrammers&lt;/a&gt; for the long time off, but we&amp;#39;re back to business as usual.&lt;/h1&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1pwl73/11413_challenge_139_easy_pangrams/",
        "title": "[11/4/13] Challenge #139 [Easy] Pangrams",
        "difficulty": "Easy"
    },
    {
        "selfText": "\n Change Calculator\nWrite A function that takes an amount of money, rounds it to the nearest penny and then tells you the *minimum* number of coins needed to equal that amount of money. For Example: \"4.17\" would print out:\n\n    Quarters: 16\n    Dimes: 1\n    Nickels: 1\n    Pennies: 2\n\n\n*Author: nanermaner*\n# Formal Inputs &amp; Outputs\n## Input Description\nYour Function should accept a decimal number (which may or may not have an actual decimal, in which you can assume it is an integer representing dollars, not cents). Your function should round this number to the nearest hundredth.\n## Output Description\nPrint the minimum number of coins needed. The four coins used should be 25 cent, 10 cent, 5 cent and 1 cent. It should be in the following format:\n\n    Quarters: &lt;integer&gt;\n    Dimes: &lt;integer&gt;\n    Nickels: &lt;integer&gt;\n    Pennies: &lt;integer&gt;\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n1.23\n## Sample Output\n    Quarters: 4\n    Dimes: 2\n    Nickels: 0\n    Pennies: 3\n# Challenge Input\n    10.24\n    0.99\n    5\n    00.06\n## Challenge Input Solution\nNot yet posted\n# Note\nThis program may be different for international users, my examples used quarters, nickels, dimes and pennies. Feel free to use generic terms like \"10 cent coins\" or any other unit of currency you are more familiar with.\n\n* Bonus: Only print coins that are used at least once in the solution.\n\n\t\t\t\t",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Change Calculator&lt;/h1&gt;\n\n&lt;p&gt;Write A function that takes an amount of money, rounds it to the nearest penny and then tells you the &lt;em&gt;minimum&lt;/em&gt; number of coins needed to equal that amount of money. For Example: &amp;quot;4.17&amp;quot; would print out:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Quarters: 16\nDimes: 1\nNickels: 1\nPennies: 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Author: nanermaner&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;Your Function should accept a decimal number (which may or may not have an actual decimal, in which you can assume it is an integer representing dollars, not cents). Your function should round this number to the nearest hundredth.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print the minimum number of coins needed. The four coins used should be 25 cent, 10 cent, 5 cent and 1 cent. It should be in the following format:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Quarters: &amp;lt;integer&amp;gt;\nDimes: &amp;lt;integer&amp;gt;\nNickels: &amp;lt;integer&amp;gt;\nPennies: &amp;lt;integer&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;1.23&lt;/p&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Quarters: 4\nDimes: 2\nNickels: 0\nPennies: 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;10.24\n0.99\n5\n00.06\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Challenge Input Solution&lt;/h2&gt;\n\n&lt;p&gt;Not yet posted&lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;This program may be different for international users, my examples used quarters, nickels, dimes and pennies. Feel free to use generic terms like &amp;quot;10 cent coins&amp;quot; or any other unit of currency you are more familiar with.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Bonus: Only print coins that are used at least once in the solution.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/17f3y2/012813_challenge_119_easy_change_calculator/",
        "title": "[01/28/13] Challenge #119 [Easy] Change Calculator",
        "difficulty": "Easy"
    },
    {
        "selfText": " Repulsion-Force\n\n[Colomb's Law](http://en.wikipedia.org/wiki/Coulomb%27s_law) describes the repulsion force for two electrically charged particles. In *very* general terms, it describes the rate at which particles move away from each-other based on each particle's mass and distance from one another.\n\nYour goal is to compute the repulsion force for two electrons in 2D space. Assume that the two particles have the same mass and charge. The function that computes force is as follows:\n\n    Force = (Particle 1's mass x Particle 2's mass) / Distance^2\n\nNote that Colomb's Law uses a constant, but we choose to omit that for the sake of simplicity. For those not familiar with vector math, you can compute the distance between two points in 2D space using the following formula:\n\n    deltaX = (Particle 1's x-position - Particle 2's x-position)\n    deltaY = (Particle 1's y-position - Particle 2's y-position)\n    Distance = Square-root( deltaX * deltaX + deltaY * deltaY )\n\n*Author:* nint22\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nOn standard console input, you will be given two rows of numbers: first row represents the first particle, with the second row representing the second particle. Each row will have three space-delimited real-numbers (floats), representing mass, x-position, and y-position. The mass will range, inclusively, from 0.001 to 100.0. The x and y positions will range inclusively from -100.0 to 100.0.\n\n## Output Description\n\nPrint the force as a float at a minimum three decimal places precision.\n\n# Sample Inputs &amp; Outputs\n## Sample Input 1\n\n    1 -5.2 3.8\n    1 8.7 -4.1\n\n## Sample Output 1\n    \n    0.0039\n    \n## Sample Input 2\n\n    4 0.04 -0.02\n    4 -0.02 -0.03\n\n## Sample Output 2\n\n    4324.3279\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Repulsion-Force&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Coulomb%27s_law\"&gt;Colomb&amp;#39;s Law&lt;/a&gt; describes the repulsion force for two electrically charged particles. In &lt;em&gt;very&lt;/em&gt; general terms, it describes the rate at which particles move away from each-other based on each particle&amp;#39;s mass and distance from one another.&lt;/p&gt;\n\n&lt;p&gt;Your goal is to compute the repulsion force for two electrons in 2D space. Assume that the two particles have the same mass and charge. The function that computes force is as follows:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Force = (Particle 1&amp;#39;s mass x Particle 2&amp;#39;s mass) / Distance^2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that Colomb&amp;#39;s Law uses a constant, but we choose to omit that for the sake of simplicity. For those not familiar with vector math, you can compute the distance between two points in 2D space using the following formula:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;deltaX = (Particle 1&amp;#39;s x-position - Particle 2&amp;#39;s x-position)\ndeltaY = (Particle 1&amp;#39;s y-position - Particle 2&amp;#39;s y-position)\nDistance = Square-root( deltaX * deltaX + deltaY * deltaY )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Author:&lt;/em&gt; nint22&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On standard console input, you will be given two rows of numbers: first row represents the first particle, with the second row representing the second particle. Each row will have three space-delimited real-numbers (floats), representing mass, x-position, and y-position. The mass will range, inclusively, from 0.001 to 100.0. The x and y positions will range inclusively from -100.0 to 100.0.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print the force as a float at a minimum three decimal places precision.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;1 -5.2 3.8\n1 8.7 -4.1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;0.0039\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;4 0.04 -0.02\n4 -0.02 -0.03\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;4324.3279\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1ml669/091713_challenge_138_easy_repulsionforce/",
        "title": "[09/17/13] Challenge #138 [Easy] Repulsion-Force",
        "difficulty": "Easy"
    },
    {
        "selfText": "# Description\n\nWhen we Swedes are young, we are taught a SUPER-SECRET language that only kids know, so we can hide secrets from our confused parents. This language is known as \"Rövarspråket\" (which means \"Robber's language\", more or less), and is surprisingly easy to become fluent in, at least when you're a kid. Recently, the cheeky residents of /r/Sweden decided to play a trick on the rest on reddit, and get a thread entirely in Rövarspråket to /r/all. [The results were hilarious](http://np.reddit.com/r/sweden/comments/301sqr/dodetot_%C3%A4ror_fof%C3%B6ror_lolitote/). \n\nRövarspråket is not very complicated: you take an ordinary word and replace the consonants with the consonant doubled and with an \"o\" in between. So the consonant \"b\" is replaced by \"bob\", \"r\" is replaced with \"ror\", \"s\" is replaced with \"sos\", and so on. Vowels are left intact. It's made for Swedish, but it works just as well in English.\n\nYour task today is to write a program that can encode a string of text into Rövarspråket. \n\n(note: this is a higly guarded Swedish state secret, so I trust that none of you will share this very privileged information with anyone! If you do, you will be extradited to Sweden and be forced to eat [surströmming](http://en.wikipedia.org/wiki/Surstr%C3%B6mming) as penance.)\n\n(note 2: surströmming is actually not that bad, it's much tastier than its reputation would suggest! I'd go so far as to say that it's the tastiest half-rotten fish in the world!)\n\n# Formal inputs &amp;amp; outputs\n## Input\n\nYou will recieve one line of input, which is a text string that should be encoded into Rövarspråket. \n\n## Output\n\nThe output will be the encoded string. \n\nA few notes: your program should be able to handle case properly, which means that \"Hello\" should be encoded to \"Hohelollolo\", and *not* as \"HoHelollolo\" (note the second capital \"H\"). \n\nAlso, since Rövarspråket is a Swedish invention, your program should follow Swedish rules regarding what is a vowel and what is a consonant. The Swedish alphabet is the same as the English alphabet except that there are three extra characters at the end (Å, Ä and Ö) which are all vowels. In addition, Y is always a vowel in Swedish, so the full list of vowels in Swedish is A, E, I, O, U, Y, Å, Ä and Ö. The rest are consonants.\n\nLastly, any character that is not a vowel or a consonant (i.e. things like punctuation) should be left intact in the output. \n\n# Example inputs\n## Input 1\n\n    Jag talar Rövarspråket!\n\n## Output 1\n\n    Jojagog totalolaror Rorövovarorsospoproråkoketot!\n\n## Input 2\n\n    I'm speaking Robber's language!\n\n## Output 2\n\n    I'mom sospopeakokinongog Rorobobboberor'sos lolanongoguagoge!\n\n# Challenge inputs\n\n## Input 1\n\n    Tre Kronor är världens bästa ishockeylag.\n\n## Input 2\n\n    Vår kung är coolare än er kung. \n\n# Bonus\n\nMake your program able to decode a Rövarspråket-encoded sentence as well as encode it. \n\n# Notes\n\nThis excellent problem (which filled my crusty old Swedish heart with glee) was suggested by /u/pogotc. Thanks so much for the suggestion!\n\nIf you have an idea for a problem, head on over to /r/dailyprogrammer_ideas and post your suggestion! If it's good idea, we might use it, and you'll be as cool as /u/pogotc. ",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;When we Swedes are young, we are taught a SUPER-SECRET language that only kids know, so we can hide secrets from our confused parents. This language is known as &amp;quot;Rövarspråket&amp;quot; (which means &amp;quot;Robber&amp;#39;s language&amp;quot;, more or less), and is surprisingly easy to become fluent in, at least when you&amp;#39;re a kid. Recently, the cheeky residents of &lt;a href=\"/r/Sweden\"&gt;/r/Sweden&lt;/a&gt; decided to play a trick on the rest on reddit, and get a thread entirely in Rövarspråket to &lt;a href=\"/r/all\"&gt;/r/all&lt;/a&gt;. &lt;a href=\"http://np.reddit.com/r/sweden/comments/301sqr/dodetot_%C3%A4ror_fof%C3%B6ror_lolitote/\"&gt;The results were hilarious&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;Rövarspråket is not very complicated: you take an ordinary word and replace the consonants with the consonant doubled and with an &amp;quot;o&amp;quot; in between. So the consonant &amp;quot;b&amp;quot; is replaced by &amp;quot;bob&amp;quot;, &amp;quot;r&amp;quot; is replaced with &amp;quot;ror&amp;quot;, &amp;quot;s&amp;quot; is replaced with &amp;quot;sos&amp;quot;, and so on. Vowels are left intact. It&amp;#39;s made for Swedish, but it works just as well in English.&lt;/p&gt;\n\n&lt;p&gt;Your task today is to write a program that can encode a string of text into Rövarspråket. &lt;/p&gt;\n\n&lt;p&gt;(note: this is a higly guarded Swedish state secret, so I trust that none of you will share this very privileged information with anyone! If you do, you will be extradited to Sweden and be forced to eat &lt;a href=\"http://en.wikipedia.org/wiki/Surstr%C3%B6mming\"&gt;surströmming&lt;/a&gt; as penance.)&lt;/p&gt;\n\n&lt;p&gt;(note 2: surströmming is actually not that bad, it&amp;#39;s much tastier than its reputation would suggest! I&amp;#39;d go so far as to say that it&amp;#39;s the tastiest half-rotten fish in the world!)&lt;/p&gt;\n\n&lt;h1&gt;Formal inputs &amp;amp; outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;p&gt;You will recieve one line of input, which is a text string that should be encoded into Rövarspråket. &lt;/p&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;p&gt;The output will be the encoded string. &lt;/p&gt;\n\n&lt;p&gt;A few notes: your program should be able to handle case properly, which means that &amp;quot;Hello&amp;quot; should be encoded to &amp;quot;Hohelollolo&amp;quot;, and &lt;em&gt;not&lt;/em&gt; as &amp;quot;HoHelollolo&amp;quot; (note the second capital &amp;quot;H&amp;quot;). &lt;/p&gt;\n\n&lt;p&gt;Also, since Rövarspråket is a Swedish invention, your program should follow Swedish rules regarding what is a vowel and what is a consonant. The Swedish alphabet is the same as the English alphabet except that there are three extra characters at the end (Å, Ä and Ö) which are all vowels. In addition, Y is always a vowel in Swedish, so the full list of vowels in Swedish is A, E, I, O, U, Y, Å, Ä and Ö. The rest are consonants.&lt;/p&gt;\n\n&lt;p&gt;Lastly, any character that is not a vowel or a consonant (i.e. things like punctuation) should be left intact in the output. &lt;/p&gt;\n\n&lt;h1&gt;Example inputs&lt;/h1&gt;\n\n&lt;h2&gt;Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Jag talar Rövarspråket!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Jojagog totalolaror Rorövovarorsospoproråkoketot!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;I&amp;#39;m speaking Robber&amp;#39;s language!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;I&amp;#39;mom sospopeakokinongog Rorobobboberor&amp;#39;sos lolanongoguagoge!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge inputs&lt;/h1&gt;\n\n&lt;h2&gt;Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Tre Kronor är världens bästa ishockeylag.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Vår kung är coolare än er kung. \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Make your program able to decode a Rövarspråket-encoded sentence as well as encode it. &lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;This excellent problem (which filled my crusty old Swedish heart with glee) was suggested by &lt;a href=\"/u/pogotc\"&gt;/u/pogotc&lt;/a&gt;. Thanks so much for the suggestion!&lt;/p&gt;\n\n&lt;p&gt;If you have an idea for a problem, head on over to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and post your suggestion! If it&amp;#39;s good idea, we might use it, and you&amp;#39;ll be as cool as &lt;a href=\"/u/pogotc\"&gt;/u/pogotc&lt;/a&gt;. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/341c03/20150427_challenge_212_easy_rövarspråket/",
        "title": "[2015-04-27] Challenge #212 [Easy] Rövarspråket",
        "difficulty": "Easy"
    },
    {
        "selfText": "# [](#EasyIcon) _(Easy)_: Sad Cycles\n\nTake a number, and add up the square of each digit. You'll end up with another number. If you repeat this process over and over again, you'll see that one of two things happen:\n\n* You'll reach one, and from that point you'll get one again and again.\n* You'll reach a cycle of 4, 16, 37, 58, 89, 145, 42, 20, 4, 16, 37, ...\n\nFor example, starting with the number 12:\n\n* 1^(2)+2^(2)=5\n* 5^(2)=25\n* 2^(2)+5^(2)=29\n* 2^(2)+9^(2)=85\n* 8^(2)+5^(2)=89\n* 8^(2)+9^(2)=145\n* From this point on, you'll join the cycle described above.\n\nHowever, if we start with the number 13:\n\n* 1^(2)+3^(2)=10\n* 1^(2)+0^(2)=1\n* 1^(2)=1\n* 1^(2)=1\n* We get the number 1 forever.\n\nThe sequence of numbers that we end up with is called a *sad cycle*, and it depends on the number you start with. If you start the process with a number **n**, the sad cycle for **n** is the cycle which ends up eventually repeating itself; this will either just be the cycle `1`, or the cycle `4, 16, 37, 58, 89, 145, 42, 20`.\n\nBut what if we cube the digits instead of squaring them? This gives us a different set of cycles all together. For example, starting with 82375 and repeatedly getting the sum of the *cube* of the digits will lead us to the cycle `352, 160, 217`. Other numbers gravitate toward certain end points. These cycles are called *3-sad cycles* (as the digits are raised to the power 3). This can be extended toward higher powers. For example, the 7-sad cycle for 1060925 is `5141159, 4955606, 5515475, 1152428, 2191919, 14349038, 6917264, 6182897, 10080881, 6291458, 7254695, 6059210`. Your challenge today,  will be to find the *b*-sad cycle for a given *n*.\n\n# Formal Inputs and Outputs\n\n## Input Description\n\nYou will input the base ***b*** on the first line, and the starting number ***n*** on the second line, like so:\n\n    5\n    117649\n\n## Output Description\n\nOutput a comma-separated list containing the ***b***-sad cycle for ***n***. For example, the 5-sad cycle for 117649 is:\n\n    10933, 59536, 73318, 50062\n\nThe starting point of the cycle doesn't matter - you can give a circularly permuted version of the cycle, too; rotating the output around, wrapping from the start to the end, is also a correct output. The following outputs are equivalent to the above output:\n\n    59536, 73318, 50062, 10933\n    73318, 50062, 10933, 59536\n    50062, 10933, 59536, 73318\n\n# Sample Inputs and Outputs\n\n## Sample 1\n\n### Input\n\n    6\n    2\n\n### Output\n\n    383890, 1057187, 513069, 594452, 570947, 786460, 477201, 239459, 1083396, 841700\n\n## Sample 2\n\n### Input\n\n    7\n    7\n\n### Output\n\n    5345158, 2350099, 9646378, 8282107, 5018104, 2191663\n\n## Sample 3\n\n### Input\n\n    3\n    14\n\n### Output\n\n    371\n\n## Sample 4\n\n### Input\n\n    11\n    2\n\n### Output\n\n    5410213163, 416175830, 10983257969, 105122244539, 31487287760, 23479019969, 127868735735, 23572659062, 34181820005, 17233070810, 12544944422, 31450865399, 71817055715, 14668399199, 134844138593, 48622871273, 21501697322, 33770194826, 44292995390, 125581636412, 9417560504, 33827228267, 21497682212, 42315320498, 40028569325, 40435823054, 8700530096, 42360123272, 2344680590, 40391187185, 50591455115, 31629394541, 63182489351, 48977104622, 44296837448, 50918009003, 71401059083, 42001520522, 101858747, 21187545101, 10669113941, 63492084785, 50958448520, 48715803824, 27804526448, 19581408116, 48976748282, 61476706631\n\n# Comment Order\n\nSome people have notified us that new solutions are getting buried if you're not one of the first to submit. This is valid concern, so today we're trialling a method of **setting the suggested sort order to** ***new*** (suggested sorts are a newly introduced feature on Reddit). We'll take feedback on this and see how it goes. This means newer solutions will appear at the top.\n\nIf you don't like this new sorting, you can still change the method back to **sort by** ***best***, which is the default.\n\n# Notes\n\nI wasn't aware that /u/AnkePluff has made a [similar challenge suggestion](http://www.reddit.com/r/dailyprogrammer_ideas/comments/2ydta5/easy_happy_numbers/) already - seems like we're on the same wavelength!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Sad Cycles&lt;/h1&gt;\n\n&lt;p&gt;Take a number, and add up the square of each digit. You&amp;#39;ll end up with another number. If you repeat this process over and over again, you&amp;#39;ll see that one of two things happen:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You&amp;#39;ll reach one, and from that point you&amp;#39;ll get one again and again.&lt;/li&gt;\n&lt;li&gt;You&amp;#39;ll reach a cycle of 4, 16, 37, 58, 89, 145, 42, 20, 4, 16, 37, ...&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For example, starting with the number 12:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;1&lt;sup&gt;2&lt;/sup&gt;+2&lt;sup&gt;2&lt;/sup&gt;=5&lt;/li&gt;\n&lt;li&gt;5&lt;sup&gt;2&lt;/sup&gt;=25&lt;/li&gt;\n&lt;li&gt;2&lt;sup&gt;2&lt;/sup&gt;+5&lt;sup&gt;2&lt;/sup&gt;=29&lt;/li&gt;\n&lt;li&gt;2&lt;sup&gt;2&lt;/sup&gt;+9&lt;sup&gt;2&lt;/sup&gt;=85&lt;/li&gt;\n&lt;li&gt;8&lt;sup&gt;2&lt;/sup&gt;+5&lt;sup&gt;2&lt;/sup&gt;=89&lt;/li&gt;\n&lt;li&gt;8&lt;sup&gt;2&lt;/sup&gt;+9&lt;sup&gt;2&lt;/sup&gt;=145&lt;/li&gt;\n&lt;li&gt;From this point on, you&amp;#39;ll join the cycle described above.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;However, if we start with the number 13:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;1&lt;sup&gt;2&lt;/sup&gt;+3&lt;sup&gt;2&lt;/sup&gt;=10&lt;/li&gt;\n&lt;li&gt;1&lt;sup&gt;2&lt;/sup&gt;+0&lt;sup&gt;2&lt;/sup&gt;=1&lt;/li&gt;\n&lt;li&gt;1&lt;sup&gt;2&lt;/sup&gt;=1&lt;/li&gt;\n&lt;li&gt;1&lt;sup&gt;2&lt;/sup&gt;=1&lt;/li&gt;\n&lt;li&gt;We get the number 1 forever.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The sequence of numbers that we end up with is called a &lt;em&gt;sad cycle&lt;/em&gt;, and it depends on the number you start with. If you start the process with a number &lt;strong&gt;n&lt;/strong&gt;, the sad cycle for &lt;strong&gt;n&lt;/strong&gt; is the cycle which ends up eventually repeating itself; this will either just be the cycle &lt;code&gt;1&lt;/code&gt;, or the cycle &lt;code&gt;4, 16, 37, 58, 89, 145, 42, 20&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;But what if we cube the digits instead of squaring them? This gives us a different set of cycles all together. For example, starting with 82375 and repeatedly getting the sum of the &lt;em&gt;cube&lt;/em&gt; of the digits will lead us to the cycle &lt;code&gt;352, 160, 217&lt;/code&gt;. Other numbers gravitate toward certain end points. These cycles are called &lt;em&gt;3-sad cycles&lt;/em&gt; (as the digits are raised to the power 3). This can be extended toward higher powers. For example, the 7-sad cycle for 1060925 is &lt;code&gt;5141159, 4955606, 5515475, 1152428, 2191919, 14349038, 6917264, 6182897, 10080881, 6291458, 7254695, 6059210&lt;/code&gt;. Your challenge today,  will be to find the &lt;em&gt;b&lt;/em&gt;-sad cycle for a given &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will input the base &lt;strong&gt;&lt;em&gt;b&lt;/em&gt;&lt;/strong&gt; on the first line, and the starting number &lt;strong&gt;&lt;em&gt;n&lt;/em&gt;&lt;/strong&gt; on the second line, like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;5\n117649\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Output a comma-separated list containing the &lt;strong&gt;&lt;em&gt;b&lt;/em&gt;&lt;/strong&gt;-sad cycle for &lt;strong&gt;&lt;em&gt;n&lt;/em&gt;&lt;/strong&gt;. For example, the 5-sad cycle for 117649 is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10933, 59536, 73318, 50062\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The starting point of the cycle doesn&amp;#39;t matter - you can give a circularly permuted version of the cycle, too; rotating the output around, wrapping from the start to the end, is also a correct output. The following outputs are equivalent to the above output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;59536, 73318, 50062, 10933\n73318, 50062, 10933, 59536\n50062, 10933, 59536, 73318\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample 1&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;6\n2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;383890, 1057187, 513069, 594452, 570947, 786460, 477201, 239459, 1083396, 841700\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample 2&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;7\n7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;5345158, 2350099, 9646378, 8282107, 5018104, 2191663\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample 3&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;3\n14\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;371\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample 4&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;11\n2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;5410213163, 416175830, 10983257969, 105122244539, 31487287760, 23479019969, 127868735735, 23572659062, 34181820005, 17233070810, 12544944422, 31450865399, 71817055715, 14668399199, 134844138593, 48622871273, 21501697322, 33770194826, 44292995390, 125581636412, 9417560504, 33827228267, 21497682212, 42315320498, 40028569325, 40435823054, 8700530096, 42360123272, 2344680590, 40391187185, 50591455115, 31629394541, 63182489351, 48977104622, 44296837448, 50918009003, 71401059083, 42001520522, 101858747, 21187545101, 10669113941, 63492084785, 50958448520, 48715803824, 27804526448, 19581408116, 48976748282, 61476706631\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Comment Order&lt;/h1&gt;\n\n&lt;p&gt;Some people have notified us that new solutions are getting buried if you&amp;#39;re not one of the first to submit. This is valid concern, so today we&amp;#39;re trialling a method of &lt;strong&gt;setting the suggested sort order to&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;new&lt;/em&gt;&lt;/strong&gt; (suggested sorts are a newly introduced feature on Reddit). We&amp;#39;ll take feedback on this and see how it goes. This means newer solutions will appear at the top.&lt;/p&gt;\n\n&lt;p&gt;If you don&amp;#39;t like this new sorting, you can still change the method back to &lt;strong&gt;sort by&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;best&lt;/em&gt;&lt;/strong&gt;, which is the default.&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;I wasn&amp;#39;t aware that &lt;a href=\"/u/AnkePluff\"&gt;/u/AnkePluff&lt;/a&gt; has made a &lt;a href=\"http://www.reddit.com/r/dailyprogrammer_ideas/comments/2ydta5/easy_happy_numbers/\"&gt;similar challenge suggestion&lt;/a&gt; already - seems like we&amp;#39;re on the same wavelength!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/36cyxf/20150518_challenge_215_easy_sad_cycles/",
        "title": "[2015-05-18] Challenge #215 [Easy] Sad Cycles",
        "difficulty": "Easy"
    },
    {
        "selfText": "# Description\n\nIn mathematics, a [Kaprekar number](https://en.wikipedia.org/wiki/Kaprekar_number) for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again. For instance, 45 is a Kaprekar number, because 45^2 = 2025 and 20+25 = 45. The Kaprekar numbers are named after D. R. Kaprekar. \n\nI was introduced to this after the recent [Kaprekar constant challenge](https://www.reddit.com/r/dailyprogrammer/comments/56tbds/20161010_challenge_287_easy_kaprekars_routine/). \n\nFor the main challenge we'll only focus on base 10 numbers. For a bonus, see if you can make it work in arbitrary bases.\n\n# Input Description\n\nYour program will receive two integers per line telling you the start and end of the range to scan, inclusively. Example:\n\n\t1 50\n\n# Output Description\n\nYour program should emit the Kaprekar numbers in that range. From our example:\n\n\t45\n\n# Challenge Input\n\n\t2 100\n\t101 9000\n\n# Challenge Output\n\n*Updated the output as per [this comment](https://www.reddit.com/r/dailyprogrammer/comments/5aemnn/20161031_challenge_290_easy_kaprekar_numbers/d9fx1hf/)*\n\n\t9 45 55 99\n\t297 703 999 2223 2728 4879 5050 5292 7272 7777",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;In mathematics, a &lt;a href=\"https://en.wikipedia.org/wiki/Kaprekar_number\"&gt;Kaprekar number&lt;/a&gt; for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again. For instance, 45 is a Kaprekar number, because 45&lt;sup&gt;2&lt;/sup&gt; = 2025 and 20+25 = 45. The Kaprekar numbers are named after D. R. Kaprekar. &lt;/p&gt;\n\n&lt;p&gt;I was introduced to this after the recent &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/56tbds/20161010_challenge_287_easy_kaprekars_routine/\"&gt;Kaprekar constant challenge&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;For the main challenge we&amp;#39;ll only focus on base 10 numbers. For a bonus, see if you can make it work in arbitrary bases.&lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;Your program will receive two integers per line telling you the start and end of the range to scan, inclusively. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 50\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the Kaprekar numbers in that range. From our example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;45\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;2 100\n101 9000\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;Updated the output as per &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/5aemnn/20161031_challenge_290_easy_kaprekar_numbers/d9fx1hf/\"&gt;this comment&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;9 45 55 99\n297 703 999 2223 2728 4879 5050 5292 7272 7777\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/5aemnn/20161031_challenge_290_easy_kaprekar_numbers/",
        "title": "[2016-10-31] Challenge #290 [Easy] Kaprekar Numbers",
        "difficulty": "Easy"
    },
    {
        "selfText": " String Transposition\n\nIt can be helpful sometimes to rotate a string 90-degrees, like a big vertical \"SALES\" poster or your business name on vertical neon lights, like [this image from Las Vegas](http://imgur.com/766x8uM). Your goal is to write a program that does this, but for multiples lines of text. This is very similar to a [Matrix Transposition](http://en.wikipedia.org/wiki/Transpose), since the order we want returned is not a true 90-degree rotation of text.\n\n*Author:* nint22\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nYou will first be given an integer N which is the number of strings that follows. N will range inclusively from 1 to 16. Each line of text will have at most 256 characters, including the new-line (so at most 255 printable-characters, with the last being the new-line or carriage-return).\n\n## Output Description\n\nSimply print the given lines top-to-bottom. The first given line should be the left-most vertical line.\n\n# Sample Inputs &amp; Outputs\n## Sample Input 1\n\n    1\n    Hello, World!\n\n## Sample Output 1\n\n    H\n    e\n    l\n    l\n    o\n    ,\n    \n    W\n    o\n    r\n    l\n    d\n    !\n    \n## Sample Input 2\n\n    5\n    Kernel\n    Microcontroller\n    Register\n    Memory\n    Operator\n\n## Sample Output 2\n\n    KMRMO\n    eieep\n    rcgme\n    nrior\n    eosra\n    lctyt\n     oe o\n     nr r\n     t\n     r\n     o\n     l\n     l\n     e\n     r\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: String Transposition&lt;/h1&gt;\n\n&lt;p&gt;It can be helpful sometimes to rotate a string 90-degrees, like a big vertical &amp;quot;SALES&amp;quot; poster or your business name on vertical neon lights, like &lt;a href=\"http://imgur.com/766x8uM\"&gt;this image from Las Vegas&lt;/a&gt;. Your goal is to write a program that does this, but for multiples lines of text. This is very similar to a &lt;a href=\"http://en.wikipedia.org/wiki/Transpose\"&gt;Matrix Transposition&lt;/a&gt;, since the order we want returned is not a true 90-degree rotation of text.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author:&lt;/em&gt; nint22&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will first be given an integer N which is the number of strings that follows. N will range inclusively from 1 to 16. Each line of text will have at most 256 characters, including the new-line (so at most 255 printable-characters, with the last being the new-line or carriage-return).&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Simply print the given lines top-to-bottom. The first given line should be the left-most vertical line.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;1\nHello, World!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;H\ne\nl\nl\no\n,\n\nW\no\nr\nl\nd\n!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;5\nKernel\nMicrocontroller\nRegister\nMemory\nOperator\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;KMRMO\neieep\nrcgme\nnrior\neosra\nlctyt\n oe o\n nr r\n t\n r\n o\n l\n l\n e\n r\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1m1jam/081313_challenge_137_easy_string_transposition/",
        "title": "[08/13/13] Challenge #137 [Easy] String Transposition",
        "difficulty": "Easy"
    },
    {
        "selfText": " Variable Notation\n\nWhen writing code, it can be helpful to have a standard ([Identifier naming convention](http://en.wikipedia.org/wiki/Identifier_naming_convention)) that describes how to define all your variables and object names. This is to keep code easy to read and maintain. Sometimes the standard can help describe the type (such as in [Hungarian notation](http://en.wikipedia.org/wiki/Hungarian_notation)) or make the variables visually easy to read ([CamcelCase notation](http://en.wikipedia.org/wiki/CamelCase) or [snake_case](http://en.wikipedia.org/wiki/Snake_case)).\n\nYour goal is to implement a program that takes an english-language series of words and converts them to a specific variable notation format. Your code must support CamcelCase, snake_case, and capitalized snake_case.\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nOn standard console input, you will be given an integer one the first line of input, which describes the notation you want to convert to. If this integer is zero ('0'), then use CamcelCase. If it is one ('1'), use snake_case. If it is two ('2'), use capitalized snake_case. The line after this will be a space-delimited series of words, which will only be lower-case alpha-numeric characters (letters and digits).\n\n## Output Description\n\nSimply print the given string in the appropriate notation.\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n    0\n    hello world\n\n    1\n    user id\n\n    2\n    map controller delegate manager\n\n## Sample Output\n\n    0\n    helloWorld\n\n    1\n    user_id\n\n    2\n    MAP_CONTROLLER_DELEGATE_MANAGER\n\n## Difficulty++\n\nFor an extra challenge, try to convert from one notation to another. Expect the first line to be two integers, the first one being the notation already used, and the second integer being the one you are to convert to. An example of this is:\n\nInput:\n\n    1 0\n    user_id\n\nOutput:\n\n    userId",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Variable Notation&lt;/h1&gt;\n\n&lt;p&gt;When writing code, it can be helpful to have a standard (&lt;a href=\"http://en.wikipedia.org/wiki/Identifier_naming_convention\"&gt;Identifier naming convention&lt;/a&gt;) that describes how to define all your variables and object names. This is to keep code easy to read and maintain. Sometimes the standard can help describe the type (such as in &lt;a href=\"http://en.wikipedia.org/wiki/Hungarian_notation\"&gt;Hungarian notation&lt;/a&gt;) or make the variables visually easy to read (&lt;a href=\"http://en.wikipedia.org/wiki/CamelCase\"&gt;CamcelCase notation&lt;/a&gt; or &lt;a href=\"http://en.wikipedia.org/wiki/Snake_case\"&gt;snake_case&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;Your goal is to implement a program that takes an english-language series of words and converts them to a specific variable notation format. Your code must support CamcelCase, snake_case, and capitalized snake_case.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On standard console input, you will be given an integer one the first line of input, which describes the notation you want to convert to. If this integer is zero (&amp;#39;0&amp;#39;), then use CamcelCase. If it is one (&amp;#39;1&amp;#39;), use snake_case. If it is two (&amp;#39;2&amp;#39;), use capitalized snake_case. The line after this will be a space-delimited series of words, which will only be lower-case alpha-numeric characters (letters and digits).&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Simply print the given string in the appropriate notation.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;0\nhello world\n\n1\nuser id\n\n2\nmap controller delegate manager\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;0\nhelloWorld\n\n1\nuser_id\n\n2\nMAP_CONTROLLER_DELEGATE_MANAGER\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Difficulty++&lt;/h2&gt;\n\n&lt;p&gt;For an extra challenge, try to convert from one notation to another. Expect the first line to be two integers, the first one being the notation already used, and the second integer being the one you are to convert to. An example of this is:&lt;/p&gt;\n\n&lt;p&gt;Input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 0\nuser_id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;userId\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1q6pq5/11413_challenge_140_easy_variable_notation/",
        "title": "[11/4/13] Challenge #140 [Easy] Variable Notation",
        "difficulty": "Easy"
    },
    {
        "selfText": "#\n\nYou have just been hired by the company 'Super-Corp 5000' and they require you to be up to speed on a new programming language you haven't yet tried.\n\nIt is your task to familiarise yourself with this language following this criteria:\n\n* The language must be one you've shown interest for in the past \n* You must not have had past experience with the language\n\nIn order to Impress HR and convince the manager to hire you, you must complete 5 small tasks. You will definitely be hired if you complete the bonus task.\n\n##Input &amp; Output\n\nThese 5 tasks are:\n\n* Output 'Hello World' to the console.\n\n* Return an array of the first 100 numbers that are divisible by 3 and 5.\n\n* Create a program that verifies if a word is an anagram of another word.\n\n* Create a program that removes a specificed letter from a word.\n\n* Sum all the elements of an array\n\nAll output will be the expected output of these processes which can be verified in your normal programming language.\n\n##Bonus\n\nImplement a bubble-sort.\n\n##Note\n\nDon't use a language you've had contact with before, otherwise this will be very easy. The idea is to learn a new language that you've been curious about.\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Description&lt;/h2&gt;\n\n&lt;p&gt;You have just been hired by the company &amp;#39;Super-Corp 5000&amp;#39; and they require you to be up to speed on a new programming language you haven&amp;#39;t yet tried.&lt;/p&gt;\n\n&lt;p&gt;It is your task to familiarise yourself with this language following this criteria:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The language must be one you&amp;#39;ve shown interest for in the past &lt;/li&gt;\n&lt;li&gt;You must not have had past experience with the language&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In order to Impress HR and convince the manager to hire you, you must complete 5 small tasks. You will definitely be hired if you complete the bonus task.&lt;/p&gt;\n\n&lt;h2&gt;Input &amp;amp; Output&lt;/h2&gt;\n\n&lt;p&gt;These 5 tasks are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Output &amp;#39;Hello World&amp;#39; to the console.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Return an array of the first 100 numbers that are divisible by 3 and 5.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create a program that verifies if a word is an anagram of another word.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create a program that removes a specificed letter from a word.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Sum all the elements of an array&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;All output will be the expected output of these processes which can be verified in your normal programming language.&lt;/p&gt;\n\n&lt;h2&gt;Bonus&lt;/h2&gt;\n\n&lt;p&gt;Implement a bubble-sort.&lt;/p&gt;\n\n&lt;h2&gt;Note&lt;/h2&gt;\n\n&lt;p&gt;Don&amp;#39;t use a language you&amp;#39;ve had contact with before, otherwise this will be very easy. The idea is to learn a new language that you&amp;#39;ve been curious about.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/26ijiu/5262014_challenge_164_easy_assemble_this_scheme/",
        "title": "[5/26/2014] Challenge #164 [Easy] Assemble this Scheme into Python",
        "difficulty": "Easy"
    },
    {
        "selfText": " Nuts &amp; Bolts\n\nYou have just been hired at a local home improvement store to help compute the proper costs of inventory. The current prices are out of date and wrong; you have to figure out which items need to be re-labeled with the correct price.\n\nYou will be first given a list of item-names and their current price. You will then be given another list of the same item-names but with the correct price. You must then print a list of items that have changed, and by how much.\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nThe first line of input will be an integer N, which is for the number of rows in each list. Each list has N-lines of two space-delimited strings: the first string will be the unique item name (without spaces), the second string will be the price (in whole-integer cents). The second list, following the same format, will have the same unique item-names, but with the correct price. Note that the lists may not be in the same order!\n\n## Output Description\n\nFor each item that has had its price changed, print a row with the item name and the price difference (in cents). Print the sign of the change (e.g. '+' for a growth in price, or '-' for a loss in price). Order does not matter for output.\n\n# Sample Inputs &amp; Outputs\n## Sample Input 1\n\n    4\n    CarriageBolt 45\n    Eyebolt 50\n    Washer 120\n    Rivet 10\n    CarriageBolt 45\n    Eyebolt 45\n    Washer 140\n    Rivet 10\n\n## Sample Output 1\n\n    Eyebolt -5\n    Washer +20\n\n## Sample Input 2\n\n    3\n    2DNail 3\n    4DNail 5\n    8DNail 10\n    8DNail 11\n    4DNail 5\n    2DNail 2\n\n## Sample Output 2\n\n    2DNail -1\n    8DNail +1",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Nuts &amp;amp; Bolts&lt;/h1&gt;\n\n&lt;p&gt;You have just been hired at a local home improvement store to help compute the proper costs of inventory. The current prices are out of date and wrong; you have to figure out which items need to be re-labeled with the correct price.&lt;/p&gt;\n\n&lt;p&gt;You will be first given a list of item-names and their current price. You will then be given another list of the same item-names but with the correct price. You must then print a list of items that have changed, and by how much.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;The first line of input will be an integer N, which is for the number of rows in each list. Each list has N-lines of two space-delimited strings: the first string will be the unique item name (without spaces), the second string will be the price (in whole-integer cents). The second list, following the same format, will have the same unique item-names, but with the correct price. Note that the lists may not be in the same order!&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;For each item that has had its price changed, print a row with the item name and the price difference (in cents). Print the sign of the change (e.g. &amp;#39;+&amp;#39; for a growth in price, or &amp;#39;-&amp;#39; for a loss in price). Order does not matter for output.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;4\nCarriageBolt 45\nEyebolt 50\nWasher 120\nRivet 10\nCarriageBolt 45\nEyebolt 45\nWasher 140\nRivet 10\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Eyebolt -5\nWasher +20\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;3\n2DNail 3\n4DNail 5\n8DNail 10\n8DNail 11\n4DNail 5\n2DNail 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;2DNail -1\n8DNail +1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1sob1e/121113_challenge_144_easy_nuts_bolts/",
        "title": "[12/11/13] Challenge #144 [Easy] Nuts &amp; Bolts",
        "difficulty": "Easy"
    },
    {
        "selfText": "#Oops:\n\nBy now you all have noticed /r/dailyprogrammer has added 3 new moderators. All of us including the existing moderators have been working hard to bring back 3 challenges a week.\n\n\nWe have had some minor issues with dates and challenge numbers. Many of the dates posted were said to be in \"4\" which is April and really should have been \"3\" for March. Also our numbering of challenges have been weird.\n\n\nSo going forward this week we will start with 156. Each challenge this week will be 156 (easy, intermediate and hard). Next week all 3 challenges will be 157. Etc. Also we will strive to update the 3 links at the top of the subreddit with the latest challenges and try to get dates correct on our postings. Thanks for your patience and your support!\n\n\n\nTo honor our mistake this week's easy challenge is to decode a message. I have encoded a message by adding a \"4\" to each character's ASCII value. It will be your job to decode this message by reversing the process and making a decoder.\n\n#Input:\n\nDecode this message:\n\n    Etvmp$Jsspw%%%%\n    [e}$xs$ks%$]sy$lezi$wspzih$xli$lmhhir$qiwweki2$Rs{$mx$mw$}syv$xyvr$xs$nsmr\n    mr$sr$xlmw$tvero2$Hs$rsx$tswx$er}xlmrk$xlex${mpp$kmzi$e{e}$xlmw$qiwweki2$Pix\n    tistpi$higshi$xli$qiwweki$sr$xlimv$s{r$erh$vieh$xlmw$qiwweki2$]sy$ger$tpe}$epsrk\n    f}$RSX$tswxmrk$ls{$}sy$higshih$xlmw$qiwweki2$Mrwxieh$tswx$}syv$wspyxmsr$xs$fi$}syv\n    jezsvmxi$Lipps${svph$tvskveq$mr$sri$perkyeki$sj$}syv$glsmgi2$\n    Qeoi$wyvi$}syv$tvskveq$we}w$&amp;Lipps$[svph%%%&amp;${mxl$7$%$ex$xli$irh2$Xlmw${e}\n    tistpi$fvs{wmrk$xli$gleppirki${mpp$xlmro${i$lezi$epp$pswx$syv$qmrhw2$Xlswi${ls$tswx$lipps\n    {svph$wspyxmsrw${mxlsyx$xli$xlvii$%%%${mpp$lezi$rsx$higshih$xli$qiwweki$erh$ws$}sy$ger$\n    tspmxip}$tsmrx$syx$xlimv$wspyxmsr$mw$mr$ivvsv$,xli}$evi$nywx$jspps{mrk$epsrk${mxlsyx$ors{mrk-\n    Irns}$xlmw$jyr2$Xli$xvyxl${mpp$fi$liph$f}$xlswi${ls$ger$higshi$xli$qiwweki2$&gt;-\n\n#Output: \n\nAs part of the challenge we leave it to the programmer to discover the correct output.\n\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Oops:&lt;/h1&gt;\n\n&lt;p&gt;By now you all have noticed &lt;a href=\"/r/dailyprogrammer\"&gt;/r/dailyprogrammer&lt;/a&gt; has added 3 new moderators. All of us including the existing moderators have been working hard to bring back 3 challenges a week.&lt;/p&gt;\n\n&lt;p&gt;We have had some minor issues with dates and challenge numbers. Many of the dates posted were said to be in &amp;quot;4&amp;quot; which is April and really should have been &amp;quot;3&amp;quot; for March. Also our numbering of challenges have been weird.&lt;/p&gt;\n\n&lt;p&gt;So going forward this week we will start with 156. Each challenge this week will be 156 (easy, intermediate and hard). Next week all 3 challenges will be 157. Etc. Also we will strive to update the 3 links at the top of the subreddit with the latest challenges and try to get dates correct on our postings. Thanks for your patience and your support!&lt;/p&gt;\n\n&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;To honor our mistake this week&amp;#39;s easy challenge is to decode a message. I have encoded a message by adding a &amp;quot;4&amp;quot; to each character&amp;#39;s ASCII value. It will be your job to decode this message by reversing the process and making a decoder.&lt;/p&gt;\n\n&lt;h1&gt;Input:&lt;/h1&gt;\n\n&lt;p&gt;Decode this message:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Etvmp$Jsspw%%%%\n[e}$xs$ks%$]sy$lezi$wspzih$xli$lmhhir$qiwweki2$Rs{$mx$mw$}syv$xyvr$xs$nsmr\nmr$sr$xlmw$tvero2$Hs$rsx$tswx$er}xlmrk$xlex${mpp$kmzi$e{e}$xlmw$qiwweki2$Pix\ntistpi$higshi$xli$qiwweki$sr$xlimv$s{r$erh$vieh$xlmw$qiwweki2$]sy$ger$tpe}$epsrk\nf}$RSX$tswxmrk$ls{$}sy$higshih$xlmw$qiwweki2$Mrwxieh$tswx$}syv$wspyxmsr$xs$fi$}syv\njezsvmxi$Lipps${svph$tvskveq$mr$sri$perkyeki$sj$}syv$glsmgi2$\nQeoi$wyvi$}syv$tvskveq$we}w$&amp;amp;Lipps$[svph%%%&amp;amp;${mxl$7$%$ex$xli$irh2$Xlmw${e}\ntistpi$fvs{wmrk$xli$gleppirki${mpp$xlmro${i$lezi$epp$pswx$syv$qmrhw2$Xlswi${ls$tswx$lipps\n{svph$wspyxmsrw${mxlsyx$xli$xlvii$%%%${mpp$lezi$rsx$higshih$xli$qiwweki$erh$ws$}sy$ger$\ntspmxip}$tsmrx$syx$xlimv$wspyxmsr$mw$mr$ivvsv$,xli}$evi$nywx$jspps{mrk$epsrk${mxlsyx$ors{mrk-\nIrns}$xlmw$jyr2$Xli$xvyxl${mpp$fi$liph$f}$xlswi${ls$ger$higshi$xli$qiwweki2$&amp;gt;-\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;As part of the challenge we leave it to the programmer to discover the correct output.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/21w3lb/412014_challenge_156_easy_simple_decoder/",
        "title": "[4/1/2014] Challenge #156 [Easy] Simple Decoder",
        "difficulty": "Easy"
    },
    {
        "selfText": " Sport Points\n\nYou must write code that verifies the awarded points for a fictional sport are valid. This sport is a simplification of [American Football](http://en.wikipedia.org/wiki/American_football#Scoring) scoring rules. This means that the score values must be any logical combination of the following four rewards:\n\n+ 6 points for a \"touch-down\"\n+ 3 points for a \"field-goal\"\n+ 1 point for an \"extra-point\"; can only be rewarded *after* a touch-down. Mutually-exclusive with \"two-point conversion\"\n+ 2 points for a \"two-point conversion\"; can only be rewarded *after* a touch-down. Mutually-exclusive with \"extra-point\"\n\nA valid score could be 7, which can come from a single \"touch-down\" and then an \"extra-point\". Another example could be 6, from either a single \"touch-down\" or two \"field-goals\". 4 is not a valid score, since it cannot be formed by any well-combined rewards.\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nInput will consist of a single positive integer given on standard console input.\n\n## Output Description\n\nPrint \"Valid Score\" or \"Invalid Score\" based on the respective validity of the given score.\n\n# Sample Inputs &amp; Outputs\n## Sample Input 1\n\n    35\n\n## Sample Output 1\n\n    Valid Score\n\n## Sample Input 2\n\n    2\n\n## Sample Output 2\n\n    Invalid Score\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Sport Points&lt;/h1&gt;\n\n&lt;p&gt;You must write code that verifies the awarded points for a fictional sport are valid. This sport is a simplification of &lt;a href=\"http://en.wikipedia.org/wiki/American_football#Scoring\"&gt;American Football&lt;/a&gt; scoring rules. This means that the score values must be any logical combination of the following four rewards:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;6 points for a &amp;quot;touch-down&amp;quot;&lt;/li&gt;\n&lt;li&gt;3 points for a &amp;quot;field-goal&amp;quot;&lt;/li&gt;\n&lt;li&gt;1 point for an &amp;quot;extra-point&amp;quot;; can only be rewarded &lt;em&gt;after&lt;/em&gt; a touch-down. Mutually-exclusive with &amp;quot;two-point conversion&amp;quot;&lt;/li&gt;\n&lt;li&gt;2 points for a &amp;quot;two-point conversion&amp;quot;; can only be rewarded &lt;em&gt;after&lt;/em&gt; a touch-down. Mutually-exclusive with &amp;quot;extra-point&amp;quot;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A valid score could be 7, which can come from a single &amp;quot;touch-down&amp;quot; and then an &amp;quot;extra-point&amp;quot;. Another example could be 6, from either a single &amp;quot;touch-down&amp;quot; or two &amp;quot;field-goals&amp;quot;. 4 is not a valid score, since it cannot be formed by any well-combined rewards.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;Input will consist of a single positive integer given on standard console input.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print &amp;quot;Valid Score&amp;quot; or &amp;quot;Invalid Score&amp;quot; based on the respective validity of the given score.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;35\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Valid Score\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Invalid Score\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1undyd/010714_challenge_147_easy_sport_points/",
        "title": "[01/07/14] Challenge #147 [Easy] Sport Points",
        "difficulty": "Easy"
    },
    {
        "selfText": " Student Management\n\nYou are a computer science professor at South Harmon Institute of Technology, and are in dire need of automatic grading! The good news is you have all of your student's assignments in an easy-to-read format, making automation easy!\n\nYou will be given a list of unique student names, and then a list of their assignment grades. All assignments are based on 20 points and are scored in whole-numbers (integers). All students have received the same number of assignments, so you don't have to worry about managing [jagged arrays](http://en.wikipedia.org/wiki/Iliffe_vector).\n\n*Author:* nint22\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nOn standard console input, you will be given two space-delimited integers N and M: N is the number of students (which ranges from 1 to 60, inclusive), and M is the number of assignments (which ranges from 4 to 100, inclusive). This will be followed by N lines of text, each starting with an upper-case unique string being is your students name. This is then followed by M integers, which are the grades ranging from 0 to 20, inclusively.\n\n## Output Description\n\nOn the first line of output, print the class' average grade. Then, for each student, print their name and average grade (up to two decimal points precision).\n\n# Sample Inputs &amp; Outputs\n## Sample Input 1\n\n    3 5\n    JON 19 14 15 15 16\n    JEREMY 15 11 10 15 16\n    JESSE 19 17 20 19 18\n\n## Sample Output 1\n\n    15.93\n    JON 15.80\n    JEREMY 13.40\n    JESSE 18.60\n    \n## Sample Input 2\n\n    10 10\n    ABIGAIL 11 3 5 20 4 2 8 17 4 5\n    ALEXANDER 2 12 20 0 6 10 3 4 9 7\n    AVA 11 15 2 19 14 5 16 18 15 19\n    ETHAN 6 12 0 0 5 11 0 11 12 15\n    ISABELLA 16 0 10 7 20 20 7 2 0 1\n    JACOB 2 14 17 7 1 11 16 14 14 7\n    JAYDEN 10 10 3 16 15 16 8 17 15 3\n    MADISON 10 11 19 4 12 15 7 4 18 13\n    SOPHIA 5 17 14 7 1 17 18 8 1 2\n    WILLIAM 12 12 19 9 4 3 0 4 13 14\n\n## Sample Output 2\n\n    9.50\n    ABIGAIL\t7.90\n    ALEXANDER 7.30\n    AVA\t13.40\n    ETHAN 7.20\n    ISABELLA 8.30\n    JACOB 10.30\n    JAYDEN 11.30\n    MADISON 11.30\n    SOPHIA 9.00\n    WILLIAM 9.00",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Student Management&lt;/h1&gt;\n\n&lt;p&gt;You are a computer science professor at South Harmon Institute of Technology, and are in dire need of automatic grading! The good news is you have all of your student&amp;#39;s assignments in an easy-to-read format, making automation easy!&lt;/p&gt;\n\n&lt;p&gt;You will be given a list of unique student names, and then a list of their assignment grades. All assignments are based on 20 points and are scored in whole-numbers (integers). All students have received the same number of assignments, so you don&amp;#39;t have to worry about managing &lt;a href=\"http://en.wikipedia.org/wiki/Iliffe_vector\"&gt;jagged arrays&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author:&lt;/em&gt; nint22&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On standard console input, you will be given two space-delimited integers N and M: N is the number of students (which ranges from 1 to 60, inclusive), and M is the number of assignments (which ranges from 4 to 100, inclusive). This will be followed by N lines of text, each starting with an upper-case unique string being is your students name. This is then followed by M integers, which are the grades ranging from 0 to 20, inclusively.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;On the first line of output, print the class&amp;#39; average grade. Then, for each student, print their name and average grade (up to two decimal points precision).&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;3 5\nJON 19 14 15 15 16\nJEREMY 15 11 10 15 16\nJESSE 19 17 20 19 18\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;15.93\nJON 15.80\nJEREMY 13.40\nJESSE 18.60\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;10 10\nABIGAIL 11 3 5 20 4 2 8 17 4 5\nALEXANDER 2 12 20 0 6 10 3 4 9 7\nAVA 11 15 2 19 14 5 16 18 15 19\nETHAN 6 12 0 0 5 11 0 11 12 15\nISABELLA 16 0 10 7 20 20 7 2 0 1\nJACOB 2 14 17 7 1 11 16 14 14 7\nJAYDEN 10 10 3 16 15 16 8 17 15 3\nMADISON 10 11 19 4 12 15 7 4 18 13\nSOPHIA 5 17 14 7 1 17 18 8 1 2\nWILLIAM 12 12 19 9 4 3 0 4 13 14\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;9.50\nABIGAIL 7.90\nALEXANDER 7.30\nAVA 13.40\nETHAN 7.20\nISABELLA 8.30\nJACOB 10.30\nJAYDEN 11.30\nMADISON 11.30\nSOPHIA 9.00\nWILLIAM 9.00\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1kphtf/081313_challenge_136_easy_student_management/",
        "title": "[08/13/13] Challenge #136 [Easy] Student Management",
        "difficulty": "Easy"
    },
    {
        "selfText": " Longest Two-Character Sub-String\n\nThis programming challenge is a [classic](http://en.wikipedia.org/wiki/Longest_common_substring_problem) interview question for software engineers: given a string, find the longest sub-string that contains, at most, two characters.\n\n*Author: /u/Regul*\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nThrough standard console input, you will be given a string to search, which only contains lower-case alphabet letters.\n\n## Output Description\n\nSimply print the longest sub-string of the given string that contains, at most, two unique characters. If you find multiple sub-strings that match the description, print the last sub-string (furthest to the right).\n\n# Sample Inputs &amp; Outputs\n## Sample Inputs\n\n    abbccc\n    abcabcabcabccc\n    qwertyytrewq\n\n## Sample Outputs\n\n    bbccc\n    bccc\n    tyyt\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Longest Two-Character Sub-String&lt;/h1&gt;\n\n&lt;p&gt;This programming challenge is a &lt;a href=\"http://en.wikipedia.org/wiki/Longest_common_substring_problem\"&gt;classic&lt;/a&gt; interview question for software engineers: given a string, find the longest sub-string that contains, at most, two characters.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: &lt;a href=\"/u/Regul\"&gt;/u/Regul&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;Through standard console input, you will be given a string to search, which only contains lower-case alphabet letters.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Simply print the longest sub-string of the given string that contains, at most, two unique characters. If you find multiple sub-strings that match the description, print the last sub-string (furthest to the right).&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Inputs&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;abbccc\nabcabcabcabccc\nqwertyytrewq\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Outputs&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;bbccc\nbccc\ntyyt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1g0tw1/easy_longest_twocharacter_substring/",
        "title": "[Easy] Longest Two-Character Sub-String",
        "difficulty": "Easy"
    },
    {
        "selfText": " Guess-that-number game!\n\nA \"guess-that-number\" game is exactly what it sounds like: a number is guessed at random by the computer, and you must guess that number to win! The only thing the computer tells you is if your guess is below or above the number.\n\nYour goal is to write a program that, upon initialization, guesses a number between 1 and 100 (inclusive), and asks you for your guess. If you type a number, the program must either tell you if you won (you guessed the computer's number), or if your guess was below the computer's number, or if your guess was above the computer's number. If the user ever types \"exit\", the program must terminate.\n\n# Formal Inputs &amp; Outputs\n\n## Input Description\n\nAt run-time, expect the user to input a number from 1 to 100 (inclusive), or the string \"exit\", and treat all other conditions as a wrong guess.\n\n## Output Description\n\nThe program must print whether or not your guess was correct, otherwise print if your guess was below or above the computer's number.\n\n# Sample Inputs &amp; Outputs\n\nLet \"C&gt;\" be the output from your applicatgion, and \"U&gt;\" be what the user types:\n\n    C&gt; Welcome to guess-that-numbers game! I have already picked a number in [1, 100]. Please make a guess. Type \"exit\" to quit.\n    U&gt; 1\n    C&gt; Wrong. That number is below my number.\n    U&gt; 50\n    C&gt; Wrong. That number is above my number.\n    ...\n    U&gt; 31\n    C&gt; Correct! That is my number, you win! &lt;Program terminates&gt;\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Guess-that-number game!&lt;/h1&gt;\n\n&lt;p&gt;A &amp;quot;guess-that-number&amp;quot; game is exactly what it sounds like: a number is guessed at random by the computer, and you must guess that number to win! The only thing the computer tells you is if your guess is below or above the number.&lt;/p&gt;\n\n&lt;p&gt;Your goal is to write a program that, upon initialization, guesses a number between 1 and 100 (inclusive), and asks you for your guess. If you type a number, the program must either tell you if you won (you guessed the computer&amp;#39;s number), or if your guess was below the computer&amp;#39;s number, or if your guess was above the computer&amp;#39;s number. If the user ever types &amp;quot;exit&amp;quot;, the program must terminate.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;At run-time, expect the user to input a number from 1 to 100 (inclusive), or the string &amp;quot;exit&amp;quot;, and treat all other conditions as a wrong guess.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;The program must print whether or not your guess was correct, otherwise print if your guess was below or above the computer&amp;#39;s number.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;p&gt;Let &amp;quot;C&amp;gt;&amp;quot; be the output from your applicatgion, and &amp;quot;U&amp;gt;&amp;quot; be what the user types:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;C&amp;gt; Welcome to guess-that-numbers game! I have already picked a number in [1, 100]. Please make a guess. Type &amp;quot;exit&amp;quot; to quit.\nU&amp;gt; 1\nC&amp;gt; Wrong. That number is below my number.\nU&amp;gt; 50\nC&amp;gt; Wrong. That number is above my number.\n...\nU&amp;gt; 31\nC&amp;gt; Correct! That is my number, you win! &amp;lt;Program terminates&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/15ul7q/122013_challenge_115_easy_guessthatnumber_game/",
        "title": "[1/2/2013] Challenge #115 [Easy] Guess-that-number game!",
        "difficulty": "Easy"
    },
    {
        "selfText": " Combination Lock\n\n[Combination locks](http://en.wikipedia.org/wiki/Combination_lock) are mechanisms that are locked until a specific number combination is input. Either the input is a single dial that must rotate around in a special procedure, or have three disks set in specific positions. This challenge will ask you to compute how much you have to spin a single-face lock to open it with a given three-digit code.\n\nThe procedure for our lock is as follows: (lock-face starts at number 0 and has up to N numbers)\n\n+ Spin the lock a full 2 times clockwise, and continue rotating it to the code's first digit.\n+ Spin the lock a single time counter-clockwise, and continue rotating to the code's second digit.\n+ Spin the lock clockwise directly to the code's last digit.\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nInput will consist of four space-delimited integers on a single line through console standard input. This integers will range inclusively from 1 to 255. The first integer is N: the number of digits on the lock, starting from 0. A lock where N is 5 means the printed numbers on the dial are 0, 1, 2, 3, and 5, listed counter-clockwise. The next three numbers are the three digits for the opening code. They will always range inclusively between 0 and N-1.\n\n## Output Description\n\nPrint the total rotation increments you've had to rotate to open the lock with the given code. See example explanation for details.\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n    5 1 2 3\n\n## Sample Output\n\n    21\n\nHere's how we got that number:\n\n+ Spin lock 2 times clockwise: +10, at position 0\n+ Spin lock to first number clockwise: +1, at position 1\n+ Spin lock 1 time counter-clockwise: +5, at position 1\n+ Spin lock to second number counter-clockwise: +4, at position 2\n+ Spin lock to third number clockwise: +1, at position 3",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#EasyIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Easy)&lt;/em&gt;: Combination Lock&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Combination_lock\"&gt;Combination locks&lt;/a&gt; are mechanisms that are locked until a specific number combination is input. Either the input is a single dial that must rotate around in a special procedure, or have three disks set in specific positions. This challenge will ask you to compute how much you have to spin a single-face lock to open it with a given three-digit code.&lt;/p&gt;\n\n&lt;p&gt;The procedure for our lock is as follows: (lock-face starts at number 0 and has up to N numbers)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Spin the lock a full 2 times clockwise, and continue rotating it to the code&amp;#39;s first digit.&lt;/li&gt;\n&lt;li&gt;Spin the lock a single time counter-clockwise, and continue rotating to the code&amp;#39;s second digit.&lt;/li&gt;\n&lt;li&gt;Spin the lock clockwise directly to the code&amp;#39;s last digit.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;Input will consist of four space-delimited integers on a single line through console standard input. This integers will range inclusively from 1 to 255. The first integer is N: the number of digits on the lock, starting from 0. A lock where N is 5 means the printed numbers on the dial are 0, 1, 2, 3, and 5, listed counter-clockwise. The next three numbers are the three digits for the opening code. They will always range inclusively between 0 and N-1.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print the total rotation increments you&amp;#39;ve had to rotate to open the lock with the given code. See example explanation for details.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;5 1 2 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;21\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&amp;#39;s how we got that number:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Spin lock 2 times clockwise: +10, at position 0&lt;/li&gt;\n&lt;li&gt;Spin lock to first number clockwise: +1, at position 1&lt;/li&gt;\n&lt;li&gt;Spin lock 1 time counter-clockwise: +5, at position 1&lt;/li&gt;\n&lt;li&gt;Spin lock to second number counter-clockwise: +4, at position 2&lt;/li&gt;\n&lt;li&gt;Spin lock to third number clockwise: +1, at position 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1v4cjd/011314_challenge_148_easy_combination_lock/",
        "title": "[01/13/14] Challenge #148 [Easy] Combination Lock",
        "difficulty": "Easy"
    },
    {
        "selfText": "\n\niso 8601 standard for dates tells us the proper way to do an extended day is yyyy-mm-dd\n\n* yyyy = year\n* mm = month\n* dd = day\n\nA company's database has become polluted with mixed date formats. They could be one of 6 different formats\n\n* yyyy-mm-dd\n* mm/dd/yy\n* mm#yy#dd\n* dd\\*mm\\*yyyy\n* (month word) dd, yy\n* (month word) dd, yyyy\n\n(month word) can be: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nNote if is yyyy it is a full 4 digit year. If it is yy then it is only the last 2 digits of the year. Years only go between 1950-2049.\n\n#Input:\n\nYou will be given 1000 dates to correct.\n\n#Output:\n\nYou must output the dates to the proper iso 8601 standard of yyyy-mm-dd\n\n#Challenge Input:\n\nhttps://gist.github.com/coderd00d/a88d4d2da014203898af\n\n#Posting Solutions:\n\nPlease do not post your 1000 dates converted. If you must use a gist or link to another site. Or just show a sampling \n\n#Challenge Idea:\n\nThanks to all the people pointing out the iso standard  for dates in last week's intermediate challenge. Not only did it inspire today's easy challenge but help give us a weekly topic. You all are awesome :)\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;iso 8601 standard for dates tells us the proper way to do an extended day is yyyy-mm-dd&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;yyyy = year&lt;/li&gt;\n&lt;li&gt;mm = month&lt;/li&gt;\n&lt;li&gt;dd = day&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A company&amp;#39;s database has become polluted with mixed date formats. They could be one of 6 different formats&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;yyyy-mm-dd&lt;/li&gt;\n&lt;li&gt;mm/dd/yy&lt;/li&gt;\n&lt;li&gt;mm#yy#dd&lt;/li&gt;\n&lt;li&gt;dd*mm*yyyy&lt;/li&gt;\n&lt;li&gt;(month word) dd, yy&lt;/li&gt;\n&lt;li&gt;(month word) dd, yyyy&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;(month word) can be: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec&lt;/p&gt;\n\n&lt;p&gt;Note if is yyyy it is a full 4 digit year. If it is yy then it is only the last 2 digits of the year. Years only go between 1950-2049.&lt;/p&gt;\n\n&lt;h1&gt;Input:&lt;/h1&gt;\n\n&lt;p&gt;You will be given 1000 dates to correct.&lt;/p&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;You must output the dates to the proper iso 8601 standard of yyyy-mm-dd&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input:&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/coderd00d/a88d4d2da014203898af\"&gt;https://gist.github.com/coderd00d/a88d4d2da014203898af&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Posting Solutions:&lt;/h1&gt;\n\n&lt;p&gt;Please do not post your 1000 dates converted. If you must use a gist or link to another site. Or just show a sampling &lt;/p&gt;\n\n&lt;h1&gt;Challenge Idea:&lt;/h1&gt;\n\n&lt;p&gt;Thanks to all the people pointing out the iso standard  for dates in last week&amp;#39;s intermediate challenge. Not only did it inspire today&amp;#39;s easy challenge but help give us a weekly topic. You all are awesome :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2lvgz6/20141110_challenge_188_easy_yyyymmdd/",
        "title": "[2014-11-10] Challenge #188 [Easy] yyyy-mm-dd",
        "difficulty": "Easy"
    }
]