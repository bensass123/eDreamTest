[
    {
        "selfText": "Hello Dailyprogrammers. \n\n\nThere has been some talk amongst moderators about our Challenge tags. These tags are the [Easy] [Intermediate] and [Hard]. As tradition holds we try to post challenges that fit these tags. The challenges progress from easy to hard across the week.\n\n\nAs many of you might have seen sometimes we might post a \"easy\" and it seems \"intermediate\" or we might do a \"hard\" that comes across \"easy\".\n\n\nThe idea is instead of trying to develop challenges based on difficulty which is very subjective and different from person to person and instead just post 3 challenges a week and let programmers decide for themselves.\n\n\nThoughts? Ideas? Should we continue the tradition of 2+ years of easy, intermediate, hard or try a different approach?\n\n**EDIT - Update 7-2-2013**\n\nSo going forward we will continue to tag the Challenges Easy/Intermediate/Hard. \n\n\nYou might see on Fridays an \"Easy\" or \"Intermediate\" one in place of \"Hard\". \"Hard\" Challenges can be tough to develop while there are many easy/intermediate ones to be done.\n\n\nThank you all for your feedback!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello Dailyprogrammers. &lt;/p&gt;\n\n&lt;p&gt;There has been some talk amongst moderators about our Challenge tags. These tags are the [Easy] [Intermediate] and [Hard]. As tradition holds we try to post challenges that fit these tags. The challenges progress from easy to hard across the week.&lt;/p&gt;\n\n&lt;p&gt;As many of you might have seen sometimes we might post a &amp;quot;easy&amp;quot; and it seems &amp;quot;intermediate&amp;quot; or we might do a &amp;quot;hard&amp;quot; that comes across &amp;quot;easy&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;The idea is instead of trying to develop challenges based on difficulty which is very subjective and different from person to person and instead just post 3 challenges a week and let programmers decide for themselves.&lt;/p&gt;\n\n&lt;p&gt;Thoughts? Ideas? Should we continue the tradition of 2+ years of easy, intermediate, hard or try a different approach?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT - Update 7-2-2013&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So going forward we will continue to tag the Challenges Easy/Intermediate/Hard. &lt;/p&gt;\n\n&lt;p&gt;You might see on Fridays an &amp;quot;Easy&amp;quot; or &amp;quot;Intermediate&amp;quot; one in place of &amp;quot;Hard&amp;quot;. &amp;quot;Hard&amp;quot; Challenges can be tough to develop while there are many easy/intermediate ones to be done.&lt;/p&gt;\n\n&lt;p&gt;Thank you all for your feedback!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/28kl7b/discussion_challenge_tags_easy_intermediate_hard/",
        "title": "[Discussion] Challenge tags [Easy] [Intermediate] [Hard]",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "A little while back we had a programming [challenge](https://www.reddit.com/r/dailyprogrammer/comments/2yquvm/20150311_challenge_205_intermediate_rpn/) to convert an infix expression (also known as \"normal\" math) to a postfix expression (also known as [Reverse Polish Notation](https://en.wikipedia.org/wiki/Reverse_Polish_notation)). Today we'll do something a little different: We will write a calculator that takes RPN input, and outputs the result.\n\n# Formal input\n\nThe input will be a whitespace-delimited RPN expression. The supported operators will be:\n\n* `+` - addition\n* `-` - subtraction\n* `*`, `x` - multiplication\n* `/` - division (floating point, e.g. `3/2=1.5`, not `3/2=1`)\n* `//` - integer division (e.g. `3/2=1`)\n* `%` - modulus, or \"remainder\" division (e.g. `14%3=2` and `21%7=0`)\n* `^` - power\n* `!` - factorial (unary operator)\n\n**Sample input:**\n\n    0.5 1 2 ! * 2 1 ^ + 10 + *\n\n# Formal output\n\nThe output is a single number: the result of the calculation. The output should also indicate if the input is not a valid RPN expression.\n\n**Sample output:**\n\n    7\n\nExplanation: the sample input translates to `0.5 * ((1 * 2!) + (2 ^ 1) + 10)`, which comes out to `7`.\n\n## Challenge 1\n\n**Input:** `1 2 3 4 ! + - /  100 *`\n\n**Output:** `-4`\n\n\n## Challenge 2\n**Input:** `100 807 3 331 * + 2 2 1 + 2 + * 5 ^ * 23 10 558 * 10 * + + *`\n\n# Finally...\n\nHope you enjoyed today's challenge! Have a fun problem or challenge of your own? Drop by /r/dailyprogrammer_ideas and share it with everyone!\n\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A little while back we had a programming &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/2yquvm/20150311_challenge_205_intermediate_rpn/\"&gt;challenge&lt;/a&gt; to convert an infix expression (also known as &amp;quot;normal&amp;quot; math) to a postfix expression (also known as &lt;a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\"&gt;Reverse Polish Notation&lt;/a&gt;). Today we&amp;#39;ll do something a little different: We will write a calculator that takes RPN input, and outputs the result.&lt;/p&gt;\n\n&lt;h1&gt;Formal input&lt;/h1&gt;\n\n&lt;p&gt;The input will be a whitespace-delimited RPN expression. The supported operators will be:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;+&lt;/code&gt; - addition&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;-&lt;/code&gt; - subtraction&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; - multiplication&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - division (floating point, e.g. &lt;code&gt;3/2=1.5&lt;/code&gt;, not &lt;code&gt;3/2=1&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;//&lt;/code&gt; - integer division (e.g. &lt;code&gt;3/2=1&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;%&lt;/code&gt; - modulus, or &amp;quot;remainder&amp;quot; division (e.g. &lt;code&gt;14%3=2&lt;/code&gt; and &lt;code&gt;21%7=0&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;^&lt;/code&gt; - power&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;!&lt;/code&gt; - factorial (unary operator)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Sample input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.5 1 2 ! * 2 1 ^ + 10 + *\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Formal output&lt;/h1&gt;\n\n&lt;p&gt;The output is a single number: the result of the calculation. The output should also indicate if the input is not a valid RPN expression.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Sample output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Explanation: the sample input translates to &lt;code&gt;0.5 * ((1 * 2!) + (2 ^ 1) + 10)&lt;/code&gt;, which comes out to &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Challenge 1&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code&gt;1 2 3 4 ! + - /  100 *&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;code&gt;-4&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Challenge 2&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code&gt;100 807 3 331 * + 2 2 1 + 2 + * 5 ^ * 23 10 558 * 10 * + + *&lt;/code&gt;&lt;/p&gt;\n\n&lt;h1&gt;Finally...&lt;/h1&gt;\n\n&lt;p&gt;Hope you enjoyed today&amp;#39;s challenge! Have a fun problem or challenge of your own? Drop by &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and share it with everyone!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/5c5jx9/20161109_challenge_291_intermediate_reverse/",
        "title": "[2016-11-09] Challenge #291 [Intermediate] Reverse Polish Notation Calculator",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "\n\nThe popular video games ***Fallout 3*** and ***Fallout: New Vegas*** has a [computer hacking mini game] (http://gamewiki.net/Fallout_3/Hacking_Guide).\n\n\nThis game requires the player to correctly guess a password from a list of same length words. Your challenge is to implement this game yourself.\n\n\nThe game works like the classic game of [Mastermind] (http://en.wikipedia.org/wiki/Mastermind_(board_game\\)) \nThe player has only 4 guesses and on each incorrect guess the computer will indicate how many letter positions are correct.\n\n\nFor example, if the password is MIND and the player guesses MEND, the game will indicate that 3 out of 4 positions are correct (M_ND). If the password is COMPUTE and the player guesses PLAYFUL, the game will report 0/7. While some of the letters match, they're in the wrong position.\n\n\nAsk the player for a difficulty (very easy, easy, average, hard, very hard), then present the player with 5 to 15 words of the same length. The length can be 4 to 15 letters. More words and letters make for a harder puzzle. The player then has 4 guesses, and on each incorrect guess indicate the number of correct positions.\n\n\nHere's an example game:\n\n\n    Difficulty (1-5)? 3\n    SCORPION\n    FLOGGING\n    CROPPERS\n    MIGRAINE\n    FOOTNOTE\n    REFINERY\n    VAULTING\n    VICARAGE\n    PROTRACT\n    DESCENTS\n    Guess (4 left)? migraine\n    0/8 correct\n    Guess (3 left)? protract\n    2/8 correct\n    Guess (2 left)? croppers\n    8/8 correct\n    You win!\n\nYou can draw words from our favorite dictionary file: [enable1.txt] (https://code.google.com/p/dotnetperls-controls/downloads/detail?name=enable1.txt) . Your program should completely ignore case when making the position checks.\n\n\n#Input/Output:\n\nUsing the above description, design the input/output as you desire. It should ask for a difficulty level and show a list of words and report back how many guess left and how many matches you had on your guess.\n\nThe logic and design of how many words you display and the length based on the difficulty is up to you to implement.\n\n#Easier Challenge:\n\n\nThe game will only give words of size 7 in the list of words.\n\n#Challenge Idea:\n\nCredit to /u/skeeto for the [challenge idea](http://www.reddit.com/r/dailyprogrammer_ideas/comments/23jps4/intermediate_fallout_hacking_game/) posted on /r/dailyprogrammer_ideas\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;The popular video games &lt;strong&gt;&lt;em&gt;Fallout 3&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Fallout: New Vegas&lt;/em&gt;&lt;/strong&gt; has a &lt;a href=\"http://gamewiki.net/Fallout_3/Hacking_Guide\"&gt;computer hacking mini game&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This game requires the player to correctly guess a password from a list of same length words. Your challenge is to implement this game yourself.&lt;/p&gt;\n\n&lt;p&gt;The game works like the classic game of &lt;a href=\"http://en.wikipedia.org/wiki/Mastermind_(board_game)\"&gt;Mastermind&lt;/a&gt; \nThe player has only 4 guesses and on each incorrect guess the computer will indicate how many letter positions are correct.&lt;/p&gt;\n\n&lt;p&gt;For example, if the password is MIND and the player guesses MEND, the game will indicate that 3 out of 4 positions are correct (M_ND). If the password is COMPUTE and the player guesses PLAYFUL, the game will report 0/7. While some of the letters match, they&amp;#39;re in the wrong position.&lt;/p&gt;\n\n&lt;p&gt;Ask the player for a difficulty (very easy, easy, average, hard, very hard), then present the player with 5 to 15 words of the same length. The length can be 4 to 15 letters. More words and letters make for a harder puzzle. The player then has 4 guesses, and on each incorrect guess indicate the number of correct positions.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s an example game:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Difficulty (1-5)? 3\nSCORPION\nFLOGGING\nCROPPERS\nMIGRAINE\nFOOTNOTE\nREFINERY\nVAULTING\nVICARAGE\nPROTRACT\nDESCENTS\nGuess (4 left)? migraine\n0/8 correct\nGuess (3 left)? protract\n2/8 correct\nGuess (2 left)? croppers\n8/8 correct\nYou win!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can draw words from our favorite dictionary file: &lt;a href=\"https://code.google.com/p/dotnetperls-controls/downloads/detail?name=enable1.txt\"&gt;enable1.txt&lt;/a&gt; . Your program should completely ignore case when making the position checks.&lt;/p&gt;\n\n&lt;h1&gt;Input/Output:&lt;/h1&gt;\n\n&lt;p&gt;Using the above description, design the input/output as you desire. It should ask for a difficulty level and show a list of words and report back how many guess left and how many matches you had on your guess.&lt;/p&gt;\n\n&lt;p&gt;The logic and design of how many words you display and the length based on the difficulty is up to you to implement.&lt;/p&gt;\n\n&lt;h1&gt;Easier Challenge:&lt;/h1&gt;\n\n&lt;p&gt;The game will only give words of size 7 in the list of words.&lt;/p&gt;\n\n&lt;h1&gt;Challenge Idea:&lt;/h1&gt;\n\n&lt;p&gt;Credit to &lt;a href=\"/u/skeeto\"&gt;/u/skeeto&lt;/a&gt; for the &lt;a href=\"http://www.reddit.com/r/dailyprogrammer_ideas/comments/23jps4/intermediate_fallout_hacking_game/\"&gt;challenge idea&lt;/a&gt; posted on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/263dp1/5212014_challenge_163_intermediate_fallouts/",
        "title": "[5/21/2014] Challenge #163 [Intermediate] Fallout's Hacking Game",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "For the intermediate challenge, you will have to generate a Minesweeper game.  Minesweeper boards have three attributes, length, width, and number of mines.  Given the input below, output a correct gameboard.\n\nMinesweeper games have two types of pieces, mines, and non-mines.  The non-mines have a number, which is the number of mines adjacent to it.  \n\nFor example: [Here's an image of a Minesweeper game.](http://upload.wikimedia.org/wikipedia/commons/7/7b/Minesweeper_end_Kmines.png)\n\nYour input is...\n\n* Height: 15\n* Width: 15\n* Mines: 20\n\nGood luck and have fun!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For the intermediate challenge, you will have to generate a Minesweeper game.  Minesweeper boards have three attributes, length, width, and number of mines.  Given the input below, output a correct gameboard.&lt;/p&gt;\n\n&lt;p&gt;Minesweeper games have two types of pieces, mines, and non-mines.  The non-mines have a number, which is the number of mines adjacent to it.  &lt;/p&gt;\n\n&lt;p&gt;For example: &lt;a href=\"http://upload.wikimedia.org/wikipedia/commons/7/7b/Minesweeper_end_Kmines.png\"&gt;Here&amp;#39;s an image of a Minesweeper game.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Your input is...&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Height: 15&lt;/li&gt;\n&lt;li&gt;Width: 15&lt;/li&gt;\n&lt;li&gt;Mines: 20&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Good luck and have fun!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/126905/10272012_challenge_108_intermediate_minesweeper/",
        "title": "[10/27/2012] Challenge #108 [Intermediate] (Minesweeper Generation)",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Adjacency Matrix\n\nIn [graph theory](http://en.wikipedia.org/wiki/Graph_theory), an [adjacency matrix](http://en.wikipedia.org/wiki/Adjacency_matrix) is a data structure that can represent the edges between nodes for a [graph](http://en.wikipedia.org/wiki/Graph_(mathematics\\)) in an N x N matrix. The basic idea is that an edge exists between the elements of a row and column if the entry at that point is set to a valid value. This data structure can also represent either a [directed graph](http://en.wikipedia.org/wiki/Directed_graph) or an [undirected graph](http://en.wikipedia.org/wiki/Graph_(mathematics\\)#Undirected_graph), since you can read the rows as being \"source\" nodes, and columns as being the \"destination\" (or vice-versa).\n\nYour goal is to write a program that takes in a list of edge-node relationships, and print a directed adjacency matrix for it. Our convention will follow that rows point to columns. Follow the examples for clarification of this convention.\n\n[Here's a great online directed graph editor](http://bl.ocks.org/rkirsling/5001347) written in Javascript to help you visualize the challenge. Feel free to post your own helpful links!\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nOn standard console input, you will be first given a line with two space-delimited integers N and M. N is the number of nodes / vertices in the graph, while M is the number of following lines of edge-node data. A line of edge-node data is a space-delimited set of integers, with the special \"-&gt;\" symbol indicating an edge. This symbol shows the edge-relationship between the set of left-sided integers and the right-sided integers. This symbol will only have one element to its left, or one element to its right. These lines of data will also never have duplicate information; you do not have to handle re-definitions of the same edges.\n\nAn example of data that maps the node 1 to the nodes 2 and 3 is as follows:\n\n    1 -&gt; 2 3\n\nAnother example where multiple nodes points to the same node:\n\n    3 8 -&gt; 2\n\nYou can expect input to sometimes create cycles and self-references in the graph. The following is valid:\n\n    2 -&gt; 2 3\n    3 -&gt; 2\n\nNote that there is no order in the given integers; thus \"1 -&gt; 2 3\" is the same as \"1 -&gt; 3 2\".\n\n## Output Description\n\nPrint the N x N adjacency matrix as a series of 0's (no-edge) and 1's (edge).\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n    5 5\n    0 -&gt; 1\n    1 -&gt; 2\n    2 -&gt; 4\n    3 -&gt; 4\n    0 -&gt; 3\n\n## Sample Output\n\n    01010\n    00100\n    00001\n    00001\n    00000",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Adjacency Matrix&lt;/h1&gt;\n\n&lt;p&gt;In &lt;a href=\"http://en.wikipedia.org/wiki/Graph_theory\"&gt;graph theory&lt;/a&gt;, an &lt;a href=\"http://en.wikipedia.org/wiki/Adjacency_matrix\"&gt;adjacency matrix&lt;/a&gt; is a data structure that can represent the edges between nodes for a &lt;a href=\"http://en.wikipedia.org/wiki/Graph_(mathematics)\"&gt;graph&lt;/a&gt; in an N x N matrix. The basic idea is that an edge exists between the elements of a row and column if the entry at that point is set to a valid value. This data structure can also represent either a &lt;a href=\"http://en.wikipedia.org/wiki/Directed_graph\"&gt;directed graph&lt;/a&gt; or an &lt;a href=\"http://en.wikipedia.org/wiki/Graph_(mathematics)#Undirected_graph\"&gt;undirected graph&lt;/a&gt;, since you can read the rows as being &amp;quot;source&amp;quot; nodes, and columns as being the &amp;quot;destination&amp;quot; (or vice-versa).&lt;/p&gt;\n\n&lt;p&gt;Your goal is to write a program that takes in a list of edge-node relationships, and print a directed adjacency matrix for it. Our convention will follow that rows point to columns. Follow the examples for clarification of this convention.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://bl.ocks.org/rkirsling/5001347\"&gt;Here&amp;#39;s a great online directed graph editor&lt;/a&gt; written in Javascript to help you visualize the challenge. Feel free to post your own helpful links!&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On standard console input, you will be first given a line with two space-delimited integers N and M. N is the number of nodes / vertices in the graph, while M is the number of following lines of edge-node data. A line of edge-node data is a space-delimited set of integers, with the special &amp;quot;-&amp;gt;&amp;quot; symbol indicating an edge. This symbol shows the edge-relationship between the set of left-sided integers and the right-sided integers. This symbol will only have one element to its left, or one element to its right. These lines of data will also never have duplicate information; you do not have to handle re-definitions of the same edges.&lt;/p&gt;\n\n&lt;p&gt;An example of data that maps the node 1 to the nodes 2 and 3 is as follows:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 -&amp;gt; 2 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another example where multiple nodes points to the same node:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;3 8 -&amp;gt; 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can expect input to sometimes create cycles and self-references in the graph. The following is valid:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;2 -&amp;gt; 2 3\n3 -&amp;gt; 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that there is no order in the given integers; thus &amp;quot;1 -&amp;gt; 2 3&amp;quot; is the same as &amp;quot;1 -&amp;gt; 3 2&amp;quot;.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print the N x N adjacency matrix as a series of 0&amp;#39;s (no-edge) and 1&amp;#39;s (edge).&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;5 5\n0 -&amp;gt; 1\n1 -&amp;gt; 2\n2 -&amp;gt; 4\n3 -&amp;gt; 4\n0 -&amp;gt; 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;01010\n00100\n00001\n00001\n00000\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1t6dlf/121813_challenge_140_intermediate_adjacency_matrix/",
        "title": "[12/18/13] Challenge #140 [Intermediate] Adjacency Matrix",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Diagonal Maze\n\nA maze can be represented using characters as follows:\n\n    +-+-+-+-+-+\n      |       |\n    + +-+-+ + +\n    | |     | |\n    + + + + + +\n    |   | |   |\n    +-+-+ +-+-+\n    |     |   |\n    + + +-+ + +\n    | |     |  \n    +-+-+-+-+-+\n\nHowever, the exact same maze can also be represented diagonally using slashes, like this:\n\n         \\\n       / /\\\n      / /\\ \\\n     /\\   \\ \\\n    /  \\/    \\\n    \\/   / / /\n     \\ \\/\\  /\n      \\   \\/\n       \\/ /\n        \\\n\nYour task today is to convert from the first format (cardinal) to the second (diagonal).\n\n# Formal Inputs and Outputs\n\n## Input Specification\n\nYou'll be given a number **N** on one line, followed by **N** further lines of input of a cardinal axis aligned maze, like so:\n\n    11\n    +-+-+-+-+-+\n      |       |\n    + +-+-+ + +\n    | |     | |\n    + + + + + +\n    |   | |   |\n    +-+-+ +-+-+\n    |     |   |\n    + + +-+ + +\n    | |     |  \n    +-+-+-+-+-+\n\nThe maze cells will *not* necessarily be one-by-one, so watch out!\n\n## Output Description\n\nOutput the diagonal-ified maze, like the one shown above (same as in description).\n\n# Sample Inputs and Outputs\n\n## Example 1\n\n    16\n\t+--+--+--+--+--+\n\t      |     |  |\n\t      |     |  |\n\t+  +--+  +  +  +\n\t|     |  |  |  |\n\t|     |  |  |  |\n\t+--+  +  +  +  +\n\t|     |  |     |\n\t|     |  |     |\n\t+  +--+  +  +--+\n\t|        |     |\n\t|        |     |\n\t+--+--+--+--+  +\n\t|               \n\t|               \n\t+--+--+--+--+--+\n\n### Output\n\n              \\\n               \\\n           /    \\\n          /      \\\n         /\\   \\  /\\\n        /  \\   \\/  \\\n       /       /    \\\n      /       /      \\\n     /\\   \\  /   /   /\\\n    /  \\   \\/   /   /  \\\n    \\   \\      /   /   /\n     \\   \\    /   /   /\n      \\   \\  /       /\n       \\   \\/       /\n        \\   \\   \\  /\n         \\   \\   \\/\n          \\      /\n           \\    /\n            \\   \n             \\\n            \n## Example 2\n\n### Input\n\t\n\t17\n\t+---+---+---+---+---+---+\n\t                        |\n\t                        |\n\t                        |\n\t+---+---+---+---+---+   +\n\t                        |\n\t                        |\n\t                        |\n\t+---+---+---+---+---+---+\n\t|                        \n\t|                        \n\t|                        \n\t+   +---+---+---+---+---+\n\t|                        \n\t|                        \n\t|                        \n\t+---+---+---+---+---+---+\n    \n### Output\n\n                \\       \n                 \\       \n                  \\      \n             \\     \\     \n              \\     \\    \n               \\     \\   \n         /\\     \\     \\  \n        /  \\     \\     \\ \n       /    \\     \\     \\\n      /      \\     \\     \\       \n     /        \\     \\     \\       \n    /          \\     \\     \\      \n    \\     \\     \\     \\     \\     \n     \\     \\     \\     \\     \\    \n      \\     \\     \\     \\     \\   \n       \\     \\     \\     \\     \\  \n        \\     \\     \\     \\     \\ \n         \\     \\     \\     \\     \\\n          \\     \\     \\          /\n           \\     \\     \\        /\n            \\     \\     \\      /\n             \\     \\     \\    /\n              \\     \\     \\  /\n               \\     \\     \\/\n                \\     \\     \n                 \\     \\   \n                  \\     \\ \n                   \\     \n                    \\   \n                     \\ \n\n# Finally\n\nGot any cool challenge ideas? Submit them to /r/DailyProgrammer_Ideas!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Diagonal Maze&lt;/h1&gt;\n\n&lt;p&gt;A maze can be represented using characters as follows:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+-+-+-+-+-+\n  |       |\n+ +-+-+ + +\n| |     | |\n+ + + + + +\n|   | |   |\n+-+-+ +-+-+\n|     |   |\n+ + +-+ + +\n| |     |  \n+-+-+-+-+-+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, the exact same maze can also be represented diagonally using slashes, like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;     \\\n   / /\\\n  / /\\ \\\n /\\   \\ \\\n/  \\/    \\\n\\/   / / /\n \\ \\/\\  /\n  \\   \\/\n   \\/ /\n    \\\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your task today is to convert from the first format (cardinal) to the second (diagonal).&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Specification&lt;/h2&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a number &lt;strong&gt;N&lt;/strong&gt; on one line, followed by &lt;strong&gt;N&lt;/strong&gt; further lines of input of a cardinal axis aligned maze, like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;11\n+-+-+-+-+-+\n  |       |\n+ +-+-+ + +\n| |     | |\n+ + + + + +\n|   | |   |\n+-+-+ +-+-+\n|     |   |\n+ + +-+ + +\n| |     |  \n+-+-+-+-+-+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The maze cells will &lt;em&gt;not&lt;/em&gt; necessarily be one-by-one, so watch out!&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Output the diagonal-ified maze, like the one shown above (same as in description).&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Example 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;16\n+--+--+--+--+--+\n      |     |  |\n      |     |  |\n+  +--+  +  +  +\n|     |  |  |  |\n|     |  |  |  |\n+--+  +  +  +  +\n|     |  |     |\n|     |  |     |\n+  +--+  +  +--+\n|        |     |\n|        |     |\n+--+--+--+--+  +\n|               \n|               \n+--+--+--+--+--+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;          \\\n           \\\n       /    \\\n      /      \\\n     /\\   \\  /\\\n    /  \\   \\/  \\\n   /       /    \\\n  /       /      \\\n /\\   \\  /   /   /\\\n/  \\   \\/   /   /  \\\n\\   \\      /   /   /\n \\   \\    /   /   /\n  \\   \\  /       /\n   \\   \\/       /\n    \\   \\   \\  /\n     \\   \\   \\/\n      \\      /\n       \\    /\n        \\   \n         \\\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example 2&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;17\n+---+---+---+---+---+---+\n                        |\n                        |\n                        |\n+---+---+---+---+---+   +\n                        |\n                        |\n                        |\n+---+---+---+---+---+---+\n|                        \n|                        \n|                        \n+   +---+---+---+---+---+\n|                        \n|                        \n|                        \n+---+---+---+---+---+---+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;            \\       \n             \\       \n              \\      \n         \\     \\     \n          \\     \\    \n           \\     \\   \n     /\\     \\     \\  \n    /  \\     \\     \\ \n   /    \\     \\     \\\n  /      \\     \\     \\       \n /        \\     \\     \\       \n/          \\     \\     \\      \n\\     \\     \\     \\     \\     \n \\     \\     \\     \\     \\    \n  \\     \\     \\     \\     \\   \n   \\     \\     \\     \\     \\  \n    \\     \\     \\     \\     \\ \n     \\     \\     \\     \\     \\\n      \\     \\     \\          /\n       \\     \\     \\        /\n        \\     \\     \\      /\n         \\     \\     \\    /\n          \\     \\     \\  /\n           \\     \\     \\/\n            \\     \\     \n             \\     \\   \n              \\     \\ \n               \\     \n                \\   \n                 \\ \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Got any cool challenge ideas? Submit them to &lt;a href=\"/r/DailyProgrammer_Ideas\"&gt;/r/DailyProgrammer_Ideas&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/3f9o7k/20150731_challenge_225_intermediate_diagonal_maze/",
        "title": "[2015-07-31] Challenge #225 [Intermediate] Diagonal Maze",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "  Rail Fence Cipher\n\nBefore the days of computerised encryption, cryptography was done manually by hand. This means the methods of encryption were usually much simpler as they had to be done reliably by a person, possibly in wartime scenarios.\n\nOne such method was the [rail-fence cipher](http://en.wikipedia.org/wiki/Rail_fence_cipher). This involved choosing a number (we'll choose 3) and writing our message as a zig-zag with that height (in this case, 3 lines high.) Let's say our message is `REDDITCOMRDAILYPROGRAMMER`. We would write our message like this:\n\n    R   I   M   I   R   A   R\n     E D T O R A L P O R M E\n      D   C   D   Y   G   M\n\nSee how it goes up and down? Now, to get the ciphertext, instead of reading with the zigzag, just read along the lines instead. The top line has `RIMIRAR`, the second line has `EDTORALPORME` and the last line has `DCDYGM`. Putting those together gives you `RIMIRAREDTORALPORMEDCDYGM`, which is the ciphertext.\n\nYou can also decrypt (it would be pretty useless if you couldn't!). This involves putting the zig-zag shape in beforehand and filling it in along the lines. So, start with the zig-zag shape:\n\n\n    ?   ?   ?   ?   ?   ?   ?\n     ? ? ? ? ? ? ? ? ? ? ? ?\n      ?   ?   ?   ?   ?   ?\n\nThe first line has 7 spaces, so take the first 7 characters (`RIMIRAR`) and fill them in.\n\n    R   I   M   I   R   A   R\n     ? ? ? ? ? ? ? ? ? ? ? ?\n      ?   ?   ?   ?   ?   ?\n\nThe next line has 12 spaces, so take 12 more characters (`EDTORALPORME`) and fill them in.\n\n    R   I   M   I   R   A   R\n     E D T O R A L P O R M E\n      ?   ?   ?   ?   ?   ?\n\nLastly the final line has 6 spaces so take the remaining 6 characters (`DCDYGM`) and fill them in.\n\n    R   I   M   I   R   A   R\n     E D T O R A L P O R M E\n      D   C   D   Y   G   M\n\nThen, read along the fence-line (zig-zag) and you're done!\n\n## Input Description\n\nYou will accept lines in the format:\n\n    enc # PLAINTEXT\n\nor \n\n    dec # CIPHERTEXT\n\nwhere `enc #` encodes `PLAINTEXT` with a rail-fence cipher using `#` lines, and `dec #` decodes `CIPHERTEXT` using `#` lines.\n\nFor example:\n\n    enc 3 REDDITCOMRDAILYPROGRAMMER\n\n## Output Description\n\nEncrypt or decrypt depending on the command given. So the example above gives:\n\n    RIMIRAREDTORALPORMEDCDYGM\n\n# Sample Inputs and Outputs\n\n    enc 2 LOLOLOLOLOLOLOLOLO\n    Result: LLLLLLLLLOOOOOOOOO\n\n    enc 4 THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG\n    Result: TCNMRZHIKWFUPETAYEUBOOJSVHLDGQRXOEO\n\n    dec 4 TCNMRZHIKWFUPETAYEUBOOJSVHLDGQRXOEO\n    Result: THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG\n\n    dec 7 3934546187438171450245968893099481332327954266552620198731963475632908289907\n    Result: 3141592653589793238462643383279502884197169399375105820974944592307816406286 (pi)\n\n    dec 6 AAPLGMESAPAMAITHTATLEAEDLOZBEN\n    Result: ?",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;strong&gt;(Intermediate)&lt;/strong&gt;: Rail Fence Cipher&lt;/h1&gt;\n\n&lt;p&gt;Before the days of computerised encryption, cryptography was done manually by hand. This means the methods of encryption were usually much simpler as they had to be done reliably by a person, possibly in wartime scenarios.&lt;/p&gt;\n\n&lt;p&gt;One such method was the &lt;a href=\"http://en.wikipedia.org/wiki/Rail_fence_cipher\"&gt;rail-fence cipher&lt;/a&gt;. This involved choosing a number (we&amp;#39;ll choose 3) and writing our message as a zig-zag with that height (in this case, 3 lines high.) Let&amp;#39;s say our message is &lt;code&gt;REDDITCOMRDAILYPROGRAMMER&lt;/code&gt;. We would write our message like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;R   I   M   I   R   A   R\n E D T O R A L P O R M E\n  D   C   D   Y   G   M\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See how it goes up and down? Now, to get the ciphertext, instead of reading with the zigzag, just read along the lines instead. The top line has &lt;code&gt;RIMIRAR&lt;/code&gt;, the second line has &lt;code&gt;EDTORALPORME&lt;/code&gt; and the last line has &lt;code&gt;DCDYGM&lt;/code&gt;. Putting those together gives you &lt;code&gt;RIMIRAREDTORALPORMEDCDYGM&lt;/code&gt;, which is the ciphertext.&lt;/p&gt;\n\n&lt;p&gt;You can also decrypt (it would be pretty useless if you couldn&amp;#39;t!). This involves putting the zig-zag shape in beforehand and filling it in along the lines. So, start with the zig-zag shape:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;?   ?   ?   ?   ?   ?   ?\n ? ? ? ? ? ? ? ? ? ? ? ?\n  ?   ?   ?   ?   ?   ?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first line has 7 spaces, so take the first 7 characters (&lt;code&gt;RIMIRAR&lt;/code&gt;) and fill them in.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;R   I   M   I   R   A   R\n ? ? ? ? ? ? ? ? ? ? ? ?\n  ?   ?   ?   ?   ?   ?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The next line has 12 spaces, so take 12 more characters (&lt;code&gt;EDTORALPORME&lt;/code&gt;) and fill them in.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;R   I   M   I   R   A   R\n E D T O R A L P O R M E\n  ?   ?   ?   ?   ?   ?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Lastly the final line has 6 spaces so take the remaining 6 characters (&lt;code&gt;DCDYGM&lt;/code&gt;) and fill them in.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;R   I   M   I   R   A   R\n E D T O R A L P O R M E\n  D   C   D   Y   G   M\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, read along the fence-line (zig-zag) and you&amp;#39;re done!&lt;/p&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will accept lines in the format:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;enc # PLAINTEXT\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;dec # CIPHERTEXT\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;code&gt;enc #&lt;/code&gt; encodes &lt;code&gt;PLAINTEXT&lt;/code&gt; with a rail-fence cipher using &lt;code&gt;#&lt;/code&gt; lines, and &lt;code&gt;dec #&lt;/code&gt; decodes &lt;code&gt;CIPHERTEXT&lt;/code&gt; using &lt;code&gt;#&lt;/code&gt; lines.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;enc 3 REDDITCOMRDAILYPROGRAMMER\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Encrypt or decrypt depending on the command given. So the example above gives:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;RIMIRAREDTORALPORMEDCDYGM\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Inputs and Outputs&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;enc 2 LOLOLOLOLOLOLOLOLO\nResult: LLLLLLLLLOOOOOOOOO\n\nenc 4 THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG\nResult: TCNMRZHIKWFUPETAYEUBOOJSVHLDGQRXOEO\n\ndec 4 TCNMRZHIKWFUPETAYEUBOOJSVHLDGQRXOEO\nResult: THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG\n\ndec 7 3934546187438171450245968893099481332327954266552620198731963475632908289907\nResult: 3141592653589793238462643383279502884197169399375105820974944592307816406286 (pi)\n\ndec 6 AAPLGMESAPAMAITHTATLEAEDLOZBEN\nResult: ?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2rnwzf/20150107_challenge_196_intermediate_rail_fence/",
        "title": "[2015-01-07] Challenge #196 [Intermediate] Rail Fence Cipher",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Overlapping Circles\n\nComputing the volume of a circle is pretty straight-forward: Pi x Radius x Radius, or simply Pi x r ^2.\n\nWhat if we wanted to computer the volume of two circles? Easy, just sum it! Yet, what about two intersecting circles, much like the classic [Venn diagram](http://en.wikipedia.org/wiki/File:Venn0111.svg)?\n\nYour goal is to write a program that takes two unit-circles (radius of one) at given locations, and compute that shape's volume. You must make sure to *not* double-count the intersecting volume! (i.e. you must not sum this [red area](http://en.wikipedia.org/wiki/File:Venn0001.svg) twice).\n\nAs a starting point, check out how to compute [circle segments](http://en.wikipedia.org/wiki/Circular_segment).\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nOn standard input you will be given four floating-point space-delimited values: x y u w. x and y are the first circle's position in [Cartesian coordinates](http://en.wikipedia.org/wiki/Cartesian_coordinate_system). The second pair u and w are the second circle's position.\n\nNote that the given circles may not actually intersect. If this is the case, return the sum of both circles (which will always be Pi x 2 since our circles are unit-circles).\n\n## Output Description\n\nPrint the summed volume of the two circles, up to an accuracy of 4 digits after the decimal place.\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n    -0.5 0 0.5 0\n\n## Sample Output\n\n    5.0548\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Overlapping Circles&lt;/h1&gt;\n\n&lt;p&gt;Computing the volume of a circle is pretty straight-forward: Pi x Radius x Radius, or simply Pi x r &lt;sup&gt;2.&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;What if we wanted to computer the volume of two circles? Easy, just sum it! Yet, what about two intersecting circles, much like the classic &lt;a href=\"http://en.wikipedia.org/wiki/File:Venn0111.svg\"&gt;Venn diagram&lt;/a&gt;?&lt;/p&gt;\n\n&lt;p&gt;Your goal is to write a program that takes two unit-circles (radius of one) at given locations, and compute that shape&amp;#39;s volume. You must make sure to &lt;em&gt;not&lt;/em&gt; double-count the intersecting volume! (i.e. you must not sum this &lt;a href=\"http://en.wikipedia.org/wiki/File:Venn0001.svg\"&gt;red area&lt;/a&gt; twice).&lt;/p&gt;\n\n&lt;p&gt;As a starting point, check out how to compute &lt;a href=\"http://en.wikipedia.org/wiki/Circular_segment\"&gt;circle segments&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On standard input you will be given four floating-point space-delimited values: x y u w. x and y are the first circle&amp;#39;s position in &lt;a href=\"http://en.wikipedia.org/wiki/Cartesian_coordinate_system\"&gt;Cartesian coordinates&lt;/a&gt;. The second pair u and w are the second circle&amp;#39;s position.&lt;/p&gt;\n\n&lt;p&gt;Note that the given circles may not actually intersect. If this is the case, return the sum of both circles (which will always be Pi x 2 since our circles are unit-circles).&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print the summed volume of the two circles, up to an accuracy of 4 digits after the decimal place.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;-0.5 0 0.5 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;5.0548\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1s6484/120513_challenge_138_intermediate_overlapping/",
        "title": "[12/05/13] Challenge #138 [Intermediate] Overlapping Circles",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Telephone Keypads\n\n[Telephone Keypads](http://en.wikipedia.org/wiki/Telephone_keypad) commonly have both digits and characters on them. This is to help with remembering &amp; typing phone numbers (called a [Phoneword](http://en.wikipedia.org/wiki/Phoneword)), like 1-800-PROGRAM rather than 1-800-776-4726. This keypad layout is also helpful with [T9](http://en.wikipedia.org/wiki/T9_(predictive_text\\)), a way to type texts with word prediction.\n\nYour goal is to mimic some of the T9-features: given a series of digits from a telephone keypad, and a list of English words, print the word or set of words that fits the starting pattern. You will be given the number of button-presses and digit, narrowing down the search-space.\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nOn standard console input, you will be given an array of digits (0 to 9) and spaces. All digits will be space-delimited, unless the digits represent multiple presses of the same button (for example pressing 2 twice gives you the letter 'B').\n\nUse the modern [Telephone Keypads](http://en.wikipedia.org/wiki/Telephone_keypad) digit-letter layout:\n\n    0 = Not used\n    1 = Not used\n    2 = ABC\n    3 = DEF\n    4 = GHI\n    5 = JKL\n    6 = MNO\n    7 = PQRS\n    8 = TUV\n    9 = WXYZ\n\nYou may use any source for looking up English-language words, though this [simple English-language dictionary](http://www.curlewcommunications.co.uk/wordlist.html) is complete enough for the challenge.\n\n## Output Description\n\nPrint a list of all best-fitting words, meaning words that start with the word generated using the given input on a telephone keypad. You do not have to only print words of the same length as the input (e.g. even if the input is 4-digits, it's possible there are many long words that start with those 4-digits).\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n    7777 666 555 3\n\n## Sample Output\n\n    sold\n    solder\n    soldered\n    soldering\n    solders\n    soldier\n    soldiered\n    soldiering\n    soldierly\n    soldiers\n    soldiery\n\n## Challenge++\n\nIf you want an extra challenge, accomplish the same challenge but without knowing the number of times a digit is pressed. For example \"7653\" could mean sold, or poke, or even solenoid! You must do this efficiently with regards to [Big-O complexity](http://en.wikipedia.org/wiki/Big_O_notation).\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Telephone Keypads&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Telephone_keypad\"&gt;Telephone Keypads&lt;/a&gt; commonly have both digits and characters on them. This is to help with remembering &amp;amp; typing phone numbers (called a &lt;a href=\"http://en.wikipedia.org/wiki/Phoneword\"&gt;Phoneword&lt;/a&gt;), like 1-800-PROGRAM rather than 1-800-776-4726. This keypad layout is also helpful with &lt;a href=\"http://en.wikipedia.org/wiki/T9_(predictive_text)\"&gt;T9&lt;/a&gt;, a way to type texts with word prediction.&lt;/p&gt;\n\n&lt;p&gt;Your goal is to mimic some of the T9-features: given a series of digits from a telephone keypad, and a list of English words, print the word or set of words that fits the starting pattern. You will be given the number of button-presses and digit, narrowing down the search-space.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On standard console input, you will be given an array of digits (0 to 9) and spaces. All digits will be space-delimited, unless the digits represent multiple presses of the same button (for example pressing 2 twice gives you the letter &amp;#39;B&amp;#39;).&lt;/p&gt;\n\n&lt;p&gt;Use the modern &lt;a href=\"http://en.wikipedia.org/wiki/Telephone_keypad\"&gt;Telephone Keypads&lt;/a&gt; digit-letter layout:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0 = Not used\n1 = Not used\n2 = ABC\n3 = DEF\n4 = GHI\n5 = JKL\n6 = MNO\n7 = PQRS\n8 = TUV\n9 = WXYZ\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may use any source for looking up English-language words, though this &lt;a href=\"http://www.curlewcommunications.co.uk/wordlist.html\"&gt;simple English-language dictionary&lt;/a&gt; is complete enough for the challenge.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print a list of all best-fitting words, meaning words that start with the word generated using the given input on a telephone keypad. You do not have to only print words of the same length as the input (e.g. even if the input is 4-digits, it&amp;#39;s possible there are many long words that start with those 4-digits).&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;7777 666 555 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;sold\nsolder\nsoldered\nsoldering\nsolders\nsoldier\nsoldiered\nsoldiering\nsoldierly\nsoldiers\nsoldiery\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Challenge++&lt;/h2&gt;\n\n&lt;p&gt;If you want an extra challenge, accomplish the same challenge but without knowing the number of times a digit is pressed. For example &amp;quot;7653&amp;quot; could mean sold, or poke, or even solenoid! You must do this efficiently with regards to &lt;a href=\"http://en.wikipedia.org/wiki/Big_O_notation\"&gt;Big-O complexity&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1sody4/12113_challenge_139_intermediate_telephone_keypads/",
        "title": "[12/1/13] Challenge #139 [Intermediate] Telephone Keypads",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Sort r/DailyProgrammer!\nSome users of r/DailyProgrammer want a list of URLs ordered from our very first challenge to the easiest challenge. Your goal is to crawl r/DailyProgrammer, automatically generate two types of these lists, and that's it!\n\n*Author: nint22*\n# Formal Inputs &amp; Outputs\n## Input Description\nNo formal input is required\n## Output Description\nYou must print out two lists: one sorted by number, then category, and the other list sorted by category, then number. For each list, there should be N lines where N is the number of total challenges published. For each line, the challenge difficulty, ID, title, and URL must be placed in the following format:\n\n[Easy / Medium / Hard] #&lt;ID&gt;: \"&lt;Title&gt;\" &lt;URL&gt;\n\nTo clarify on the two lists required, the first must be like the following:\n\n    ...\n    [Easy] #101: \"Some Title\" http://www.reddit.com/...\n    [Intermediate] #101: \"Some Title\" http://www.reddit.com/...\n    [Hard] #101: \"Some Title\" http://www.reddit.com/...\n    ...\n\nList two:\n\n    ...\n    [Easy] #101: \"Some Title\" http://www.reddit.com/...\n    [Easy] #102: \"Some Title\" http://www.reddit.com/...\n    [Easy] #103: \"Some Title\" http://www.reddit.com/...\n    ...\n\n# Sample Inputs &amp; Outputs\n## Sample Input\nNone needed\n## Sample Output\nNone needed\n# Challenge Input\nNone needed\n## Challenge Input Solution\nNone needed\n# Note\nGoogle around for the Reddit API documentation and related crawler libraries. It might save you quite a bit of low-level parsing!\n\t\t\t\t",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Sort &lt;a href=\"/r/DailyProgrammer\"&gt;r/DailyProgrammer&lt;/a&gt;!&lt;/h1&gt;\n\n&lt;p&gt;Some users of &lt;a href=\"/r/DailyProgrammer\"&gt;r/DailyProgrammer&lt;/a&gt; want a list of URLs ordered from our very first challenge to the easiest challenge. Your goal is to crawl &lt;a href=\"/r/DailyProgrammer\"&gt;r/DailyProgrammer&lt;/a&gt;, automatically generate two types of these lists, and that&amp;#39;s it!&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: nint22&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;No formal input is required&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You must print out two lists: one sorted by number, then category, and the other list sorted by category, then number. For each list, there should be N lines where N is the number of total challenges published. For each line, the challenge difficulty, ID, title, and URL must be placed in the following format:&lt;/p&gt;\n\n&lt;p&gt;[Easy / Medium / Hard] #&amp;lt;ID&amp;gt;: &amp;quot;&amp;lt;Title&amp;gt;&amp;quot; &amp;lt;URL&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;To clarify on the two lists required, the first must be like the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;...\n[Easy] #101: &amp;quot;Some Title&amp;quot; http://www.reddit.com/...\n[Intermediate] #101: &amp;quot;Some Title&amp;quot; http://www.reddit.com/...\n[Hard] #101: &amp;quot;Some Title&amp;quot; http://www.reddit.com/...\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;List two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;...\n[Easy] #101: &amp;quot;Some Title&amp;quot; http://www.reddit.com/...\n[Easy] #102: &amp;quot;Some Title&amp;quot; http://www.reddit.com/...\n[Easy] #103: &amp;quot;Some Title&amp;quot; http://www.reddit.com/...\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;None needed&lt;/p&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;p&gt;None needed&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;None needed&lt;/p&gt;\n\n&lt;h2&gt;Challenge Input Solution&lt;/h2&gt;\n\n&lt;p&gt;None needed&lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;Google around for the Reddit API documentation and related crawler libraries. It might save you quite a bit of low-level parsing!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/169hkl/010913_challenge_117_intermediate_sort/",
        "title": "[01/09/13] Challenge #117 [Intermediate] Sort r/DailyProgrammer!",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Advanced Langton's Ant\n\nIf you've done any work or research onto cellular automata, you may have heard of [Langton's Ant](http://en.wikipedia.org/wiki/Langton%27s_ant). It starts with a grid similar to that of [Conway's Game of Life](http://www.reddit.com/r/dailyprogrammer/comments/271xyp/) where a grid cell can be black or white, however this time we have an 'ant' on it. This little metaphorical ant will follow these four rules at every 'step':\n\n* If the current square is white, turn the ant 90' clockwise\n* If the current square is black, turn the ant 90' anticlockwise\n* Flip the colour of the current square\n* Move forward (from the ant's perspective) one cell\n\nWith the following starting conditions:\n\n* All cells start white\n* The ant starts pointing north\n\nHowever, being /r/DailyProgrammer, we don't do things the easy way. Why only have 2 colours, black or white? Why not as many colours as you want, where you choose whether ant turns left or right at each colour? Today's challenge is to create an emulator for such a modifiable ant.\n\nIf you have more than 2 colours, of course, there is no way to just 'flip' the colour. Whenever the ant lands on a square, it is to change the colour of the current square to the next possible colour, going back to the first one at the end - eg. red, green, blue, red, green, blue, etc. In these cases, at the start of the simulation, all of the cells will start with the first colour/character.\n    \n## Input Description\n\nYou will be given one line of text consisting of the characters 'L' and 'R', such as:\n\n    LRLRR\n\nThis means that there are 5 possible colours (or characters, if you're drawing the grid ASCII style - choose the colours or characters yourself!) for this ant.\n\nIn this case, I could choose 5 colours to correspond to the LRLRR:\n\n* White, turn left (anticlockwise)\n\n* Black, turn right (clockwise)\n\n* Red, turn left (anticlockwise)\n\n* Green, turn right (clockwise)\n\n* Blue, turn right (clockwise)\n\nYou could also choose characters, eg. `' '`, `'#'`, `'%'`, `'*'`, `'@'` instead of colours if you're ASCII-ing the grid. You will then be given another line of text with a number **N** on it - this is the number of 'steps' to simulate.\n\n## Output Description\n\nYou have some flexibility here. The bare minimum would be to output the current grid ASCII style. You could also draw the grid to an image file, in which case you would have to choose colours rather than ASCII characters. I know there are some people who do these sorts of challenges with C/C++ curses or even more complex systems.\n\n# Notes\n\n[More info on Langton's Ant with multiple colours.](http://en.wikipedia.org/wiki/Langton%27s_ant#Extension_to_multiple_colors)",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Advanced Langton&amp;#39;s Ant&lt;/h1&gt;\n\n&lt;p&gt;If you&amp;#39;ve done any work or research onto cellular automata, you may have heard of &lt;a href=\"http://en.wikipedia.org/wiki/Langton%27s_ant\"&gt;Langton&amp;#39;s Ant&lt;/a&gt;. It starts with a grid similar to that of &lt;a href=\"http://www.reddit.com/r/dailyprogrammer/comments/271xyp/\"&gt;Conway&amp;#39;s Game of Life&lt;/a&gt; where a grid cell can be black or white, however this time we have an &amp;#39;ant&amp;#39; on it. This little metaphorical ant will follow these four rules at every &amp;#39;step&amp;#39;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If the current square is white, turn the ant 90&amp;#39; clockwise&lt;/li&gt;\n&lt;li&gt;If the current square is black, turn the ant 90&amp;#39; anticlockwise&lt;/li&gt;\n&lt;li&gt;Flip the colour of the current square&lt;/li&gt;\n&lt;li&gt;Move forward (from the ant&amp;#39;s perspective) one cell&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;With the following starting conditions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All cells start white&lt;/li&gt;\n&lt;li&gt;The ant starts pointing north&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;However, being &lt;a href=\"/r/DailyProgrammer\"&gt;/r/DailyProgrammer&lt;/a&gt;, we don&amp;#39;t do things the easy way. Why only have 2 colours, black or white? Why not as many colours as you want, where you choose whether ant turns left or right at each colour? Today&amp;#39;s challenge is to create an emulator for such a modifiable ant.&lt;/p&gt;\n\n&lt;p&gt;If you have more than 2 colours, of course, there is no way to just &amp;#39;flip&amp;#39; the colour. Whenever the ant lands on a square, it is to change the colour of the current square to the next possible colour, going back to the first one at the end - eg. red, green, blue, red, green, blue, etc. In these cases, at the start of the simulation, all of the cells will start with the first colour/character.&lt;/p&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will be given one line of text consisting of the characters &amp;#39;L&amp;#39; and &amp;#39;R&amp;#39;, such as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;LRLRR\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This means that there are 5 possible colours (or characters, if you&amp;#39;re drawing the grid ASCII style - choose the colours or characters yourself!) for this ant.&lt;/p&gt;\n\n&lt;p&gt;In this case, I could choose 5 colours to correspond to the LRLRR:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;White, turn left (anticlockwise)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Black, turn right (clockwise)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Red, turn left (anticlockwise)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Green, turn right (clockwise)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Blue, turn right (clockwise)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You could also choose characters, eg. &lt;code&gt;&amp;#39; &amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;#&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;%&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;@&amp;#39;&lt;/code&gt; instead of colours if you&amp;#39;re ASCII-ing the grid. You will then be given another line of text with a number &lt;strong&gt;N&lt;/strong&gt; on it - this is the number of &amp;#39;steps&amp;#39; to simulate.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You have some flexibility here. The bare minimum would be to output the current grid ASCII style. You could also draw the grid to an image file, in which case you would have to choose colours rather than ASCII characters. I know there are some people who do these sorts of challenges with C/C++ curses or even more complex systems.&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Langton%27s_ant#Extension_to_multiple_colors\"&gt;More info on Langton&amp;#39;s Ant with multiple colours.&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2c4ka3/7302014_challenge_173_intermediate_advanced/",
        "title": "[7/30/2014] Challenge #173 [Intermediate] Advanced Langton's Ant",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Sum-Parings\n\nLet the term \"sum-pair\" be a pair of integers A and B such that the sum of A and B equals a given number C. As an example, let C be 10. Thus, the pairs (5, 5), (1, 9), (2, 8), etc. are all sum-pairs of 10.\n\nYour goal is to write a program that, given an array through standard input (console), you echo out all sum-pairs of a given integer C.\n\n# Formal Inputs &amp; Outputs\n\n## Input Description:\n\nOn the console, you will be first given an integer N. This is the number of following integers that are part of the array. After the N integers, you will be given an integer C which represents the sum-pair you are attempting to match.\n\n## Output Description\n\nYour program must print all unique pair of integers in the given list, where the sum of the pair is equal to integer C.\n\n# Sample Inputs &amp; Outputs\n\n## Input (Through Console)\n\n    4\n    1 -3 4 10aw\n    5\n\n## Output (Through Console)\n\n    1, 4\n\nNote that there is only one pair printed to the console since there is only one unique pair (1, 4) that has the sum of C (5).\n\n# Challenge Input\n\n*We will show the solution of this problem data-set in 7-days after the original submission.*\n\n    14\n    10 -8 2 1 4 -9 6 1 9 -10 -5 2 3 7\n    7\n\n# Note\n\n(*Awesome points awarded to /u/drigz for getting some important information into my thick-skull: there are linear-time solutions!*)\n\nThis is a common interviewing problem for programming jobs, so treat it as such! There is a very trivial solution, but the trivial solution will run in [O(N^2 )](http://en.wikipedia.org/wiki/Big_O_notation) time. There are a few other known solutions: one that runs in O(N Log(N)) time (hint: takes advantage of sorting), and another in linear time (hint: dictionary).",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Sum-Parings&lt;/h1&gt;\n\n&lt;p&gt;Let the term &amp;quot;sum-pair&amp;quot; be a pair of integers A and B such that the sum of A and B equals a given number C. As an example, let C be 10. Thus, the pairs (5, 5), (1, 9), (2, 8), etc. are all sum-pairs of 10.&lt;/p&gt;\n\n&lt;p&gt;Your goal is to write a program that, given an array through standard input (console), you echo out all sum-pairs of a given integer C.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description:&lt;/h2&gt;\n\n&lt;p&gt;On the console, you will be first given an integer N. This is the number of following integers that are part of the array. After the N integers, you will be given an integer C which represents the sum-pair you are attempting to match.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Your program must print all unique pair of integers in the given list, where the sum of the pair is equal to integer C.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input (Through Console)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;4\n1 -3 4 10aw\n5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output (Through Console)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;1, 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that there is only one pair printed to the console since there is only one unique pair (1, 4) that has the sum of C (5).&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;We will show the solution of this problem data-set in 7-days after the original submission.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;14\n10 -8 2 1 4 -9 6 1 9 -10 -5 2 3 7\n7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;(&lt;em&gt;Awesome points awarded to &lt;a href=\"/u/drigz\"&gt;/u/drigz&lt;/a&gt; for getting some important information into my thick-skull: there are linear-time solutions!&lt;/em&gt;)&lt;/p&gt;\n\n&lt;p&gt;This is a common interviewing problem for programming jobs, so treat it as such! There is a very trivial solution, but the trivial solution will run in &lt;a href=\"http://en.wikipedia.org/wiki/Big_O_notation\"&gt;O(N&lt;sup&gt;2&lt;/sup&gt; )&lt;/a&gt; time. There are a few other known solutions: one that runs in O(N Log(N)) time (hint: takes advantage of sorting), and another in linear time (hint: dictionary).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/15wm48/132013_challenge_115_intermediate_sumpairings/",
        "title": "[1/3/2013] Challenge #115 [Intermediate] Sum-Pairings",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "\n Find the shortest path\nGiven an ASCII grid through standard console input, you must find the shortest path from the start to the exit (without walking through any walls). You may only move up, down, left, and right; never diagonally.\n\n*Author: liloboy*\n# Formal Inputs &amp; Outputs\n## Input Description\nThe first line of input is an integer, which specifies the size of the grid in both dimensions. For example, a 5 would indicate a 5 x 5 grid. The grid then follows on the next line. A grid is simply a series of ASCII characters, in the given size. You start at the 'S' character (for Start) and have to walk to the 'E' character (for Exit), without walking through any walls (indicated by the 'W' character). Dots / periods indicate open, walk-able space.\n## Output Description\nThe output should simply print \"False\" if the end could not possibly be reached or \"True\", followed by an integer. This integer indicates the shortest path to the exit.\n# Sample Inputs &amp; Outputs\n## Sample Input\n    5\n    S....\n    WWWW.\n    .....\n    .WWWW\n    ....E\n\nCheck out this link for many more examples! http://pastebin.com/QFmPzgaU\n## Sample Output\n    True, 16\n# Challenge Input\n    8\n    S...W...\n    .WW.W.W.\n    .W..W.W.\n    ......W.\n    WWWWWWW.\n    E...W...\n    WW..WWW.\n    ........\n## Challenge Input Solution\nTrue, 29\n# Note\nAs a bonus, list all possible shortest paths, if there are multiple same-length paths.\n\t\t\t\t",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Find the shortest path&lt;/h1&gt;\n\n&lt;p&gt;Given an ASCII grid through standard console input, you must find the shortest path from the start to the exit (without walking through any walls). You may only move up, down, left, and right; never diagonally.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: liloboy&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;The first line of input is an integer, which specifies the size of the grid in both dimensions. For example, a 5 would indicate a 5 x 5 grid. The grid then follows on the next line. A grid is simply a series of ASCII characters, in the given size. You start at the &amp;#39;S&amp;#39; character (for Start) and have to walk to the &amp;#39;E&amp;#39; character (for Exit), without walking through any walls (indicated by the &amp;#39;W&amp;#39; character). Dots / periods indicate open, walk-able space.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;The output should simply print &amp;quot;False&amp;quot; if the end could not possibly be reached or &amp;quot;True&amp;quot;, followed by an integer. This integer indicates the shortest path to the exit.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;5\nS....\nWWWW.\n.....\n.WWWW\n....E\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Check out this link for many more examples! &lt;a href=\"http://pastebin.com/QFmPzgaU\"&gt;http://pastebin.com/QFmPzgaU&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;True, 16\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;8\nS...W...\n.WW.W.W.\n.W..W.W.\n......W.\nWWWWWWW.\nE...W...\nWW..WWW.\n........\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Challenge Input Solution&lt;/h2&gt;\n\n&lt;p&gt;True, 29&lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;As a bonus, list all possible shortest paths, if there are multiple same-length paths.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/17jvoh/013013_challenge_119_intermediate_find_the/",
        "title": "[01/30/13] Challenge #119 [Intermediate] Find the shortest path",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "\n\nImagine that I've written a program to solve a modified version of [Fizz Buzz](https://www.reddit.com/r/dailyprogrammer/comments/s6bas/4122012_challenge_39_easy/). My program takes as input some positive integers, like this:\n\n    2 5 4\n\nThese input numbers correspond to letters, in this case `a`, `b`, and `c`. Now, my program loops through all integers starting at 1, printing out one line at a time, each line containing one or more letters in alphabetical order. If the current number is divisible by 2, the line will contain `a`. If it's divisible by 5, it'll contain `b`. If it's divisible by 4, it'll contain `c`.\n\nSo for instance, when the loop reaches 2, my program will output `a`. When the loop reaches 8 it'll output `ac`. At 30 it'll output `ab`. At 7 no line will be output, not even a blank line. Thus the output will begin like this:\n\n    a\n    ac\n    b\n    a\n    ac\n    ab\n    ac\n    a\n    b\n    ac\n    a\n    abc\n    a\n\nYour challenge is to reverse my program. Write a program that takes the beginning of the output from my program, and determines what input my program was given to produce it. There will be more than one possible answer, so find the solution with the smallest possible numbers.\n\n# Examples\n\nSince this is Intermediate, it's okay to use brute force. As long as you can solve these examples in less than a minute, that's fine. But definitely test your program on the examples! (And don't worry about input or output format too much. Just do whatever's easiest for you to get the solutions.)\n\n## Example Input 1\n\n\ta\n\tb\n\ta\n\ta\n\tb\n\ta\n\n## Example Output 1\n\n\t3 5\n\n## Example Input 2\n\n\tb\n\tbe\n\tab\n\tbe\n\tb\n\tabe\n\tb\n\n## Example Output 2\n\n\t3 1 8 8 2\n\n(Note that in this case, you can infer that there must be at least 5 numbers in the solution, because of the presence of the letter `e`, even though `c` and `d` don't appear. The numbers corresponding to `c` and `d` must be high enough for them not to have appeared yet.)\n\n## Example Input 3\n\n\ta\n\tb\n\tc\n\td\n\ta\n\tab\n\n## Example Output 3\n\n\t6 9 10 11\n\n# Optional challenge input\n\n[Get the challenge input here.](https://gist.github.com/cosmologicon/3ff90d20efaa21887d32) You probably won't be able to brute force this one. How fast can you make your program run on this input?\n\n_Thanks to u/Blackshell for suggesting this challenge in r/dailyprogrammer_ideas!_",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Imagine that I&amp;#39;ve written a program to solve a modified version of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/s6bas/4122012_challenge_39_easy/\"&gt;Fizz Buzz&lt;/a&gt;. My program takes as input some positive integers, like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;2 5 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These input numbers correspond to letters, in this case &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;. Now, my program loops through all integers starting at 1, printing out one line at a time, each line containing one or more letters in alphabetical order. If the current number is divisible by 2, the line will contain &lt;code&gt;a&lt;/code&gt;. If it&amp;#39;s divisible by 5, it&amp;#39;ll contain &lt;code&gt;b&lt;/code&gt;. If it&amp;#39;s divisible by 4, it&amp;#39;ll contain &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So for instance, when the loop reaches 2, my program will output &lt;code&gt;a&lt;/code&gt;. When the loop reaches 8 it&amp;#39;ll output &lt;code&gt;ac&lt;/code&gt;. At 30 it&amp;#39;ll output &lt;code&gt;ab&lt;/code&gt;. At 7 no line will be output, not even a blank line. Thus the output will begin like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a\nac\nb\na\nac\nab\nac\na\nb\nac\na\nabc\na\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your challenge is to reverse my program. Write a program that takes the beginning of the output from my program, and determines what input my program was given to produce it. There will be more than one possible answer, so find the solution with the smallest possible numbers.&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;p&gt;Since this is Intermediate, it&amp;#39;s okay to use brute force. As long as you can solve these examples in less than a minute, that&amp;#39;s fine. But definitely test your program on the examples! (And don&amp;#39;t worry about input or output format too much. Just do whatever&amp;#39;s easiest for you to get the solutions.)&lt;/p&gt;\n\n&lt;h2&gt;Example Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;a\nb\na\na\nb\na\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;3 5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;b\nbe\nab\nbe\nb\nabe\nb\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;3 1 8 8 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Note that in this case, you can infer that there must be at least 5 numbers in the solution, because of the presence of the letter &lt;code&gt;e&lt;/code&gt;, even though &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; don&amp;#39;t appear. The numbers corresponding to &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; must be high enough for them not to have appeared yet.)&lt;/p&gt;\n\n&lt;h2&gt;Example Input 3&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;a\nb\nc\nd\na\nab\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example Output 3&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;6 9 10 11\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional challenge input&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/cosmologicon/3ff90d20efaa21887d32\"&gt;Get the challenge input here.&lt;/a&gt; You probably won&amp;#39;t be able to brute force this one. How fast can you make your program run on this input?&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=\"/u/Blackshell\"&gt;u/Blackshell&lt;/a&gt; for suggesting this challenge in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/3iimw3/20150826_challenge_229_intermediate_reverse_fizz/",
        "title": "[2015-08-26] Challenge #229 [Intermediate] Reverse Fizz Buzz",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Perfect P'th Powers\n\nAn integer X is a \"perfect square power\" if there is some integer Y such that Y^2 = X. An integer X is a \"perfect cube power\" if there is some integer Y such that Y^3 = X. We can extrapolate this where P is the power in question: an integer X is a \"perfect p'th power\" if there is some integer Y such that Y^P = X.\n\nYour goal is to find the highest value of P for a given X such that for some unknown integer Y, Y^P should equal X. You can expect the given input integer X to be within the range of an unsigned 32-bit integer (0 to 4,294,967,295).\n\n*Special thanks to the ACM collegiate programming challenges group for giving me the initial idea [here](http://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=1563).*\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nYou will be given a single integer on a single line of text through standard console input. This integer will range from 0 to 4,294,967,295 (the limits of a 32-bit unsigned integer).\n\n## Output Description\n\nYou must print out to standard console the highest value P that fits the above problem description's requirements.\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n*Note:* These are all considered separate input examples.\n\n    17\n\n    1073741824\n\n    25\n\n## Sample Output\n\n*Note:* The string following the result are notes to help with understanding the example; it is NOT expected of you to write this out.\n\n    1 (17^1)\n\n    30 (2^30)\n\n    2 (5^2)\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Perfect P&amp;#39;th Powers&lt;/h1&gt;\n\n&lt;p&gt;An integer X is a &amp;quot;perfect square power&amp;quot; if there is some integer Y such that Y&lt;sup&gt;2&lt;/sup&gt; = X. An integer X is a &amp;quot;perfect cube power&amp;quot; if there is some integer Y such that Y&lt;sup&gt;3&lt;/sup&gt; = X. We can extrapolate this where P is the power in question: an integer X is a &amp;quot;perfect p&amp;#39;th power&amp;quot; if there is some integer Y such that Y&lt;sup&gt;P&lt;/sup&gt; = X.&lt;/p&gt;\n\n&lt;p&gt;Your goal is to find the highest value of P for a given X such that for some unknown integer Y, Y&lt;sup&gt;P&lt;/sup&gt; should equal X. You can expect the given input integer X to be within the range of an unsigned 32-bit integer (0 to 4,294,967,295).&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Special thanks to the ACM collegiate programming challenges group for giving me the initial idea &lt;a href=\"http://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=1563\"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will be given a single integer on a single line of text through standard console input. This integer will range from 0 to 4,294,967,295 (the limits of a 32-bit unsigned integer).&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You must print out to standard console the highest value P that fits the above problem description&amp;#39;s requirements.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; These are all considered separate input examples.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;17\n\n1073741824\n\n25\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The string following the result are notes to help with understanding the example; it is NOT expected of you to write this out.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 (17^1)\n\n30 (2^30)\n\n2 (5^2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1fcpnx/053013_challenge_126_intermediate_perfect_pth/",
        "title": "[05/30/13] Challenge #126 [Intermediate] Perfect P'th Powers",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Re-emvoweler 1\n\nIn [this week's Easy challenge](http://www.reddit.com/r/dailyprogrammer/comments/1ystvb/022414_challenge_149_easy_disemvoweler/), series of words were disemvoweled into vowels, and non-vowel letters. Spaces were also removed. Your task today is, given the two strings produced via disemvowelment, output _one possibility_ for the original string.\n\n1. Your output must be such that if you put it through the solution to this week's Easy challenge, you'll recover exactly the input you were given.\n2. You don't need to output the same string as the one that was originally disemvoweled, just _some_ string that disemvowels to your input.\n3. Use [the Enable word list](http://code.google.com/p/dotnetperls-controls/downloads/detail?name=enable1.txt), or some other reasonable English word list. Every word in your output must appear in your word list.\n4. For the sample inputs, all words in originally disemvoweled strings appear in Enable. In particular, I'm not using any words with punctuation, and I'm not using the word \"a\".\n5. As before, ignore punctuation and capitalization.\n\n# Formal Inputs &amp; Outputs\n\n## Input description\n\nTwo strings, one containing only non-vowel letters, and one containing only vowels.\n\n## Output description\n\nA space-separated series of words that could be disemvoweled into the input, each word of which must appear in your word list. \n\n# Sample Inputs &amp; Outputs\n\n## Sample Input 1\n\n    wwllfndffthstrds\n    eieoeaeoi\n\n## Sample Output 1\n\nThere are, in general, many correct outputs. Any of these is valid output for the sample input (using the Enable word list to verify words):\n\n    we wile lo fen daff et host rids \n    we wile lo fend aff eths tor ids \n    we wile lo fen daff the sot rids \n    we will fend off eths tare do si \n    we will fend off the asteroids\n\n## Sample Input 2\n\n    bbsrshpdlkftbllsndhvmrbndblbnsthndlts\n    aieaeaeieooaaaeoeeaeoeaau\n\n## Sample Outputs 2\n\n    ab bise ars he ae pi ed look fa tab all sned hove me ar bend blob ens than adults \n    ai be base rash pe die look fat bal la sned hove me ar bend blob ens than adults \n    babies ae rash pe die loo ka fat balls end ho vee mar bend blob ens than adults \n    babies rash pedal kef tie bolls nod aah ave omer bendable bones than adults \n    babies are shaped like footballs and have more bendable bones than adults\n\n## Sample Input 3\n\n    llfyrbsshvtsmpntbncnfrmdbyncdt\n    aoouiaeaeaoeoieeoieaeoe\n\n# Notes\n\nThanks to /u/abecedarius for inspiring this challenge on /r/dailyprogrammer_ideas!\n\nThink you can do a better job of re-emvoweling? Check out this week's Hard challenge!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;em&gt;(Intermediate)&lt;/em&gt;: Re-emvoweler 1&lt;/h1&gt;\n\n&lt;p&gt;In &lt;a href=\"http://www.reddit.com/r/dailyprogrammer/comments/1ystvb/022414_challenge_149_easy_disemvoweler/\"&gt;this week&amp;#39;s Easy challenge&lt;/a&gt;, series of words were disemvoweled into vowels, and non-vowel letters. Spaces were also removed. Your task today is, given the two strings produced via disemvowelment, output &lt;em&gt;one possibility&lt;/em&gt; for the original string.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Your output must be such that if you put it through the solution to this week&amp;#39;s Easy challenge, you&amp;#39;ll recover exactly the input you were given.&lt;/li&gt;\n&lt;li&gt;You don&amp;#39;t need to output the same string as the one that was originally disemvoweled, just &lt;em&gt;some&lt;/em&gt; string that disemvowels to your input.&lt;/li&gt;\n&lt;li&gt;Use &lt;a href=\"http://code.google.com/p/dotnetperls-controls/downloads/detail?name=enable1.txt\"&gt;the Enable word list&lt;/a&gt;, or some other reasonable English word list. Every word in your output must appear in your word list.&lt;/li&gt;\n&lt;li&gt;For the sample inputs, all words in originally disemvoweled strings appear in Enable. In particular, I&amp;#39;m not using any words with punctuation, and I&amp;#39;m not using the word &amp;quot;a&amp;quot;.&lt;/li&gt;\n&lt;li&gt;As before, ignore punctuation and capitalization.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;Two strings, one containing only non-vowel letters, and one containing only vowels.&lt;/p&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;A space-separated series of words that could be disemvoweled into the input, each word of which must appear in your word list. &lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;wwllfndffthstrds\neieoeaeoi\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;p&gt;There are, in general, many correct outputs. Any of these is valid output for the sample input (using the Enable word list to verify words):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;we wile lo fen daff et host rids \nwe wile lo fend aff eths tor ids \nwe wile lo fen daff the sot rids \nwe will fend off eths tare do si \nwe will fend off the asteroids\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;bbsrshpdlkftbllsndhvmrbndblbnsthndlts\naieaeaeieooaaaeoeeaeoeaau\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Outputs 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;ab bise ars he ae pi ed look fa tab all sned hove me ar bend blob ens than adults \nai be base rash pe die look fat bal la sned hove me ar bend blob ens than adults \nbabies ae rash pe die loo ka fat balls end ho vee mar bend blob ens than adults \nbabies rash pedal kef tie bolls nod aah ave omer bendable bones than adults \nbabies are shaped like footballs and have more bendable bones than adults\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 3&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;llfyrbsshvtsmpntbncnfrmdbyncdt\naoouiaeaeaoeoieeoieaeoe\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/abecedarius\"&gt;/u/abecedarius&lt;/a&gt; for inspiring this challenge on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/p&gt;\n\n&lt;p&gt;Think you can do a better job of re-emvoweling? Check out this week&amp;#39;s Hard challenge!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1yzlde/022614_challenge_150_intermediate_reemvoweler_1/",
        "title": "[02/26/14] Challenge #150 [Intermediate] Re-emvoweler 1",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "\n\n\nThe Gorellians, at the far end of our galaxy, have discovered various samples of English text from our electronic transmissions, but they did not find the order of our alphabet. Being a very organized and orderly species, they want to have a way of ordering words, even in the strange symbols of English. Hence they must determine their own order.  \n\n\nFor instance, if they agree on the alphabetical order:  \n\n\nUVWXYZNOPQRSTHIJKLMABCDEFG  \n\n\nThen the following words would be in sorted order based on the above alphabet order:  \n\n\nWHATEVER\n\nZONE\n\nHOW\n\nHOWEVER\n\nHILL\n\nANY\n\nANTLER\n\nCOW\n\n***\n#**Input:**\n\n\nThe input will be formatted to enter the number of words to sort and the new Alphabet ordering and a list of words to sort. n should be &gt; 0. The alphabet is assumed to be 26 letters with no duplicates and arranged in the new order. Also assumed there are n strings entered.\n\n\nn (new alphabet ordering)\n\n(word 1 of n)\n\n(word 2 of n)\n\n....\n\n(word n of n)\n\n\n##Example input 1:\n\n\n8 UVWXYZNOPQRSTHIJKLMABCDEFG\n\nANTLER\n\nANY\n\nCOW\n\nHILL\n\nHOW\n\nHOWEVER\n\nWHATEVER\n\nZONE\n\n***\n#**Output:**\n\n\nThe list of words in sorted order based on the new order of the alphabet. The sort order should be based on the alphabet (case insensitive) and the words should be output to appear as the words were entered.\n\n##Example of output for input 1:\n\n\nWHATEVER\n\nZONE\n\nHOW\n\nHOWEVER\n\nHILL\n\nANY\n\nANTLER\n\nCOW\n\n***\n#**Notes:**\n\n\nThe sorting should be case insensitive. Meaning that you do not sort it based on the ASCII value of the letters but by the letters. Your solution should handle an alphabet order that might be typed in upper/lower case. It will sort the words by this order and output the words as they were typed in.\n\n\n##Example Input 2:\n\n\n5 ZYXWVuTSRQpONMLkJIHGFEDCBa\n\ngo\n\naLL\n\nACM\n\nteamS\n\nGo\n\n\n##Example output 2:\n\n\nteamS\n\ngo\n\nGo\n\naLL\n\nACM\n\n***\n#**Extra Challenge:**\n\nError check the input.\n\n\n***\nIf the alphabet is missing letters it returns an error message and listing letters missing.\n\n\n##Input for this:\n\n\n4 abcdfghijklmnopsuvxz\n\nerror\n\nchecking\n\nis\n\nfun\n\n\n##Output for this:\n\n\nError! Missing letters: e q r t w y\n\n***\nIf the alphabet has duplicate letters it returns an error message listing all the duplicate letters used in the alphabet.\n\n\n##Input for this:\n\n\n4 abcdefaghijklmnoepqrstiuvwoxuyz\n\noh\n\nreally\n\nyah\n\nreally\n\n\n##Output for this:\n\n\nError! Duplicate letters found in alphabet: a e i o u\n\n***\n#**Challenge Credit:**\n\n\nBased on the idea from /r/dailyprogrammer_ideas \n\n[(Link to Challenge idea)] (http://www.reddit.com/r/dailyprogrammer_ideas/comments/1yjruf/intermediate_sort_me/)\nwith some minor tweaks from me.\n\n\nThanks to /u/BlackholeDevice for submitting the idea!\n\n\nGood luck everyone and have fun!\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;The Gorellians, at the far end of our galaxy, have discovered various samples of English text from our electronic transmissions, but they did not find the order of our alphabet. Being a very organized and orderly species, they want to have a way of ordering words, even in the strange symbols of English. Hence they must determine their own order.  &lt;/p&gt;\n\n&lt;p&gt;For instance, if they agree on the alphabetical order:  &lt;/p&gt;\n\n&lt;p&gt;UVWXYZNOPQRSTHIJKLMABCDEFG  &lt;/p&gt;\n\n&lt;p&gt;Then the following words would be in sorted order based on the above alphabet order:  &lt;/p&gt;\n\n&lt;p&gt;WHATEVER&lt;/p&gt;\n\n&lt;p&gt;ZONE&lt;/p&gt;\n\n&lt;p&gt;HOW&lt;/p&gt;\n\n&lt;p&gt;HOWEVER&lt;/p&gt;\n\n&lt;p&gt;HILL&lt;/p&gt;\n\n&lt;p&gt;ANY&lt;/p&gt;\n\n&lt;p&gt;ANTLER&lt;/p&gt;\n\n&lt;p&gt;COW&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h1&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;The input will be formatted to enter the number of words to sort and the new Alphabet ordering and a list of words to sort. n should be &amp;gt; 0. The alphabet is assumed to be 26 letters with no duplicates and arranged in the new order. Also assumed there are n strings entered.&lt;/p&gt;\n\n&lt;p&gt;n (new alphabet ordering)&lt;/p&gt;\n\n&lt;p&gt;(word 1 of n)&lt;/p&gt;\n\n&lt;p&gt;(word 2 of n)&lt;/p&gt;\n\n&lt;p&gt;....&lt;/p&gt;\n\n&lt;p&gt;(word n of n)&lt;/p&gt;\n\n&lt;h2&gt;Example input 1:&lt;/h2&gt;\n\n&lt;p&gt;8 UVWXYZNOPQRSTHIJKLMABCDEFG&lt;/p&gt;\n\n&lt;p&gt;ANTLER&lt;/p&gt;\n\n&lt;p&gt;ANY&lt;/p&gt;\n\n&lt;p&gt;COW&lt;/p&gt;\n\n&lt;p&gt;HILL&lt;/p&gt;\n\n&lt;p&gt;HOW&lt;/p&gt;\n\n&lt;p&gt;HOWEVER&lt;/p&gt;\n\n&lt;p&gt;WHATEVER&lt;/p&gt;\n\n&lt;p&gt;ZONE&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h1&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;The list of words in sorted order based on the new order of the alphabet. The sort order should be based on the alphabet (case insensitive) and the words should be output to appear as the words were entered.&lt;/p&gt;\n\n&lt;h2&gt;Example of output for input 1:&lt;/h2&gt;\n\n&lt;p&gt;WHATEVER&lt;/p&gt;\n\n&lt;p&gt;ZONE&lt;/p&gt;\n\n&lt;p&gt;HOW&lt;/p&gt;\n\n&lt;p&gt;HOWEVER&lt;/p&gt;\n\n&lt;p&gt;HILL&lt;/p&gt;\n\n&lt;p&gt;ANY&lt;/p&gt;\n\n&lt;p&gt;ANTLER&lt;/p&gt;\n\n&lt;p&gt;COW&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h1&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;The sorting should be case insensitive. Meaning that you do not sort it based on the ASCII value of the letters but by the letters. Your solution should handle an alphabet order that might be typed in upper/lower case. It will sort the words by this order and output the words as they were typed in.&lt;/p&gt;\n\n&lt;h2&gt;Example Input 2:&lt;/h2&gt;\n\n&lt;p&gt;5 ZYXWVuTSRQpONMLkJIHGFEDCBa&lt;/p&gt;\n\n&lt;p&gt;go&lt;/p&gt;\n\n&lt;p&gt;aLL&lt;/p&gt;\n\n&lt;p&gt;ACM&lt;/p&gt;\n\n&lt;p&gt;teamS&lt;/p&gt;\n\n&lt;p&gt;Go&lt;/p&gt;\n\n&lt;h2&gt;Example output 2:&lt;/h2&gt;\n\n&lt;p&gt;teamS&lt;/p&gt;\n\n&lt;p&gt;go&lt;/p&gt;\n\n&lt;p&gt;Go&lt;/p&gt;\n\n&lt;p&gt;aLL&lt;/p&gt;\n\n&lt;p&gt;ACM&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h1&gt;&lt;strong&gt;Extra Challenge:&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;Error check the input.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;If the alphabet is missing letters it returns an error message and listing letters missing.&lt;/p&gt;\n\n&lt;h2&gt;Input for this:&lt;/h2&gt;\n\n&lt;p&gt;4 abcdfghijklmnopsuvxz&lt;/p&gt;\n\n&lt;p&gt;error&lt;/p&gt;\n\n&lt;p&gt;checking&lt;/p&gt;\n\n&lt;p&gt;is&lt;/p&gt;\n\n&lt;p&gt;fun&lt;/p&gt;\n\n&lt;h2&gt;Output for this:&lt;/h2&gt;\n\n&lt;p&gt;Error! Missing letters: e q r t w y&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;If the alphabet has duplicate letters it returns an error message listing all the duplicate letters used in the alphabet.&lt;/p&gt;\n\n&lt;h2&gt;Input for this:&lt;/h2&gt;\n\n&lt;p&gt;4 abcdefaghijklmnoepqrstiuvwoxuyz&lt;/p&gt;\n\n&lt;p&gt;oh&lt;/p&gt;\n\n&lt;p&gt;really&lt;/p&gt;\n\n&lt;p&gt;yah&lt;/p&gt;\n\n&lt;p&gt;really&lt;/p&gt;\n\n&lt;h2&gt;Output for this:&lt;/h2&gt;\n\n&lt;p&gt;Error! Duplicate letters found in alphabet: a e i o u&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h1&gt;&lt;strong&gt;Challenge Credit:&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;Based on the idea from &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.reddit.com/r/dailyprogrammer_ideas/comments/1yjruf/intermediate_sort_me/\"&gt;(Link to Challenge idea)&lt;/a&gt;\nwith some minor tweaks from me.&lt;/p&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/BlackholeDevice\"&gt;/u/BlackholeDevice&lt;/a&gt; for submitting the idea!&lt;/p&gt;\n\n&lt;p&gt;Good luck everyone and have fun!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/20sjif/4192014_challenge_154_intermediate_gorellian/",
        "title": "[4-19-2014] Challenge #154 [Intermediate] Gorellian Alphabet Sort",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "  50,000 Subscriber Meta-challenge\n\nCongratulations to everyone for getting the subreddit to 50K subscribers! As a reward I'll do a nice relaxed meta challenge. Effective communication is an important skill to have, but it certainly isn't easy; hence, it is a challenge unto itself. This also gives less experienced members of the subreddit a chance to see into the minds of the more veteran submitters.\n\n# Challenge\n\nPick your favourite solution (that you have written) to a past challenge, or one that you are particularly proud of. It can be from any challenge, but preferably one with some complexity. Now, describe how it works (via in-code comments or otherwise) as you would to a person. Then, describe how you might improve it or do it differently in hindsight. Also, link to the challenge post itself.\n\n# Thanks\n\nThat's to all of you - even those not currently subscribed. Without your support, this subreddit wouldn't be where it is right now. You *are* the creators of DailyProgrammer - carry on being awesome!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;strong&gt;(Intermediate)&lt;/strong&gt;: 50,000 Subscriber Meta-challenge&lt;/h1&gt;\n\n&lt;p&gt;Congratulations to everyone for getting the subreddit to 50K subscribers! As a reward I&amp;#39;ll do a nice relaxed meta challenge. Effective communication is an important skill to have, but it certainly isn&amp;#39;t easy; hence, it is a challenge unto itself. This also gives less experienced members of the subreddit a chance to see into the minds of the more veteran submitters.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Pick your favourite solution (that you have written) to a past challenge, or one that you are particularly proud of. It can be from any challenge, but preferably one with some complexity. Now, describe how it works (via in-code comments or otherwise) as you would to a person. Then, describe how you might improve it or do it differently in hindsight. Also, link to the challenge post itself.&lt;/p&gt;\n\n&lt;h1&gt;Thanks&lt;/h1&gt;\n\n&lt;p&gt;That&amp;#39;s to all of you - even those not currently subscribed. Without your support, this subreddit wouldn&amp;#39;t be where it is right now. You &lt;em&gt;are&lt;/em&gt; the creators of DailyProgrammer - carry on being awesome!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2pma1z/141217_challenge_193_intermediate_50000/",
        "title": "[14-12-17] Challenge #193 [Intermediate] 50,000 Subscriber Meta-challenge",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " ASCII Maze Master\n\nWe're going to have a slightly more logical puzzle today. We're going to write a program that will find a path through a simple maze.\n\nA simple maze in this context is a maze where all of the walls are connected to each other. Take this example maze segment.\n\n    # # ### #\n    # #      \n    # ### B #\n    #   # B #\n    # B # B #\n    # B   B #\n    # BBBBB #\n    #       #\n    #########\n\nSee how the wall drawn with `B`s isn't connected to any other walls? That's called a floating wall. A simple maze contains no floating walls - ie. there are no loops in the maze.\n\n# Formal Inputs and Outputs\n\n## Input Description\n\nYou will be given two numbers **X** and **Y**. After that you will be given a textual ASCII grid, **X** wide and **Y** tall, of walls `#` and spaces. In the maze there will be exactly one letter `S` and exactly one letter `E`. There will be no spaces leading to the outside of the maze - ie. it will be fully walled in.\n\n## Output Description\n\nYou must print out the maze. Within the maze there should be a path drawn with askerisks `*` leading from the letter `S` to the letter `E`. Try to minimise the length of the path if possible - don't just fill all of the spaces with `*`!\n\n# Sample Inputs &amp; Output\n\n## Sample Input\n\n    15 15\n    ###############\n    #S        #   #\n    ### ### ### # #\n    #   #   #   # #\n    # ##### ##### #\n    #     #   #   #\n    # ### # ### ###\n    # #   # #   # #\n    # # ### # ### #\n    # # # # # #   #\n    ### # # # # # #\n    #   #   # # # #\n    # ####### # # #\n    #           #E#\n    ###############\n\n## Sample Output\n\n    ###############\n    #S**      #   #\n    ###*### ### # #\n    #***#   #   # #\n    #*##### ##### #\n    #*****#   #   #\n    # ###*# ### ###\n    # #***# #   # #\n    # #*### # ### #\n    # #*# # # #***#\n    ###*# # # #*#*#\n    #***#   # #*#*#\n    #*####### #*#*#\n    #***********#E#\n    ###############\n\n# Challenge\n\n## Challenge Input\n\n    41 41\n    #########################################\n    #   #       #     #           #         #\n    # # # ### # # ### # ####### ### ####### #\n    # #S#   # #   #   # #     #           # #\n    # ##### # ######### # # ############# # #\n    # #     # #         # #       #   #   # #\n    # # ##### # ######### ##### # # # # ### #\n    # #     #   #     #     #   # # # # # # #\n    # ##### ######### # ##### ### # # # # # #\n    #   #           #   #     #   # # #   # #\n    # ### ######### # ### ##### ### # ##### #\n    #   #   #     # # #   #       # #       #\n    # # ### # ### # ### ### ####### ####### #\n    # #     # #   #     #   # #     #     # #\n    # ####### # ########### # # ##### # ### #\n    #     # # #   #       #   # #   # #     #\n    ##### # ##### # ##### ### # ### # #######\n    #   # #     # #   #   #   # #   #     # #\n    # ### ### ### ### # ### ### # ####### # #\n    #   #     #   #   # #   #   # #     #   #\n    ### ##### # ### ### ### # ### # ### ### #\n    #       # #   # # #   # # #   # # #     #\n    # ####### ### # # ### ### # ### # #######\n    #       #   #   #   # #   #     #       #\n    # ##### ### ##### # # # ##### ### ### ###\n    #   # # #   #     # # #     # #     #   #\n    ### # # # ### # ##### # ### # # ####### #\n    # #   #   #   # #     #   # # # #     # #\n    # ### ##### ### # ##### ### # # # ### # #\n    #   #       #   # # #   #   # # #   #   #\n    # # ######### ### # # ### ### # ### #####\n    # #     #   # # # #   #   # # #   #     #\n    # ##### # # # # # ### # ### # ######### #\n    # #   # # # # # #   # #   #             #\n    # # # # # # # # ### ### # ############# #\n    # # #     # # #   #   # #       #       #\n    # ######### # # # ### ### ##### # #######\n    #     #     # # #   #   # #     # #     #\n    # ### ####### ### # ### ### ##### # ### #\n    #   #             #   #     #       #E  #\n    #########################################\n\n# Notes\n\nOne easy way to solve simple mazes is to always follow the wall to your left or right. You will eventually arrive at the end.",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: ASCII Maze Master&lt;/h1&gt;\n\n&lt;p&gt;We&amp;#39;re going to have a slightly more logical puzzle today. We&amp;#39;re going to write a program that will find a path through a simple maze.&lt;/p&gt;\n\n&lt;p&gt;A simple maze in this context is a maze where all of the walls are connected to each other. Take this example maze segment.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# # ### #\n# #      \n# ### B #\n#   # B #\n# B # B #\n# B   B #\n# BBBBB #\n#       #\n#########\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See how the wall drawn with &lt;code&gt;B&lt;/code&gt;s isn&amp;#39;t connected to any other walls? That&amp;#39;s called a floating wall. A simple maze contains no floating walls - ie. there are no loops in the maze.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will be given two numbers &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;Y&lt;/strong&gt;. After that you will be given a textual ASCII grid, &lt;strong&gt;X&lt;/strong&gt; wide and &lt;strong&gt;Y&lt;/strong&gt; tall, of walls &lt;code&gt;#&lt;/code&gt; and spaces. In the maze there will be exactly one letter &lt;code&gt;S&lt;/code&gt; and exactly one letter &lt;code&gt;E&lt;/code&gt;. There will be no spaces leading to the outside of the maze - ie. it will be fully walled in.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You must print out the maze. Within the maze there should be a path drawn with askerisks &lt;code&gt;*&lt;/code&gt; leading from the letter &lt;code&gt;S&lt;/code&gt; to the letter &lt;code&gt;E&lt;/code&gt;. Try to minimise the length of the path if possible - don&amp;#39;t just fill all of the spaces with &lt;code&gt;*&lt;/code&gt;!&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Output&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;15 15\n###############\n#S        #   #\n### ### ### # #\n#   #   #   # #\n# ##### ##### #\n#     #   #   #\n# ### # ### ###\n# #   # #   # #\n# # ### # ### #\n# # # # # #   #\n### # # # # # #\n#   #   # # # #\n# ####### # # #\n#           #E#\n###############\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;###############\n#S**      #   #\n###*### ### # #\n#***#   #   # #\n#*##### ##### #\n#*****#   #   #\n# ###*# ### ###\n# #***# #   # #\n# #*### # ### #\n# #*# # # #***#\n###*# # # #*#*#\n#***#   # #*#*#\n#*####### #*#*#\n#***********#E#\n###############\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;h2&gt;Challenge Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;41 41\n#########################################\n#   #       #     #           #         #\n# # # ### # # ### # ####### ### ####### #\n# #S#   # #   #   # #     #           # #\n# ##### # ######### # # ############# # #\n# #     # #         # #       #   #   # #\n# # ##### # ######### ##### # # # # ### #\n# #     #   #     #     #   # # # # # # #\n# ##### ######### # ##### ### # # # # # #\n#   #           #   #     #   # # #   # #\n# ### ######### # ### ##### ### # ##### #\n#   #   #     # # #   #       # #       #\n# # ### # ### # ### ### ####### ####### #\n# #     # #   #     #   # #     #     # #\n# ####### # ########### # # ##### # ### #\n#     # # #   #       #   # #   # #     #\n##### # ##### # ##### ### # ### # #######\n#   # #     # #   #   #   # #   #     # #\n# ### ### ### ### # ### ### # ####### # #\n#   #     #   #   # #   #   # #     #   #\n### ##### # ### ### ### # ### # ### ### #\n#       # #   # # #   # # #   # # #     #\n# ####### ### # # ### ### # ### # #######\n#       #   #   #   # #   #     #       #\n# ##### ### ##### # # # ##### ### ### ###\n#   # # #   #     # # #     # #     #   #\n### # # # ### # ##### # ### # # ####### #\n# #   #   #   # #     #   # # # #     # #\n# ### ##### ### # ##### ### # # # ### # #\n#   #       #   # # #   #   # # #   #   #\n# # ######### ### # # ### ### # ### #####\n# #     #   # # # #   #   # # #   #     #\n# ##### # # # # # ### # ### # ######### #\n# #   # # # # # #   # #   #             #\n# # # # # # # # ### ### # ############# #\n# # #     # # #   #   # #       #       #\n# ######### # # # ### ### ##### # #######\n#     #     # # #   #   # #     # #     #\n# ### ####### ### # ### ### ##### # ### #\n#   #             #   #     #       #E  #\n#########################################\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;One easy way to solve simple mazes is to always follow the wall to your left or right. You will eventually arrive at the end.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/278ptv/642014_challenge_165_intermediate_ascii_maze/",
        "title": "[6/4/2014] Challenge #165 [Intermediate] ASCII Maze Master",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Tiny Assembler\n\n*Tiny*, a very simple fictional computer architecture, is programmed by an assembly language that has 16 [mnemonics](http://en.wikipedia.org/wiki/Assembly_language#Opcode_mnemonics_and_extended_mnemonics), with 37 unique op-codes. The system is based on [Harvard architecture](http://en.wikipedia.org/wiki/Harvard_architecture), and is very straight-forward: program memory is different from working memory, the machine only executes one instruction at a time, memory is an array of bytes from index 0 to index 255 (inclusive), and doesn't have any relative addressing modes. Instructions are multibyte, much like the X86 architecture. Simple instructions like HALT only take one byte, while complex instructions like JLS (Jump if Less-than) take four bytes.\n\nYour goal will be to write an [assembler](http://en.wikipedia.org/wiki/Assembler_(computing\\)#Assembler) for Tiny: though you don't need to simulate the code or machine components, you must take given assembly-language source code and produce a list of hex op-codes. You are essentially writing code that converts the lowest human-readable language to machine-readable language!\n\nThe following are all mnemonics and associated op-codes for the Tiny machine. Note that brackets mean \"content of address-index\" while non-brackets mean literals. For example, the instruction \"AND [0] 1\" will set the contents of the first element (at index 0) of memory to 1 if, and only if, the original contents at that element are equal to the given literal 1.\n\n**Google Documents of the below [found here](https://docs.google.com/document/d/1lDk_1dLz82iwc-1hESNFSepcz4Swyaf9P1j5hvR2iHw).**\n\n|\tGroup\t|\tInstruction\t|\tByte Code\t|\tDescription\t|\n|\t:-----------\t|\t:-----------\t|\t:-----------\t|\t:-----------\t|\n|\t1. Logic\t|\tAND a b\t|\t2 Ops, 3 bytes:\t|\tM[a] = M[a] bit-wise and M[b]\t|\n|\t\t|\t\t|\t0x00 [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x01 [a] b\t|\t\t|\n|\t\t|\tOR a b\t|\t2 Ops, 3 bytes:\t|\tM[a] = M[a] bit-wise or M[b]\t|\n|\t\t|\t\t|\t0x02 [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x03 [a] b\t|\t\t|\n|\t\t|\tXOR a b\t|\t2 Ops, 3 bytes:\t|\tM[a] = M[a] bit-wise xor M[b]\t|\n|\t\t|\t\t|\t0x04 [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x05 [a] b\t|\t\t|\n|\t\t|\tNOT a\t|\t1 Op, 2 bytes:\t|\tM[a] = bit-wise not M[a]\t|\n|\t\t|\t\t|\t0x06 [a]\t|\t\t|\n|\t2. Memory\t|\tMOV a b\t|\t2 Ops, 3 bytes:\t|\tM[a] = M[b], or the literal-set M[a] = b\t|\n|\t\t|\t\t|\t0x07 [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x08 [a] b\t|\t\t|\n|\t3. Math\t|\tRANDOM a\t|\t2 Ops, 2 bytes:\t|\tM[a] = random value (0 to 25; equal probability distribution)\t|\n|\t\t|\t\t|\t0x09 [a]\t|\t\t|\n|\t\t|\tADD a b\t|\t2 Ops, 3 bytes:\t|\tM[a] = M[a] + b; no overflow support\t|\n|\t\t|\t\t|\t0x0a [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x0b [a] b\t|\t\t|\n|\t\t|\tSUB a b\t|\t2 Ops, 3 bytes:\t|\tM[a] = M[a] - b; no underflow support\t|\n|\t\t|\t\t|\t0x0c [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x0d [a] b\t|\t\t|\n|\t4. Control\t|\tJMP x\t|\t2 Ops, 2 bytes:\t|\tStart executing instructions at index of value M[a] (So given a is zero, and M[0] is 10, we then execute instruction 10) or the literal a-value\t|\n|\t\t|\t\t|\t0x0e [x]\t|\t\t|\n|\t\t|\t\t|\t0x0f x\t|\t\t|\n|\t\t|\tJZ x a\t|\t4 Ops, 3 bytes:\t|\tStart executing instructions at index x if M[a] == 0 (This is a nice short-hand version of )\t|\n|\t\t|\t\t|\t0x10 [x] [a]\t|\t\t|\n|\t\t|\t\t|\t0x11 [x] a\t|\t\t|\n|\t\t|\t\t|\t0x12 x [a]\t|\t\t|\n|\t\t|\t\t|\t0x13 x a\t|\t\t|\n|\t\t|\tJEQ x a b\t|\t4 Ops, 4 bytes:\t|\tJump to x or M[x] if M[a] is equal to M[b] or if M[a] is equal to the literal b.\t|\n|\t\t|\t\t|\t0x14 [x] [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x15 x [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x16 [x] [a] b\t|\t\t|\n|\t\t|\t\t|\t0x17 x [a] b\t|\t\t|\n|\t\t|\tJLS x a b\t|\t4 Ops, 4 bytes:\t|\tJump to x or M[x] if M[a] is less than M[b] or if M[a] is less than the literal b.\t|\n|\t\t|\t\t|\t0x18 [x] [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x19 x [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x1a [x] [a] b\t|\t\t|\n|\t\t|\t\t|\t0x1b x [a] b\t|\t\t|\n|\t\t|\tJGT x a b\t|\t4 Ops, 4 bytes:\t|\tJump to x or M[x] if M[a] is greater than M[b] or if M[a] is greater than the literal b.\t|\n|\t\t|\t\t|\t0x1c [x] [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x1d x [a] [b]\t|\t\t|\n|\t\t|\t\t|\t0x1e [x] [a] b\t|\t\t|\n|\t\t|\t\t|\t0x1f x [a] b\t|\t\t|\n|\t\t|\tHALT\t|\t1 Op, 1 byte:\t|\tHalts the program / freeze flow of execution\t|\n|\t\t|\t\t|\t0xff\t|\t\t|\n|\t5. Utilities\t|\tAPRINT a\t|\t4 Ops, 2 byte:\t|\tPrint the contents of M[a] in either ASCII (if using APRINT) or as decimal (if using DPRINT). Memory ref or literals are supported in both instructions.\t|\n|\t\t|\tDPRINT a\t|\t0x20 [a] (as ASCII; aprint)\t|\t\t|\n|\t\t|\t\t|\t0x21 a (as ASCII)\t|\t\t|\n|\t\t|\t\t|\t0x22 [a] (as Decimal; dprint)\t|\t\t|\n|\t\t|\t\t|\t0x23 a (as Decimal)\t|\t\t|\n\n\n*Original author: /u/nint22*\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nYou will be given the contents of a file of Tiny assembly-language source code. This text file will only contain source-code, and no meta-data or comments. The source code is not case-sensitive, so the instruction \"and\", \"And\", and \"AND\" are all the same.\n\n## Output Description\n\nPrint the resulting op-codes in hexadecimal value. Formatting does not matter, as long as you print the *correct* hex-code!\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n*The following Tiny assembly-language code will multiply the numbers at memory-location 0 and 1, putting the result at memory-location 0, while using [2] and [3] as working variables. All of this is done at the lowest 4 bytes of memory.*\n\n    Mov [2] 0\n    Mov [3] 0\n    Jeq 6 [3] [1]\n    Add [3] 1\n    Add [2] [0]\n    Jmp 2\n    Mov [0] [2]\n    Halt\n\n## Sample Output\n\n    0x08 0x02 0x00\n    0x08 0x03 0x00\n    0x15 0x06 0x03 0x01\n    0x0B 0x03 0x01\n    0x0A 0x02 0x00\n    0x0F 0x02\n    0x07 0x00 0x02\n    0xFF\n\n# Challenge Bonus\n\nIf you write an interesting Tiny-language program and successfully run it against your assembler, you'll win a silver medal! If you can formally prove (it won't take much effort) that this language / machine is Turing Complete, you'll win a gold medal!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Tiny Assembler&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;Tiny&lt;/em&gt;, a very simple fictional computer architecture, is programmed by an assembly language that has 16 &lt;a href=\"http://en.wikipedia.org/wiki/Assembly_language#Opcode_mnemonics_and_extended_mnemonics\"&gt;mnemonics&lt;/a&gt;, with 37 unique op-codes. The system is based on &lt;a href=\"http://en.wikipedia.org/wiki/Harvard_architecture\"&gt;Harvard architecture&lt;/a&gt;, and is very straight-forward: program memory is different from working memory, the machine only executes one instruction at a time, memory is an array of bytes from index 0 to index 255 (inclusive), and doesn&amp;#39;t have any relative addressing modes. Instructions are multibyte, much like the X86 architecture. Simple instructions like HALT only take one byte, while complex instructions like JLS (Jump if Less-than) take four bytes.&lt;/p&gt;\n\n&lt;p&gt;Your goal will be to write an &lt;a href=\"http://en.wikipedia.org/wiki/Assembler_(computing)#Assembler\"&gt;assembler&lt;/a&gt; for Tiny: though you don&amp;#39;t need to simulate the code or machine components, you must take given assembly-language source code and produce a list of hex op-codes. You are essentially writing code that converts the lowest human-readable language to machine-readable language!&lt;/p&gt;\n\n&lt;p&gt;The following are all mnemonics and associated op-codes for the Tiny machine. Note that brackets mean &amp;quot;content of address-index&amp;quot; while non-brackets mean literals. For example, the instruction &amp;quot;AND [0] 1&amp;quot; will set the contents of the first element (at index 0) of memory to 1 if, and only if, the original contents at that element are equal to the given literal 1.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Google Documents of the below &lt;a href=\"https://docs.google.com/document/d/1lDk_1dLz82iwc-1hESNFSepcz4Swyaf9P1j5hvR2iHw\"&gt;found here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th align=\"left\"&gt;Group&lt;/th&gt;\n&lt;th align=\"left\"&gt;Instruction&lt;/th&gt;\n&lt;th align=\"left\"&gt;Byte Code&lt;/th&gt;\n&lt;th align=\"left\"&gt;Description&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;1. Logic&lt;/td&gt;\n&lt;td align=\"left\"&gt;AND a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;2 Ops, 3 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;M[a] = M[a] bit-wise and M[b]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x00 [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x01 [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;OR a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;2 Ops, 3 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;M[a] = M[a] bit-wise or M[b]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x02 [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x03 [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;XOR a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;2 Ops, 3 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;M[a] = M[a] bit-wise xor M[b]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x04 [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x05 [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;NOT a&lt;/td&gt;\n&lt;td align=\"left\"&gt;1 Op, 2 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;M[a] = bit-wise not M[a]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x06 [a]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;2. Memory&lt;/td&gt;\n&lt;td align=\"left\"&gt;MOV a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;2 Ops, 3 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;M[a] = M[b], or the literal-set M[a] = b&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x07 [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x08 [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;3. Math&lt;/td&gt;\n&lt;td align=\"left\"&gt;RANDOM a&lt;/td&gt;\n&lt;td align=\"left\"&gt;2 Ops, 2 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;M[a] = random value (0 to 25; equal probability distribution)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x09 [a]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;ADD a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;2 Ops, 3 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;M[a] = M[a] + b; no overflow support&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x0a [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x0b [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;SUB a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;2 Ops, 3 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;M[a] = M[a] - b; no underflow support&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x0c [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x0d [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;4. Control&lt;/td&gt;\n&lt;td align=\"left\"&gt;JMP x&lt;/td&gt;\n&lt;td align=\"left\"&gt;2 Ops, 2 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;Start executing instructions at index of value M[a] (So given a is zero, and M[0] is 10, we then execute instruction 10) or the literal a-value&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x0e [x]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x0f x&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;JZ x a&lt;/td&gt;\n&lt;td align=\"left\"&gt;4 Ops, 3 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;Start executing instructions at index x if M[a] == 0 (This is a nice short-hand version of )&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x10 [x] [a]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x11 [x] a&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x12 x [a]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x13 x a&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;JEQ x a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;4 Ops, 4 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;Jump to x or M[x] if M[a] is equal to M[b] or if M[a] is equal to the literal b.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x14 [x] [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x15 x [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x16 [x] [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x17 x [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;JLS x a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;4 Ops, 4 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;Jump to x or M[x] if M[a] is less than M[b] or if M[a] is less than the literal b.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x18 [x] [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x19 x [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x1a [x] [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x1b x [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;JGT x a b&lt;/td&gt;\n&lt;td align=\"left\"&gt;4 Ops, 4 bytes:&lt;/td&gt;\n&lt;td align=\"left\"&gt;Jump to x or M[x] if M[a] is greater than M[b] or if M[a] is greater than the literal b.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x1c [x] [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x1d x [a] [b]&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x1e [x] [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x1f x [a] b&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;HALT&lt;/td&gt;\n&lt;td align=\"left\"&gt;1 Op, 1 byte:&lt;/td&gt;\n&lt;td align=\"left\"&gt;Halts the program / freeze flow of execution&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0xff&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;5. Utilities&lt;/td&gt;\n&lt;td align=\"left\"&gt;APRINT a&lt;/td&gt;\n&lt;td align=\"left\"&gt;4 Ops, 2 byte:&lt;/td&gt;\n&lt;td align=\"left\"&gt;Print the contents of M[a] in either ASCII (if using APRINT) or as decimal (if using DPRINT). Memory ref or literals are supported in both instructions.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;DPRINT a&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x20 [a] (as ASCII; aprint)&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x21 a (as ASCII)&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x22 [a] (as Decimal; dprint)&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;td align=\"left\"&gt;0x23 a (as Decimal)&lt;/td&gt;\n&lt;td align=\"left\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;&lt;em&gt;Original author: &lt;a href=\"/u/nint22\"&gt;/u/nint22&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will be given the contents of a file of Tiny assembly-language source code. This text file will only contain source-code, and no meta-data or comments. The source code is not case-sensitive, so the instruction &amp;quot;and&amp;quot;, &amp;quot;And&amp;quot;, and &amp;quot;AND&amp;quot; are all the same.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print the resulting op-codes in hexadecimal value. Formatting does not matter, as long as you print the &lt;em&gt;correct&lt;/em&gt; hex-code!&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;The following Tiny assembly-language code will multiply the numbers at memory-location 0 and 1, putting the result at memory-location 0, while using [2] and [3] as working variables. All of this is done at the lowest 4 bytes of memory.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Mov [2] 0\nMov [3] 0\nJeq 6 [3] [1]\nAdd [3] 1\nAdd [2] [0]\nJmp 2\nMov [0] [2]\nHalt\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;0x08 0x02 0x00\n0x08 0x03 0x00\n0x15 0x06 0x03 0x01\n0x0B 0x03 0x01\n0x0A 0x02 0x00\n0x0F 0x02\n0x07 0x00 0x02\n0xFF\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Bonus&lt;/h1&gt;\n\n&lt;p&gt;If you write an interesting Tiny-language program and successfully run it against your assembler, you&amp;#39;ll win a silver medal! If you can formally prove (it won&amp;#39;t take much effort) that this language / machine is Turing Complete, you&amp;#39;ll win a gold medal!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1kqxz9/080813_challenge_132_intermediate_tiny_assembler/",
        "title": "[08/08/13] Challenge #132 [Intermediate] Tiny Assembler",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "\n Bytelandian Exchange 2\n_This problem uses the same money-changing device from Monday's Easy challenge._\n\nBytelandian Currency is made of coins with integers on them. There is a coin for each non-negative integer (including 0). You have access to a peculiar money changing machine. If you insert a N-valued coin, it pays back 3 coins of the value N/2,N/3 and N/4, rounded down. For example, if you insert a 19-valued coin, you get three coins worth 9, 6, and 4. If you insert a 2-valued coin, you get three coins worth 1, 0, and 0.\n\nThis machine can potentially be used to make a profit. For instance, a 20-valued coin can be changed into three coins worth 10, 6, and 5, and 10+6+5 = 21. Through a series of exchanges, you're able to turn a 1000-valued coin into a set of coins with a total value of 1370.\n\nStarting with a single N-valued coin, what's the maximum value you could get using this machine? Be able to handle very large N.\n\n*Author: Thomas1122*\n# Formal Inputs &amp; Outputs\n## Input Description\nThe value N of the coin you start with\n## Output Description\nThe maximum total value of coins you can potentially exchange that coin for.\n# Sample Inputs &amp; Outputs\n## Sample Input\n1000\n## Sample Output\n1370\n# Challenge Input\n10000000000 (aka 10^10 aka 10 billion)\n## Challenge Input Solution\n???\n# Note\nHint: use recursion!\n\nPlease direct questions about this challenge to /u/Cosmologicon\n\t\t\t\t",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Bytelandian Exchange 2&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;This problem uses the same money-changing device from Monday&amp;#39;s Easy challenge.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Bytelandian Currency is made of coins with integers on them. There is a coin for each non-negative integer (including 0). You have access to a peculiar money changing machine. If you insert a N-valued coin, it pays back 3 coins of the value N/2,N/3 and N/4, rounded down. For example, if you insert a 19-valued coin, you get three coins worth 9, 6, and 4. If you insert a 2-valued coin, you get three coins worth 1, 0, and 0.&lt;/p&gt;\n\n&lt;p&gt;This machine can potentially be used to make a profit. For instance, a 20-valued coin can be changed into three coins worth 10, 6, and 5, and 10+6+5 = 21. Through a series of exchanges, you&amp;#39;re able to turn a 1000-valued coin into a set of coins with a total value of 1370.&lt;/p&gt;\n\n&lt;p&gt;Starting with a single N-valued coin, what&amp;#39;s the maximum value you could get using this machine? Be able to handle very large N.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: Thomas1122&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;The value N of the coin you start with&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;The maximum total value of coins you can potentially exchange that coin for.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;1000&lt;/p&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;p&gt;1370&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;10000000000 (aka 10&lt;sup&gt;10&lt;/sup&gt; aka 10 billion)&lt;/p&gt;\n\n&lt;h2&gt;Challenge Input Solution&lt;/h2&gt;\n\n&lt;p&gt;???&lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;Hint: use recursion!&lt;/p&gt;\n\n&lt;p&gt;Please direct questions about this challenge to &lt;a href=\"/u/Cosmologicon\"&gt;/u/Cosmologicon&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/19rkqr/030613_challenge_121_intermediate_bytelandian/",
        "title": "[03/06/13] Challenge #121 [Intermediate] Bytelandian Exchange 2",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Base-Negative Numbers\n\n*\"Don't be stupid, Elite6809!\"*, I hear you say. *\"You can't have a negative base.\"* Well, why not? Let's analyse what we mean by base. Given a base-**r** system, the column **p** places from the right (starting from zero), which contains the digit **n**, has the value **n**×**r**^(**p**). The binary columns 1, 2, 4, 8, 16, ... is the same as 2^(0), 2^(1), 2^(2), 2^(3), 2^(4). Nothing stops you from using a negative base with this system, except perhaps the understanding of the concept and practicality of its usage.\n\nLet's imagine base -10 (negadecimal). Here, the place values for each column are now 1, -10, 100, -1000 and so on. Therefore, the negadecimal number 7211:\n\n    -Thousands    Hundreds    -Tens    Units\n        7            2           1       1\n     (-7000)   +   (200)   +   (-10) +  (1) = -6809\n\nIs equivalent to -6809 in standard decimal.\n\nYour challenge is, given a negative base and a value, convert it to the representation in the corresponding positive base, and vice versa.\n\n# Input and Output Description\n\n## Challenge Input\n\nYou will accept two numbers: **r** and **n**. **n** is a number in base **r**. For example:\n\n    -4 1302201\n\nThis input means 1302201 in base -4.\n\n## Challenge Output\n\nPrint the value of the input number in the corresponding opposite-signed base, for example, for the input above:\n\n    32201\n\nAs 1302201 in base -4 equals 32201 in base 4.\n\n# Sample Inputs and Outputs\n\nInput: `-10 12345678` (convert from base -10 to base 10)  \nOutput: `-8264462`\n\nInput:`-7 4021553`  \nOutput: `4016423`\n\nSimilarly, if the given base is *positive*, convert back to the corresponding negative base.\n\nInput: `7 4016423` (convert from base 7 to base -7)  \nOutput: `4021553`\n\nInput: `6 -3014515`  \nOutput: `13155121`\n\n## Extension (Hard)\n\nExtend your program to support imaginary bases. Imaginary bases can represent any complex number. The principle is the same; for example, base 4*i* can be used to represent complex numbers much the same way as a cartesian representation like a+b*i*.\nIf you have forgotten the principles of imaginary numbers, re-read the challenge description for [The Complex Number](/r/dailyprogrammer/comments/2nr6c4/) - you might want to re-use some code from that challenge anyway.\n\n# Notes\n\nTry and do both the main challenge and extension without looking for the conversion algorithms on the internet. This is part of the challenge!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Base-Negative Numbers&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;&amp;quot;Don&amp;#39;t be stupid, Elite6809!&amp;quot;&lt;/em&gt;, I hear you say. &lt;em&gt;&amp;quot;You can&amp;#39;t have a negative base.&amp;quot;&lt;/em&gt; Well, why not? Let&amp;#39;s analyse what we mean by base. Given a base-&lt;strong&gt;r&lt;/strong&gt; system, the column &lt;strong&gt;p&lt;/strong&gt; places from the right (starting from zero), which contains the digit &lt;strong&gt;n&lt;/strong&gt;, has the value &lt;strong&gt;n&lt;/strong&gt;×&lt;strong&gt;r&lt;/strong&gt;&lt;sup&gt;&lt;strong&gt;p&lt;/strong&gt;&lt;/sup&gt;. The binary columns 1, 2, 4, 8, 16, ... is the same as 2&lt;sup&gt;0&lt;/sup&gt;, 2&lt;sup&gt;1&lt;/sup&gt;, 2&lt;sup&gt;2&lt;/sup&gt;, 2&lt;sup&gt;3&lt;/sup&gt;, 2&lt;sup&gt;4&lt;/sup&gt;. Nothing stops you from using a negative base with this system, except perhaps the understanding of the concept and practicality of its usage.&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s imagine base -10 (negadecimal). Here, the place values for each column are now 1, -10, 100, -1000 and so on. Therefore, the negadecimal number 7211:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-Thousands    Hundreds    -Tens    Units\n    7            2           1       1\n (-7000)   +   (200)   +   (-10) +  (1) = -6809\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is equivalent to -6809 in standard decimal.&lt;/p&gt;\n\n&lt;p&gt;Your challenge is, given a negative base and a value, convert it to the representation in the corresponding positive base, and vice versa.&lt;/p&gt;\n\n&lt;h1&gt;Input and Output Description&lt;/h1&gt;\n\n&lt;h2&gt;Challenge Input&lt;/h2&gt;\n\n&lt;p&gt;You will accept two numbers: &lt;strong&gt;r&lt;/strong&gt; and &lt;strong&gt;n&lt;/strong&gt;. &lt;strong&gt;n&lt;/strong&gt; is a number in base &lt;strong&gt;r&lt;/strong&gt;. For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-4 1302201\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This input means 1302201 in base -4.&lt;/p&gt;\n\n&lt;h2&gt;Challenge Output&lt;/h2&gt;\n\n&lt;p&gt;Print the value of the input number in the corresponding opposite-signed base, for example, for the input above:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;32201\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As 1302201 in base -4 equals 32201 in base 4.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs and Outputs&lt;/h1&gt;\n\n&lt;p&gt;Input: &lt;code&gt;-10 12345678&lt;/code&gt; (convert from base -10 to base 10)&lt;br/&gt;\nOutput: &lt;code&gt;-8264462&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Input:&lt;code&gt;-7 4021553&lt;/code&gt;&lt;br/&gt;\nOutput: &lt;code&gt;4016423&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Similarly, if the given base is &lt;em&gt;positive&lt;/em&gt;, convert back to the corresponding negative base.&lt;/p&gt;\n\n&lt;p&gt;Input: &lt;code&gt;7 4016423&lt;/code&gt; (convert from base 7 to base -7)&lt;br/&gt;\nOutput: &lt;code&gt;4021553&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Input: &lt;code&gt;6 -3014515&lt;/code&gt;&lt;br/&gt;\nOutput: &lt;code&gt;13155121&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Extension (Hard)&lt;/h2&gt;\n\n&lt;p&gt;Extend your program to support imaginary bases. Imaginary bases can represent any complex number. The principle is the same; for example, base 4&lt;em&gt;i&lt;/em&gt; can be used to represent complex numbers much the same way as a cartesian representation like a+b&lt;em&gt;i&lt;/em&gt;.\nIf you have forgotten the principles of imaginary numbers, re-read the challenge description for &lt;a href=\"/r/dailyprogrammer/comments/2nr6c4/\"&gt;The Complex Number&lt;/a&gt; - you might want to re-use some code from that challenge anyway.&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;Try and do both the main challenge and extension without looking for the conversion algorithms on the internet. This is part of the challenge!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2t3m7j/20150121_challenge_198_intermediate_basenegative/",
        "title": "[2015-01-21] Challenge #198 [Intermediate] Base-Negative Numbers",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Mayan Long Count\nThe [Mayan Long Count](http://en.wikipedia.org/wiki/Maya_calendar#Long_Count) calendar is a counting of days with these units: \"* The Maya name for a day was k'in. Twenty of these k'ins are known as a winal or uinal. Eighteen winals make one tun. Twenty tuns are known as a k'atun. Twenty k'atuns make a b'ak'tun.*\". Essentially, we have this pattern:\n\n * 1 **kin** = 1 day\n\n * 1 **uinal** = 20 kin\n\n * 1 **tun** = 18 uinal\n\n * 1 **katun** = 20 tun\n\n * 1 **baktun** = 20 katun\n\nThe long count date format follows the number of each type, from longest-to-shortest time measurement, separated by dots. As an example, '12.17.16.7.5' means 12 baktun, 17 katun, 16 tun, 7 uinal, and 5 kin. This is also the date that corresponds to January 1st, 1970. Another example would be December 21st, 2012: '13.0.0.0.0'. This date is completely valid, though shown here as an example of a \"roll-over\" date.\n\nWrite a function that accepts a year, month, and day and returns the Mayan Long Count corresponding to that date. You must remember to take into account leap-year logic, but only have to convert dates after the 1st of January, 1970.\n\n\n*Author: skeeto*\n# Formal Inputs &amp; Outputs\n## Input Description\nThrough standard console, expect an integer N, then a new-line, followed by N lines which have three integers each: a day, month, and year. These integers are guaranteed to be valid days and either on or after the 1st of Jan. 1970.\n## Output Description\nFor each given line, output a new line in the long-form Mayan calendar format: &lt;Baktun&gt;.&lt;Katun&gt;.&lt;Tun&gt;.&lt;Uinal&gt;.&lt;Kin&gt;.\n# Sample Inputs &amp; Outputs\n## Sample Input\n    3\n    1 1 1970\n    20 7 1988\n    12 12 2012\n## Sample Output\n    12.17.16.7.5\n    12.18.15.4.0\n    12.19.19.17.11\n# Challenge Input\nNone needed\n## Challenge Input Solution\nNone needed\n# Note\n\n* Bonus 1: Do it without using your language's calendar/date utility. (i.e. handle the leap-year calculation yourself).\n\n* Bonus 2: Write the inverse function: convert back from a Mayan Long Count date. Use it to compute the corresponding date for `14.0.0.0.0`.\n\n\t\t\t\t",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Mayan Long Count&lt;/h1&gt;\n\n&lt;p&gt;The &lt;a href=\"http://en.wikipedia.org/wiki/Maya_calendar#Long_Count\"&gt;Mayan Long Count&lt;/a&gt; calendar is a counting of days with these units: &amp;quot;* The Maya name for a day was k&amp;#39;in. Twenty of these k&amp;#39;ins are known as a winal or uinal. Eighteen winals make one tun. Twenty tuns are known as a k&amp;#39;atun. Twenty k&amp;#39;atuns make a b&amp;#39;ak&amp;#39;tun.*&amp;quot;. Essentially, we have this pattern:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;1 &lt;strong&gt;kin&lt;/strong&gt; = 1 day&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;1 &lt;strong&gt;uinal&lt;/strong&gt; = 20 kin&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;1 &lt;strong&gt;tun&lt;/strong&gt; = 18 uinal&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;1 &lt;strong&gt;katun&lt;/strong&gt; = 20 tun&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;1 &lt;strong&gt;baktun&lt;/strong&gt; = 20 katun&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The long count date format follows the number of each type, from longest-to-shortest time measurement, separated by dots. As an example, &amp;#39;12.17.16.7.5&amp;#39; means 12 baktun, 17 katun, 16 tun, 7 uinal, and 5 kin. This is also the date that corresponds to January 1st, 1970. Another example would be December 21st, 2012: &amp;#39;13.0.0.0.0&amp;#39;. This date is completely valid, though shown here as an example of a &amp;quot;roll-over&amp;quot; date.&lt;/p&gt;\n\n&lt;p&gt;Write a function that accepts a year, month, and day and returns the Mayan Long Count corresponding to that date. You must remember to take into account leap-year logic, but only have to convert dates after the 1st of January, 1970.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Author: skeeto&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;Through standard console, expect an integer N, then a new-line, followed by N lines which have three integers each: a day, month, and year. These integers are guaranteed to be valid days and either on or after the 1st of Jan. 1970.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;For each given line, output a new line in the long-form Mayan calendar format: &amp;lt;Baktun&amp;gt;.&amp;lt;Katun&amp;gt;.&amp;lt;Tun&amp;gt;.&amp;lt;Uinal&amp;gt;.&amp;lt;Kin&amp;gt;.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;3\n1 1 1970\n20 7 1988\n12 12 2012\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;12.17.16.7.5\n12.18.15.4.0\n12.19.19.17.11\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;None needed&lt;/p&gt;\n\n&lt;h2&gt;Challenge Input Solution&lt;/h2&gt;\n\n&lt;p&gt;None needed&lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Bonus 1: Do it without using your language&amp;#39;s calendar/date utility. (i.e. handle the leap-year calculation yourself).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Bonus 2: Write the inverse function: convert back from a Mayan Long Count date. Use it to compute the corresponding date for &lt;code&gt;14.0.0.0.0&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/16obmx/011613_challenge_117_intermediate_mayan_long_count/",
        "title": "[01/16/13] Challenge #117 [Intermediate] Mayan Long Count",
        "difficulty": "Intermediate"
    },
    {
        "selfText": " Halt! It's simulation time!\n\nThe [Halting Problem](http://en.wikipedia.org/wiki/Halting_problem), in computational theory, is the challenge of determining if a given program and data, when started, will actually finish. In more simple terms: it is essentially impossible to determine if an arbitrary program will ever complete because of how quickly a program's complexity can grow. One could attempt to partially solve the program by attempting to find logical errors, such as infinite loops or bad iteration conditions, but this cannot verify if complex structures ever halt. Another partial solution is to just simulate the code and see if it halts, though this fails for any program that becomes reasonably large. For this challenge, you will be doing this last approach:\n\nYour goal is to simulate a given program, written in a subset of common assembly instructions listed below, and measure how many instructions were executed before the program halts, or assume the program never halts after executing 100,000 instructions. The fictional computer architecture that runs these instructions does so one instruction at a time, starting with the first and only stopping when the \"HALT\" instruction is executed or when there is no next instruction. The memory model is simple: it has 32 1-bit registers, indexed like an array. Memory can be treated conceptually like a C-style array named M: M[0], M[1], ..., M[31] are all valid locations. All memory should be initialized to 0. Certain instructions have arguments, which will always be integers between 0 to 31 (inclusive).\n\nThe instruction set only has 10 instructions, as follows:\n\n| Instruction   | Description    |\n|:-----------|------------:|\n| AND a b\t| M[a] = M[a] bit-wise and M[b]\n| OR a b\t| M[a] = M[a] bit-wise or M[b]\n| XOR a b\t| M[a] = M[a] bit-wise xor M[b]\n| NOT a     | M[a] = bit-wise not M[a]\n| MOV a b\t| M[a] = bit-wise M[b]\n| SET a c\t| M[a] = c\n| RANDOM a\t| M[a] = random value (0 or 1; equal probability distribution)\n| JMP x\t    | Start executing instructions at index x\n| JZ x a\t| Start executing instructions at index x if M[a] == 0\n| HALT\t    | Halts the program\n\nNote that memory and code reside in different places! Basically you can modify memory, but cannot modify code.\n\n*Special thanks to the ACM collegiate programming challenges group for giving me the initial idea [here](https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=12&amp;page=show_problem&amp;problem=945). Please note that one cannot actually solve the Halting problem, and that this is strictly a mini-simulation challenge.*\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nYou will first be given an integer N, which represents the number of instructions, one per line, that follows. Each of these lines will start with an instruction from the table above, with correctly formed arguments: the given program will be guaranteed to **never** crash, but are **not** guaranteed to ever halt (that's what we are testing!).\n\n## Output Description\n\nSimply run the program within your own simulation; if it halts (runs the HALT instruction) or ends (goes past the final instruction), write \"Program halts!\" and then the number of instructions executed. If the program does not halt or end within 100,000 instruction executions, stop the simulation and write \"Unable to determine if application halts\".\n\n# Sample Inputs &amp; Outputs\n## Sample Input\n\n    5\n    SET 0 1\n    JZ 4 0\n    RANDOM 0\n    JMP 1\n    HALT\n\n## Sample Output\n\n    \"Program halts! 5 instructions executed.\"\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#IntermediateIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Intermediate)&lt;/em&gt;: Halt! It&amp;#39;s simulation time!&lt;/h1&gt;\n\n&lt;p&gt;The &lt;a href=\"http://en.wikipedia.org/wiki/Halting_problem\"&gt;Halting Problem&lt;/a&gt;, in computational theory, is the challenge of determining if a given program and data, when started, will actually finish. In more simple terms: it is essentially impossible to determine if an arbitrary program will ever complete because of how quickly a program&amp;#39;s complexity can grow. One could attempt to partially solve the program by attempting to find logical errors, such as infinite loops or bad iteration conditions, but this cannot verify if complex structures ever halt. Another partial solution is to just simulate the code and see if it halts, though this fails for any program that becomes reasonably large. For this challenge, you will be doing this last approach:&lt;/p&gt;\n\n&lt;p&gt;Your goal is to simulate a given program, written in a subset of common assembly instructions listed below, and measure how many instructions were executed before the program halts, or assume the program never halts after executing 100,000 instructions. The fictional computer architecture that runs these instructions does so one instruction at a time, starting with the first and only stopping when the &amp;quot;HALT&amp;quot; instruction is executed or when there is no next instruction. The memory model is simple: it has 32 1-bit registers, indexed like an array. Memory can be treated conceptually like a C-style array named M: M[0], M[1], ..., M[31] are all valid locations. All memory should be initialized to 0. Certain instructions have arguments, which will always be integers between 0 to 31 (inclusive).&lt;/p&gt;\n\n&lt;p&gt;The instruction set only has 10 instructions, as follows:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th align=\"left\"&gt;Instruction&lt;/th&gt;\n&lt;th align=\"right\"&gt;Description&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;AND a b&lt;/td&gt;\n&lt;td align=\"right\"&gt;M[a] = M[a] bit-wise and M[b]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;OR a b&lt;/td&gt;\n&lt;td align=\"right\"&gt;M[a] = M[a] bit-wise or M[b]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;XOR a b&lt;/td&gt;\n&lt;td align=\"right\"&gt;M[a] = M[a] bit-wise xor M[b]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;NOT a&lt;/td&gt;\n&lt;td align=\"right\"&gt;M[a] = bit-wise not M[a]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;MOV a b&lt;/td&gt;\n&lt;td align=\"right\"&gt;M[a] = bit-wise M[b]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;SET a c&lt;/td&gt;\n&lt;td align=\"right\"&gt;M[a] = c&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;RANDOM a&lt;/td&gt;\n&lt;td align=\"right\"&gt;M[a] = random value (0 or 1; equal probability distribution)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;JMP x&lt;/td&gt;\n&lt;td align=\"right\"&gt;Start executing instructions at index x&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;JZ x a&lt;/td&gt;\n&lt;td align=\"right\"&gt;Start executing instructions at index x if M[a] == 0&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"left\"&gt;HALT&lt;/td&gt;\n&lt;td align=\"right\"&gt;Halts the program&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;Note that memory and code reside in different places! Basically you can modify memory, but cannot modify code.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Special thanks to the ACM collegiate programming challenges group for giving me the initial idea &lt;a href=\"https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=12&amp;amp;page=show_problem&amp;amp;problem=945\"&gt;here&lt;/a&gt;. Please note that one cannot actually solve the Halting problem, and that this is strictly a mini-simulation challenge.&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will first be given an integer N, which represents the number of instructions, one per line, that follows. Each of these lines will start with an instruction from the table above, with correctly formed arguments: the given program will be guaranteed to &lt;strong&gt;never&lt;/strong&gt; crash, but are &lt;strong&gt;not&lt;/strong&gt; guaranteed to ever halt (that&amp;#39;s what we are testing!).&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Simply run the program within your own simulation; if it halts (runs the HALT instruction) or ends (goes past the final instruction), write &amp;quot;Program halts!&amp;quot; and then the number of instructions executed. If the program does not halt or end within 100,000 instruction executions, stop the simulation and write &amp;quot;Unable to determine if application halts&amp;quot;.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;5\nSET 0 1\nJZ 4 0\nRANDOM 0\nJMP 1\nHALT\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;Program halts! 5 instructions executed.&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1euacb/052213_challenge_125_intermediate_halt_its/",
        "title": "[05/22/13] Challenge #125 [Intermediate] Halt! It's simulation time!",
        "difficulty": "Intermediate"
    },
    {
        "selfText": "#Theme Week:\n\nWe continue our theme week challenge with a more intermediate approach to this game. We will be adding on to the challenge from monday. Those who have done monday's challenge will find this challenge a little easier by just modifying what they have done from monday.\n\n\n[Monday's Part 1 Challenge] (http://www.reddit.com/r/dailyprogrammer/comments/23lfrf/4212014_challenge_159_easy_rock_paper_scissors/)\n\n\n\nWe are gonna upgrade our game a bit. These steps will take the game to the next level.\n\nOur computer AI simply randoms every time. We can go a step further and implement a basic AI agent that learns to create a better way in picking. Please add the following enhancements from monday's challenge.\n\n\n* Implement a Game Loop. This should be a friendly menu that lets the player continue to play matches until they pick an option to quit. \n* Record the win and tie record of each player and games played.\n* At termination of game display games played and win/tie records and percentage (This was the extra challenge from monday)\n* Each time the game is played the AI agent will remember what the move of the opponent was for that match. \n* The choice of what move the computer picks in future games will be based on taking the top picks so far and picking from the counter picks. In the case of a tie for a move the computer will only random amongst the counter moves of those choices and also eliminate from the potential pool of picks any moves it is trying to counter to lessen the chance of a tie.\n\n\nExample of this AI.\n\nGame 1 - human picks rock\n\nGame 2 - human picks paper\n\nGame 3 - human picks lizard\n\nGame 4 - human picks rock\n\nFor game 5 your AI agent detects rock as the most picked choice. The counter moves to rock are Spock and Paper. The computer will randomized and pick one of these for its move.\n\n\nGame 5 - human picks lizard.\n\n\nFor game 6 your AI agent sees a tie between Rock and Lizard and then must decide on a move that counters either. The counters could be Spock, Paper, Rock, Scissors. Before picking eliminate counters that match any of the top picks. So since Rock was one of the top picks so far we eliminate it as a possible counter to prevent a tie. So random between Spock, Paper and Scissors.\n\n\nif for any reason all choices are eliminated then just do a pure random pick.\n\n\n\n#Input:\n\nDesign a menu driven or other interface for a loop that allows the game to play several games until an option/method is used to terminate the game.\n\n\nDesign and look is up to you.\n\n\n#Output:\n\nSimilar to monday. So the moves and winner. On termination of the game show the number of games played. For each player (human and computer) list how many games they won and the percentage. Also list how many tie games and percentage.\n\n#For Friday:\n\nFriday we will be kicking this up further. Again I suggest design solutions so that you can pick which AI you wish to use (Either a pure random or this new AI for this challenge) as the Bot for making picks.\n\n#Extra Challenge:\n\nThe menu system defaults to human vs new AI. Add a sub-menu system that lets you define which computer AI you are playing against. This means you pick if you are human vs random AI (from monday) or you can do human vs Learning AI (from this challenge).\n\n\nPlay 10 games against each AI picking method and see which computer AI has the better win rate.\n\n#Note on the AI:\n\nFriday will have a few steps. One is make your AI that is better than this one. The intent of this AI was to either give guidance to those who don't wish to develop their own AI and also to test to see if it is better than a true random pick. It was not intended to be good or bad.\n\n\nThose who wish to develop their own AI for the intermediate I would encourage you to do so. It has to be more complex than just simply doing a pure random number to pick. Doing so will get you a step ahead.\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Theme Week:&lt;/h1&gt;\n\n&lt;p&gt;We continue our theme week challenge with a more intermediate approach to this game. We will be adding on to the challenge from monday. Those who have done monday&amp;#39;s challenge will find this challenge a little easier by just modifying what they have done from monday.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.reddit.com/r/dailyprogrammer/comments/23lfrf/4212014_challenge_159_easy_rock_paper_scissors/\"&gt;Monday&amp;#39;s Part 1 Challenge&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;We are gonna upgrade our game a bit. These steps will take the game to the next level.&lt;/p&gt;\n\n&lt;p&gt;Our computer AI simply randoms every time. We can go a step further and implement a basic AI agent that learns to create a better way in picking. Please add the following enhancements from monday&amp;#39;s challenge.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Implement a Game Loop. This should be a friendly menu that lets the player continue to play matches until they pick an option to quit. &lt;/li&gt;\n&lt;li&gt;Record the win and tie record of each player and games played.&lt;/li&gt;\n&lt;li&gt;At termination of game display games played and win/tie records and percentage (This was the extra challenge from monday)&lt;/li&gt;\n&lt;li&gt;Each time the game is played the AI agent will remember what the move of the opponent was for that match. &lt;/li&gt;\n&lt;li&gt;The choice of what move the computer picks in future games will be based on taking the top picks so far and picking from the counter picks. In the case of a tie for a move the computer will only random amongst the counter moves of those choices and also eliminate from the potential pool of picks any moves it is trying to counter to lessen the chance of a tie.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Example of this AI.&lt;/p&gt;\n\n&lt;p&gt;Game 1 - human picks rock&lt;/p&gt;\n\n&lt;p&gt;Game 2 - human picks paper&lt;/p&gt;\n\n&lt;p&gt;Game 3 - human picks lizard&lt;/p&gt;\n\n&lt;p&gt;Game 4 - human picks rock&lt;/p&gt;\n\n&lt;p&gt;For game 5 your AI agent detects rock as the most picked choice. The counter moves to rock are Spock and Paper. The computer will randomized and pick one of these for its move.&lt;/p&gt;\n\n&lt;p&gt;Game 5 - human picks lizard.&lt;/p&gt;\n\n&lt;p&gt;For game 6 your AI agent sees a tie between Rock and Lizard and then must decide on a move that counters either. The counters could be Spock, Paper, Rock, Scissors. Before picking eliminate counters that match any of the top picks. So since Rock was one of the top picks so far we eliminate it as a possible counter to prevent a tie. So random between Spock, Paper and Scissors.&lt;/p&gt;\n\n&lt;p&gt;if for any reason all choices are eliminated then just do a pure random pick.&lt;/p&gt;\n\n&lt;h1&gt;Input:&lt;/h1&gt;\n\n&lt;p&gt;Design a menu driven or other interface for a loop that allows the game to play several games until an option/method is used to terminate the game.&lt;/p&gt;\n\n&lt;p&gt;Design and look is up to you.&lt;/p&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;Similar to monday. So the moves and winner. On termination of the game show the number of games played. For each player (human and computer) list how many games they won and the percentage. Also list how many tie games and percentage.&lt;/p&gt;\n\n&lt;h1&gt;For Friday:&lt;/h1&gt;\n\n&lt;p&gt;Friday we will be kicking this up further. Again I suggest design solutions so that you can pick which AI you wish to use (Either a pure random or this new AI for this challenge) as the Bot for making picks.&lt;/p&gt;\n\n&lt;h1&gt;Extra Challenge:&lt;/h1&gt;\n\n&lt;p&gt;The menu system defaults to human vs new AI. Add a sub-menu system that lets you define which computer AI you are playing against. This means you pick if you are human vs random AI (from monday) or you can do human vs Learning AI (from this challenge).&lt;/p&gt;\n\n&lt;p&gt;Play 10 games against each AI picking method and see which computer AI has the better win rate.&lt;/p&gt;\n\n&lt;h1&gt;Note on the AI:&lt;/h1&gt;\n\n&lt;p&gt;Friday will have a few steps. One is make your AI that is better than this one. The intent of this AI was to either give guidance to those who don&amp;#39;t wish to develop their own AI and also to test to see if it is better than a true random pick. It was not intended to be good or bad.&lt;/p&gt;\n\n&lt;p&gt;Those who wish to develop their own AI for the intermediate I would encourage you to do so. It has to be more complex than just simply doing a pure random number to pick. Doing so will get you a step ahead.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/23qy19/4232014_challenge_159_intermediate_rock_paper/",
        "title": "[4/23/2014] Challenge #159 [Intermediate] Rock Paper Scissors Lizard Spock - Part 2 Enhancement",
        "difficulty": "Intermediate"
    }
]