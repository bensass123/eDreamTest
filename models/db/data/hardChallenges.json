[
    {
        "selfText": "**: Arrows and Arrows, part 1\n\nWednesday's challenge was released later than I wanted it to be (my fault entirely), so I'll make it up to you by posting this one early. I fear some previous hard challenges have appeared unapproachable to some people due to their logical or mathematical complexity. I aim to make a Hard challenge today which is innately simple, but will still require a Hard degree of thought (assuming you come up with the algorithm yourself.)  \nTake this grid of characters:\n\n\tv&lt;^&gt;&lt;&gt;&gt;v&gt;&lt;&gt;^&lt;&gt;vvv^^&gt;\n\t&gt;^&lt;&gt;^&lt;&lt;v&lt;&gt;&gt;^v^v&gt;&lt;^&lt;&lt;\n\tv^^&gt;&gt;&gt;&gt;&gt;&gt;&lt;v^^&lt;^vvv&gt;v\n\t^^&gt;&lt;v&lt;^^&lt;^&lt;^^&gt;&gt;&gt;v&gt;v&gt;\n\t^&lt;&gt;vv^&gt;&lt;&gt;^&lt;^^&lt;&lt;^^&gt;&lt;v\n\t^vv&lt;&lt;&lt;&gt;&lt;&gt;&gt;&gt;&gt;^&lt;&gt;^^^v^\n\t^&lt;^^&lt;^&gt;v&lt;v^&lt;&gt;vv&lt;^v&lt;&gt;\n\tv&lt;&gt;^vv&lt;^&gt;vv&gt;v&gt;&lt;v^&gt;^^\n\t&gt;v&lt;v&gt;&lt;^&gt;&lt;&lt;v&gt;^^&gt;&gt;^&lt;&gt;^\n\t^v&lt;&gt;^&lt;&gt;^&gt;^^^vv^v&gt;&gt;^&lt;\n\tv&gt;v^^&lt;&gt;&gt;&lt;&lt;&lt;^^&gt;&lt;^vvv^\n\nLet's imagine they all represent arrows, pointing to a cell next to them. For example, `v` points downward, and `&lt;` points left. Let's also imagine the grid is infinite - ie. a `&gt;` arrow at the right-hand side will 'wrap around' and point to the leftmost character on the same row, meaning the board has no limits. Now, we're going to follow the direction of the arrows. Look at the top-left cell. It's a `v`, so it points down to the cell below it, which is a `&gt;`. That points to the cell to its right, which is a `^`. This points up to the cell above it, which is a `&lt;`. This points to the cell to its left... which is exactly where we started. See how this has formed a 'loop'? You could go round and round and round forever. Remember, the board wraps around, so this grid is also a loop:\n\n    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\nAnd so is this, if you follow the arrows:\n\n\t^^&gt;\n\t&gt;^^\n\t^&gt;^\n\nThis looping structure is called a **cycle**. The discrete mathematicians in this sub should have all collectively just said *'aha!'*, as they should know already be thinking of how to approach the challenge from that last sentence. If you're not a discrete mathematician, read on. Your challenge today is simply described: given a grid such as the one above, find the *largest cycle* in it.\n\nOne important point: the 'length' of the cycle is just the part of the cycle that repeats. For example, the cycle is *not* made longer by adding an 'intro' to it:\n\n        &gt;&gt;v\n        ^&lt;&lt;\n         ^\n         ^\n         ^\n         ^\n\nThe length of this cycle is 6 regardless of where you start from, as that is the length of the 'cycle'.\n\n# Formal Inputs and Outputs\n\n## Input Description\n\nYou will input 2 numbers first - these are the width and height of the grid you'll be working with. Then you will input a grid in the same format as described above.\n\n## Output Description\n\nYou are to output the length of the longest cycle on the grid, possibly along with some representation of where that cycle is on the board (eg. print the cycle in another color.)\n\n# Sample Inputs and Outputs\n\n## Sample Input\n\nThis input should test the ability of your program to find longer cycles over shorter cycles, and ignore arrows not in a cycle.\n\n\t5 5\n\t&gt;&gt;&gt;&gt;v\n\t^v&lt;&lt;v\n\t^vv^v\n\t^&gt;&gt;v&lt;\n\t^&lt;&lt;&lt;^\n\n## Sample Output\n\nLongest cycle: `16`  \nPosition:\n\n\t&gt;&gt;&gt;&gt;v\n\t^   v\n\t^   v\n\t^  v&lt;\n\t^&lt;&lt;&lt; \n\n## Sample Input\n\nThis should test the ability of your program to find cycles that wrap around.\n\n\t45 20\n\t^^v&gt;&gt;v^&gt;&gt;v&lt;&lt;&lt;v&gt;v&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;^vvv^^vvvv&lt;v^^&gt;&lt;^^v&gt;\n\t&gt;&gt;&lt;&lt;&gt;vv&lt;&gt;&lt;&lt;&lt;^&gt;&lt;^&lt;^v^^&lt;vv&gt;&gt;^v&lt;v^vv^^v&lt;&gt;&lt;^&gt;&gt;&lt;v&lt;\n\tvv&lt;^v&lt;v&lt;v&lt;vvv&gt;v&lt;v&lt;vv&lt;^&lt;v&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;^&lt;&gt;&lt;&gt;^&gt;&lt;^v&gt;&gt;&gt;\n\t&lt;v&lt;v^^&lt;v&lt;&gt;v&lt;&gt;v&lt;v&lt;^v^&gt;^&lt;^&lt;&lt;v&gt;^v&gt;&lt;^v^&gt;&gt;^^^&lt;&gt;&lt;^v\n\t^&gt;&gt;&gt;^v^v^&lt;&gt;&gt;vvv&gt;v^^&lt;^&lt;&lt;&lt;&gt;&lt;&gt;v&gt;&gt;^v&lt;^^&lt;&gt;v&gt;&gt;v&lt;v&gt;^\n\t^^^&lt;&lt;^&lt;^&gt;&gt;^v&gt;&gt;&gt;&gt;&gt;&lt;&gt;&gt;^v&lt;^^^&lt;^^v^v&lt;^&lt;v^&gt;&lt;&lt;^&lt;&lt;&lt;&gt;\n\tv&lt;&gt;v^vv^v&lt;&gt;&lt;^&gt;v^vv&gt;^^v^&lt;&gt;v^^^&gt;^&gt;vv&lt;^&lt;&lt;v^&lt;&lt;&gt;^v\n\t&lt;&lt;&lt;&lt;&lt;^&lt;vv&lt;^&gt;&lt;&gt;^^&gt;&gt;&gt;^^^^&lt;^&lt;^v^&gt;&lt;^v^v&gt;^vvv&gt;^v^^\n\t&lt;&lt;v^&lt;v&lt;&lt;^^v&lt;&gt;v&gt;v^&lt;&lt;&lt;&lt;&lt;&gt;^^v&lt;v^&gt;&gt;&gt;v^&gt;&lt;v^v&lt;v^^^&lt;\n\t^^&gt;&gt;^&lt;vv&lt;vv&lt;&gt;v^&lt;^&lt;^^&gt;&lt;&gt;&lt;^vvvv&lt;&lt;v&lt;^&lt;&lt;^&gt;^&gt;vv^&lt;v\n\t^^v^&gt;&gt;^&gt;^&lt;vv^^&lt;&gt;&gt;^^v&gt;v&gt;&gt;v&gt;&gt;v^vv&lt;vv^&gt;&gt;&lt;&gt;&gt;v&lt;&lt;&gt;&gt;\n\t^v&lt;^v&lt;v&gt;^^&lt;&gt;&gt;^&gt;^&gt;^^v&gt;v&lt;&lt;&lt;&lt;&lt;&gt;&gt;&lt;&gt;&lt;^v&lt;^^v&gt;&lt;v&gt;^&lt;&lt;\n\tv&gt;v&lt;&gt;&lt;^v&lt;&lt;^^&lt;^&gt;v&gt;^&gt;&lt;^&gt;&lt;v^&gt;&lt;v^^^&gt;&gt;&lt;^^&lt;^vv^^^&gt;^\n\tv&gt;&lt;&gt;^&gt;&lt;vv^v^^&gt;&gt;&lt;&gt;^&lt;^v&lt;^&gt;&lt;v&gt;^v^&lt;^&lt;&gt;&gt;^&lt;^vv&lt;v&gt;^v\n\t&gt;&lt;^&lt;v&gt;&gt;v&gt;^&lt;&lt;^&gt;^&lt;^^&gt;v^^v&lt;&gt;&gt;v&gt;&lt;&lt;&gt;v&lt;&lt;^&gt;&lt;&lt;&gt;^&gt;^v&lt;v\n\t&gt;vv&gt;^&gt;^v&gt;&lt;^^&lt;v^&gt;^&gt;v&lt;^v&gt;&lt;&gt;vv&gt;v&lt;^&gt;&lt;&lt;&lt;&lt;v^&lt;^vv&lt;&gt;v\n\t&lt;&gt;&lt;&lt;^^&gt;&gt;^&lt;&gt;vv&gt;&lt;^^&lt;vv&lt;&lt;^v^v^&lt;^^^^vv&lt;&lt;&gt;^&lt;vvv^vv\n\t&gt;v&lt;&lt;v^&gt;&lt;v&lt;^^&gt;&lt;^v^&lt;&lt;&lt;&gt;^&lt;&lt;vvvv^^^v&lt;&lt;v&gt;vv&gt;^&gt;&gt;^&lt;&gt;\n\t^^^^&lt;^&lt;&gt;^^vvv&gt;v^&lt;&lt;&gt;&gt;&lt;^&lt;&lt;v&gt;^&lt;&lt;v&gt;&gt;&gt;&lt;&gt;&gt;&gt;&lt;&lt;^^&gt;vv&gt;\n\t&lt;^&lt;^&lt;&gt;vvv^v&gt;&lt;&lt;&lt;vvv&lt;&gt;&gt;&gt;&gt;^&lt;&lt;&lt;^vvv&gt;^&lt;&lt;&lt;^vv&gt;v^&gt;&lt;^\n\n## Sample Output\n\nLongest cycle: `44`  \nPosition:\n\n\t\t\t\t\t\t&gt;&gt;&gt;&gt;&gt;^\n\t\t\t\t\t\t^&lt;\n\t\t\t\t\t\t ^\n\t\t\t\t\t\t&gt;^\n\t\t\t\t\t\t^\n\t\t\t\t\t   &gt;^\n\t\t\t\t\t   ^\n\t\t\t\t\t&gt;&gt;&gt;^\n\t\t\t\t\t^\n\t\t\t\t\t^&lt;\n\t\t\t\t\t ^\n\t\t\t\t\t ^\n\t\t\t\t\t ^\n\t\t\t\t\t&gt;^\n\t\t\t\t\t^\n\t\t\t\t\t^\n\t\t\t\t\t^  v&lt;&lt;\n\t\t\t\t\t^&lt;&lt;&lt; ^\n\t\t\t\t\t\t ^&lt;&lt;\n\t\t\t\t\t\t   ^&lt;&lt;\n\n# Notes\n\nIf you're a discrete mathematician or know of graph theory, you could try treating the grid as a directed graph and use a cycle finding algorithm on it. If not, try and come up with your own algorithm. [I wrote a tool for you to generate random inputs](http://jsfiddle.net/Quackmatic/s976w08c/2/). If you find (or make) a cool loop in an input, post it here!\n\n# Bonus\n\nNotice how the path length will always be an even number if the arrows do not wrap around? Try to explain why. Food for thought.",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#HardIcon\"&gt;&lt;/a&gt; &lt;strong&gt;(Hard)&lt;/strong&gt;: Arrows and Arrows, part 1&lt;/h1&gt;\n\n&lt;p&gt;Wednesday&amp;#39;s challenge was released later than I wanted it to be (my fault entirely), so I&amp;#39;ll make it up to you by posting this one early. I fear some previous hard challenges have appeared unapproachable to some people due to their logical or mathematical complexity. I aim to make a Hard challenge today which is innately simple, but will still require a Hard degree of thought (assuming you come up with the algorithm yourself.)&lt;br/&gt;\nTake this grid of characters:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;v&amp;lt;^&amp;gt;&amp;lt;&amp;gt;&amp;gt;v&amp;gt;&amp;lt;&amp;gt;^&amp;lt;&amp;gt;vvv^^&amp;gt;\n&amp;gt;^&amp;lt;&amp;gt;^&amp;lt;&amp;lt;v&amp;lt;&amp;gt;&amp;gt;^v^v&amp;gt;&amp;lt;^&amp;lt;&amp;lt;\nv^^&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;v^^&amp;lt;^vvv&amp;gt;v\n^^&amp;gt;&amp;lt;v&amp;lt;^^&amp;lt;^&amp;lt;^^&amp;gt;&amp;gt;&amp;gt;v&amp;gt;v&amp;gt;\n^&amp;lt;&amp;gt;vv^&amp;gt;&amp;lt;&amp;gt;^&amp;lt;^^&amp;lt;&amp;lt;^^&amp;gt;&amp;lt;v\n^vv&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;^&amp;lt;&amp;gt;^^^v^\n^&amp;lt;^^&amp;lt;^&amp;gt;v&amp;lt;v^&amp;lt;&amp;gt;vv&amp;lt;^v&amp;lt;&amp;gt;\nv&amp;lt;&amp;gt;^vv&amp;lt;^&amp;gt;vv&amp;gt;v&amp;gt;&amp;lt;v^&amp;gt;^^\n&amp;gt;v&amp;lt;v&amp;gt;&amp;lt;^&amp;gt;&amp;lt;&amp;lt;v&amp;gt;^^&amp;gt;&amp;gt;^&amp;lt;&amp;gt;^\n^v&amp;lt;&amp;gt;^&amp;lt;&amp;gt;^&amp;gt;^^^vv^v&amp;gt;&amp;gt;^&amp;lt;\nv&amp;gt;v^^&amp;lt;&amp;gt;&amp;gt;&amp;lt;&amp;lt;&amp;lt;^^&amp;gt;&amp;lt;^vvv^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&amp;#39;s imagine they all represent arrows, pointing to a cell next to them. For example, &lt;code&gt;v&lt;/code&gt; points downward, and &lt;code&gt;&amp;lt;&lt;/code&gt; points left. Let&amp;#39;s also imagine the grid is infinite - ie. a &lt;code&gt;&amp;gt;&lt;/code&gt; arrow at the right-hand side will &amp;#39;wrap around&amp;#39; and point to the leftmost character on the same row, meaning the board has no limits. Now, we&amp;#39;re going to follow the direction of the arrows. Look at the top-left cell. It&amp;#39;s a &lt;code&gt;v&lt;/code&gt;, so it points down to the cell below it, which is a &lt;code&gt;&amp;gt;&lt;/code&gt;. That points to the cell to its right, which is a &lt;code&gt;^&lt;/code&gt;. This points up to the cell above it, which is a &lt;code&gt;&amp;lt;&lt;/code&gt;. This points to the cell to its left... which is exactly where we started. See how this has formed a &amp;#39;loop&amp;#39;? You could go round and round and round forever. Remember, the board wraps around, so this grid is also a loop:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And so is this, if you follow the arrows:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;^^&amp;gt;\n&amp;gt;^^\n^&amp;gt;^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This looping structure is called a &lt;strong&gt;cycle&lt;/strong&gt;. The discrete mathematicians in this sub should have all collectively just said &lt;em&gt;&amp;#39;aha!&amp;#39;&lt;/em&gt;, as they should know already be thinking of how to approach the challenge from that last sentence. If you&amp;#39;re not a discrete mathematician, read on. Your challenge today is simply described: given a grid such as the one above, find the &lt;em&gt;largest cycle&lt;/em&gt; in it.&lt;/p&gt;\n\n&lt;p&gt;One important point: the &amp;#39;length&amp;#39; of the cycle is just the part of the cycle that repeats. For example, the cycle is &lt;em&gt;not&lt;/em&gt; made longer by adding an &amp;#39;intro&amp;#39; to it:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;v\n    ^&amp;lt;&amp;lt;\n     ^\n     ^\n     ^\n     ^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The length of this cycle is 6 regardless of where you start from, as that is the length of the &amp;#39;cycle&amp;#39;.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will input 2 numbers first - these are the width and height of the grid you&amp;#39;ll be working with. Then you will input a grid in the same format as described above.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You are to output the length of the longest cycle on the grid, possibly along with some representation of where that cycle is on the board (eg. print the cycle in another color.)&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;This input should test the ability of your program to find longer cycles over shorter cycles, and ignore arrows not in a cycle.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;5 5\n&amp;gt;&amp;gt;&amp;gt;&amp;gt;v\n^v&amp;lt;&amp;lt;v\n^vv^v\n^&amp;gt;&amp;gt;v&amp;lt;\n^&amp;lt;&amp;lt;&amp;lt;^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;p&gt;Longest cycle: &lt;code&gt;16&lt;/code&gt;&lt;br/&gt;\nPosition:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;v\n^   v\n^   v\n^  v&amp;lt;\n^&amp;lt;&amp;lt;&amp;lt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;This should test the ability of your program to find cycles that wrap around.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;45 20\n^^v&amp;gt;&amp;gt;v^&amp;gt;&amp;gt;v&amp;lt;&amp;lt;&amp;lt;v&amp;gt;v&amp;lt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;^vvv^^vvvv&amp;lt;v^^&amp;gt;&amp;lt;^^v&amp;gt;\n&amp;gt;&amp;gt;&amp;lt;&amp;lt;&amp;gt;vv&amp;lt;&amp;gt;&amp;lt;&amp;lt;&amp;lt;^&amp;gt;&amp;lt;^&amp;lt;^v^^&amp;lt;vv&amp;gt;&amp;gt;^v&amp;lt;v^vv^^v&amp;lt;&amp;gt;&amp;lt;^&amp;gt;&amp;gt;&amp;lt;v&amp;lt;\nvv&amp;lt;^v&amp;lt;v&amp;lt;v&amp;lt;vvv&amp;gt;v&amp;lt;v&amp;lt;vv&amp;lt;^&amp;lt;v&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;^&amp;lt;&amp;gt;&amp;lt;&amp;gt;^&amp;gt;&amp;lt;^v&amp;gt;&amp;gt;&amp;gt;\n&amp;lt;v&amp;lt;v^^&amp;lt;v&amp;lt;&amp;gt;v&amp;lt;&amp;gt;v&amp;lt;v&amp;lt;^v^&amp;gt;^&amp;lt;^&amp;lt;&amp;lt;v&amp;gt;^v&amp;gt;&amp;lt;^v^&amp;gt;&amp;gt;^^^&amp;lt;&amp;gt;&amp;lt;^v\n^&amp;gt;&amp;gt;&amp;gt;^v^v^&amp;lt;&amp;gt;&amp;gt;vvv&amp;gt;v^^&amp;lt;^&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;v&amp;gt;&amp;gt;^v&amp;lt;^^&amp;lt;&amp;gt;v&amp;gt;&amp;gt;v&amp;lt;v&amp;gt;^\n^^^&amp;lt;&amp;lt;^&amp;lt;^&amp;gt;&amp;gt;^v&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;&amp;gt;&amp;gt;^v&amp;lt;^^^&amp;lt;^^v^v&amp;lt;^&amp;lt;v^&amp;gt;&amp;lt;&amp;lt;^&amp;lt;&amp;lt;&amp;lt;&amp;gt;\nv&amp;lt;&amp;gt;v^vv^v&amp;lt;&amp;gt;&amp;lt;^&amp;gt;v^vv&amp;gt;^^v^&amp;lt;&amp;gt;v^^^&amp;gt;^&amp;gt;vv&amp;lt;^&amp;lt;&amp;lt;v^&amp;lt;&amp;lt;&amp;gt;^v\n&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;^&amp;lt;vv&amp;lt;^&amp;gt;&amp;lt;&amp;gt;^^&amp;gt;&amp;gt;&amp;gt;^^^^&amp;lt;^&amp;lt;^v^&amp;gt;&amp;lt;^v^v&amp;gt;^vvv&amp;gt;^v^^\n&amp;lt;&amp;lt;v^&amp;lt;v&amp;lt;&amp;lt;^^v&amp;lt;&amp;gt;v&amp;gt;v^&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;gt;^^v&amp;lt;v^&amp;gt;&amp;gt;&amp;gt;v^&amp;gt;&amp;lt;v^v&amp;lt;v^^^&amp;lt;\n^^&amp;gt;&amp;gt;^&amp;lt;vv&amp;lt;vv&amp;lt;&amp;gt;v^&amp;lt;^&amp;lt;^^&amp;gt;&amp;lt;&amp;gt;&amp;lt;^vvvv&amp;lt;&amp;lt;v&amp;lt;^&amp;lt;&amp;lt;^&amp;gt;^&amp;gt;vv^&amp;lt;v\n^^v^&amp;gt;&amp;gt;^&amp;gt;^&amp;lt;vv^^&amp;lt;&amp;gt;&amp;gt;^^v&amp;gt;v&amp;gt;&amp;gt;v&amp;gt;&amp;gt;v^vv&amp;lt;vv^&amp;gt;&amp;gt;&amp;lt;&amp;gt;&amp;gt;v&amp;lt;&amp;lt;&amp;gt;&amp;gt;\n^v&amp;lt;^v&amp;lt;v&amp;gt;^^&amp;lt;&amp;gt;&amp;gt;^&amp;gt;^&amp;gt;^^v&amp;gt;v&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;^v&amp;lt;^^v&amp;gt;&amp;lt;v&amp;gt;^&amp;lt;&amp;lt;\nv&amp;gt;v&amp;lt;&amp;gt;&amp;lt;^v&amp;lt;&amp;lt;^^&amp;lt;^&amp;gt;v&amp;gt;^&amp;gt;&amp;lt;^&amp;gt;&amp;lt;v^&amp;gt;&amp;lt;v^^^&amp;gt;&amp;gt;&amp;lt;^^&amp;lt;^vv^^^&amp;gt;^\nv&amp;gt;&amp;lt;&amp;gt;^&amp;gt;&amp;lt;vv^v^^&amp;gt;&amp;gt;&amp;lt;&amp;gt;^&amp;lt;^v&amp;lt;^&amp;gt;&amp;lt;v&amp;gt;^v^&amp;lt;^&amp;lt;&amp;gt;&amp;gt;^&amp;lt;^vv&amp;lt;v&amp;gt;^v\n&amp;gt;&amp;lt;^&amp;lt;v&amp;gt;&amp;gt;v&amp;gt;^&amp;lt;&amp;lt;^&amp;gt;^&amp;lt;^^&amp;gt;v^^v&amp;lt;&amp;gt;&amp;gt;v&amp;gt;&amp;lt;&amp;lt;&amp;gt;v&amp;lt;&amp;lt;^&amp;gt;&amp;lt;&amp;lt;&amp;gt;^&amp;gt;^v&amp;lt;v\n&amp;gt;vv&amp;gt;^&amp;gt;^v&amp;gt;&amp;lt;^^&amp;lt;v^&amp;gt;^&amp;gt;v&amp;lt;^v&amp;gt;&amp;lt;&amp;gt;vv&amp;gt;v&amp;lt;^&amp;gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;v^&amp;lt;^vv&amp;lt;&amp;gt;v\n&amp;lt;&amp;gt;&amp;lt;&amp;lt;^^&amp;gt;&amp;gt;^&amp;lt;&amp;gt;vv&amp;gt;&amp;lt;^^&amp;lt;vv&amp;lt;&amp;lt;^v^v^&amp;lt;^^^^vv&amp;lt;&amp;lt;&amp;gt;^&amp;lt;vvv^vv\n&amp;gt;v&amp;lt;&amp;lt;v^&amp;gt;&amp;lt;v&amp;lt;^^&amp;gt;&amp;lt;^v^&amp;lt;&amp;lt;&amp;lt;&amp;gt;^&amp;lt;&amp;lt;vvvv^^^v&amp;lt;&amp;lt;v&amp;gt;vv&amp;gt;^&amp;gt;&amp;gt;^&amp;lt;&amp;gt;\n^^^^&amp;lt;^&amp;lt;&amp;gt;^^vvv&amp;gt;v^&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;lt;^&amp;lt;&amp;lt;v&amp;gt;^&amp;lt;&amp;lt;v&amp;gt;&amp;gt;&amp;gt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;&amp;lt;^^&amp;gt;vv&amp;gt;\n&amp;lt;^&amp;lt;^&amp;lt;&amp;gt;vvv^v&amp;gt;&amp;lt;&amp;lt;&amp;lt;vvv&amp;lt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;^&amp;lt;&amp;lt;&amp;lt;^vvv&amp;gt;^&amp;lt;&amp;lt;&amp;lt;^vv&amp;gt;v^&amp;gt;&amp;lt;^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;p&gt;Longest cycle: &lt;code&gt;44&lt;/code&gt;&lt;br/&gt;\nPosition:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;                    &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;^\n                    ^&amp;lt;\n                     ^\n                    &amp;gt;^\n                    ^\n                   &amp;gt;^\n                   ^\n                &amp;gt;&amp;gt;&amp;gt;^\n                ^\n                ^&amp;lt;\n                 ^\n                 ^\n                 ^\n                &amp;gt;^\n                ^\n                ^\n                ^  v&amp;lt;&amp;lt;\n                ^&amp;lt;&amp;lt;&amp;lt; ^\n                     ^&amp;lt;&amp;lt;\n                       ^&amp;lt;&amp;lt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;If you&amp;#39;re a discrete mathematician or know of graph theory, you could try treating the grid as a directed graph and use a cycle finding algorithm on it. If not, try and come up with your own algorithm. &lt;a href=\"http://jsfiddle.net/Quackmatic/s976w08c/2/\"&gt;I wrote a tool for you to generate random inputs&lt;/a&gt;. If you find (or make) a cool loop in an input, post it here!&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Notice how the path length will always be an even number if the arrows do not wrap around? Try to explain why. Food for thought.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2m82yz/20141114_challenge_188_hard_arrows_and_arrows/",
        "title": "[2014-11-14] Challenge #188 [Hard] Arrows and Arrows, part 1",
        "difficulty": "Hard"
    },
    {
        "selfText": "# Problem description\n\nLet's consider a simple search engine: one that searches over a large list of short, pithy sayings. It can take a 5+ letter string as an input, and it returns any sayings that contain that sequence (ignoring whitespace and punctuation). For example:\n\n     Search: jacka\n    Matches: Jack and Jill went up the hill to fetch a pail of water.\n            All work and no play makes Jack a dull boy.\n            The Manchester United Junior Athletic Club (MUJAC) karate team was super good at kicking.\n\n     Search: layma\n    Matches: All work and no play makes Jack a dull boy.\n            The MUJAC playmaker actually kinda sucked at karate.\n\n\nTypically, a search engine does not provide an easy way to simply search \"everything\", especially if it is a private service. Having people get access to all your data generally devalues the usefulness of only showing small bits of it (as a search engine does). \n\nWe are going to force this (hypothetical) search engine to give us all of its results, by coming up with just the right inputs such that every one of its sayings is output at least once by all those searches. We will also be minimizing the number of searches we do, so we don't \"overload\" the search engine.\n\n# Formal input/output\n\nThe input will be a (possibly very long) list of short sayings, one per line. Each has at least 5 letters.\n\nThe output must be a list of 5+ letter search queries. Each saying in the input must match at least one of the output queries. Minimize the number of queries you output.\n\n# Sample input\n\n    Jack and Jill went up the hill to fetch a pail of water.\n    All work and no play makes Jack and Jill a dull couple.\n    The Manchester United Junior Athletic Club (MUJAC) karate team was super good at kicking.\n    The MUJAC playmaker actually kinda sucked at karate.\n\n# Sample output\n\n    layma\n    jacka\n\nThere are multiple possible valid outputs. For example, this is another solution:\n\n    djill\n    mujac\n\nAlso, while this is technically a valid solution, it is *not* an optimal one, since it does not have the minimum possible (in this case, 2) search queries:\n\n    jacka\n    allwo\n    thema\n    themu\n\n# Challenge input\n\nUse this file of 3877 one-line UNIX fortunes: https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/common/oneliners.txt\n\n# Notes\n\nThis is a hard problem not just via its tag here on /r/dailyprogrammer; it's in a [class of problems](https://en.wikipedia.org/wiki/NP-completeness#NP-complete_problems) that is generally known to computer scientists to be difficult to find efficient solutions to. I picked a \"5+ letter\" limit on the outputs since it makes brute-forcing hard: 26^5 = 11,881,376 different combinations, checked against 3,877 lines each is 46 billion comparisons. That serves as a very big challenge. If you would like to make it easier while developing, you could turn the 5 character limit down to fewer -- reducing the number of possible outputs. Good luck!\n\n# Lastly...\n\nGot your own idea for a super hard problem? Drop by /r/dailyprogrammer_ideas and share it with everyone!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Problem description&lt;/h1&gt;\n\n&lt;p&gt;Let&amp;#39;s consider a simple search engine: one that searches over a large list of short, pithy sayings. It can take a 5+ letter string as an input, and it returns any sayings that contain that sequence (ignoring whitespace and punctuation). For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; Search: jacka\nMatches: Jack and Jill went up the hill to fetch a pail of water.\n        All work and no play makes Jack a dull boy.\n        The Manchester United Junior Athletic Club (MUJAC) karate team was super good at kicking.\n\n Search: layma\nMatches: All work and no play makes Jack a dull boy.\n        The MUJAC playmaker actually kinda sucked at karate.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Typically, a search engine does not provide an easy way to simply search &amp;quot;everything&amp;quot;, especially if it is a private service. Having people get access to all your data generally devalues the usefulness of only showing small bits of it (as a search engine does). &lt;/p&gt;\n\n&lt;p&gt;We are going to force this (hypothetical) search engine to give us all of its results, by coming up with just the right inputs such that every one of its sayings is output at least once by all those searches. We will also be minimizing the number of searches we do, so we don&amp;#39;t &amp;quot;overload&amp;quot; the search engine.&lt;/p&gt;\n\n&lt;h1&gt;Formal input/output&lt;/h1&gt;\n\n&lt;p&gt;The input will be a (possibly very long) list of short sayings, one per line. Each has at least 5 letters.&lt;/p&gt;\n\n&lt;p&gt;The output must be a list of 5+ letter search queries. Each saying in the input must match at least one of the output queries. Minimize the number of queries you output.&lt;/p&gt;\n\n&lt;h1&gt;Sample input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;Jack and Jill went up the hill to fetch a pail of water.\nAll work and no play makes Jack and Jill a dull couple.\nThe Manchester United Junior Athletic Club (MUJAC) karate team was super good at kicking.\nThe MUJAC playmaker actually kinda sucked at karate.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;layma\njacka\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are multiple possible valid outputs. For example, this is another solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;djill\nmujac\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, while this is technically a valid solution, it is &lt;em&gt;not&lt;/em&gt; an optimal one, since it does not have the minimum possible (in this case, 2) search queries:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;jacka\nallwo\nthema\nthemu\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge input&lt;/h1&gt;\n\n&lt;p&gt;Use this file of 3877 one-line UNIX fortunes: &lt;a href=\"https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/common/oneliners.txt\"&gt;https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/common/oneliners.txt&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;This is a hard problem not just via its tag here on &lt;a href=\"/r/dailyprogrammer\"&gt;/r/dailyprogrammer&lt;/a&gt;; it&amp;#39;s in a &lt;a href=\"https://en.wikipedia.org/wiki/NP-completeness#NP-complete_problems\"&gt;class of problems&lt;/a&gt; that is generally known to computer scientists to be difficult to find efficient solutions to. I picked a &amp;quot;5+ letter&amp;quot; limit on the outputs since it makes brute-forcing hard: 26&lt;sup&gt;5&lt;/sup&gt; = 11,881,376 different combinations, checked against 3,877 lines each is 46 billion comparisons. That serves as a very big challenge. If you would like to make it easier while developing, you could turn the 5 character limit down to fewer -- reducing the number of possible outputs. Good luck!&lt;/p&gt;\n\n&lt;h1&gt;Lastly...&lt;/h1&gt;\n\n&lt;p&gt;Got your own idea for a super hard problem? Drop by &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and share it with everyone!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/47o4b6/20160226_challenge_255_hard_hacking_a_search/",
        "title": "[2016-02-26] Challenge #255 [Hard] Hacking a search engine",
        "difficulty": "Hard"
    },
    {
        "selfText": "Hello Dailyprogrammers. \n\n\nThere has been some talk amongst moderators about our Challenge tags. These tags are the [Easy] [Intermediate] and [Hard]. As tradition holds we try to post challenges that fit these tags. The challenges progress from easy to hard across the week.\n\n\nAs many of you might have seen sometimes we might post a \"easy\" and it seems \"intermediate\" or we might do a \"hard\" that comes across \"easy\".\n\n\nThe idea is instead of trying to develop challenges based on difficulty which is very subjective and different from person to person and instead just post 3 challenges a week and let programmers decide for themselves.\n\n\nThoughts? Ideas? Should we continue the tradition of 2+ years of easy, intermediate, hard or try a different approach?\n\n**EDIT - Update 7-2-2013**\n\nSo going forward we will continue to tag the Challenges Easy/Intermediate/Hard. \n\n\nYou might see on Fridays an \"Easy\" or \"Intermediate\" one in place of \"Hard\". \"Hard\" Challenges can be tough to develop while there are many easy/intermediate ones to be done.\n\n\nThank you all for your feedback!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello Dailyprogrammers. &lt;/p&gt;\n\n&lt;p&gt;There has been some talk amongst moderators about our Challenge tags. These tags are the [Easy] [Intermediate] and [Hard]. As tradition holds we try to post challenges that fit these tags. The challenges progress from easy to hard across the week.&lt;/p&gt;\n\n&lt;p&gt;As many of you might have seen sometimes we might post a &amp;quot;easy&amp;quot; and it seems &amp;quot;intermediate&amp;quot; or we might do a &amp;quot;hard&amp;quot; that comes across &amp;quot;easy&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;The idea is instead of trying to develop challenges based on difficulty which is very subjective and different from person to person and instead just post 3 challenges a week and let programmers decide for themselves.&lt;/p&gt;\n\n&lt;p&gt;Thoughts? Ideas? Should we continue the tradition of 2+ years of easy, intermediate, hard or try a different approach?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT - Update 7-2-2013&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So going forward we will continue to tag the Challenges Easy/Intermediate/Hard. &lt;/p&gt;\n\n&lt;p&gt;You might see on Fridays an &amp;quot;Easy&amp;quot; or &amp;quot;Intermediate&amp;quot; one in place of &amp;quot;Hard&amp;quot;. &amp;quot;Hard&amp;quot; Challenges can be tough to develop while there are many easy/intermediate ones to be done.&lt;/p&gt;\n\n&lt;p&gt;Thank you all for your feedback!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/28kl7b/discussion_challenge_tags_easy_intermediate_hard/",
        "title": "[Discussion] Challenge tags [Easy] [Intermediate] [Hard]",
        "difficulty": "Hard"
    },
    {
        "selfText": "\n\nToday we're going to try something a little bit different. \n\nYou're are going to be given a file with 50,000 lines of text in it. 49,997 of those lines are going to be gibberish, but 3 lines are going to be part of a famous poem. Your task today is to find those three lines. \n\nA few notes: \n\n * All text in the file is lower-case\n * All lines contain nothing but alphabetic characters, spaces, and a few pieces of punctuation\n * The lines of poetry are written in English\n * The three lines of the poem is in the file in the right order, but split up with lines of gibberish.\n\n#Formal inputs &amp;amp; outputs\n\n##Input\n\nThe input for this challenge is [this](https://gist.githubusercontent.com/anonymous/c8fb349e9ae4fcb40cb5/raw/05a1ef03626057e1b57b5bbdddc4c2373ce4b465/challenge.txt) aforementioned file. Download it and use it as input for your problems. \n\n##Output\n\nThe three lines of the poem, in the right order. \n\nNote that it might be the case that you reduce the number of possible lines to some very low number (say, 10-20 lines), after which you can easily use visual inspection to find the right lines. This is an acceptable way to solve the problem, but I *highly encourage* you to try and find a way to print only the correct lines. \n\nOh, and by the way: if you happen to figure out what the right lines are exactly, either from visual inspection, reading it in a comment here (if you do solve the problem and wish to post the output, please indent the output with four space so as to hide the text as a spoiler), or any other way, you are not allowed to just put in a search function in your code for the correct words. That's cheating :). You have to figure out a way to do it \"legitimately\", and write the code pretending you have no idea what the lines are supposed to be. \n\n#Notes\n\nIf you have a suggestion for a problem, please head to /r/dailyprogrammer_ideas and suggest it! \n\nMuch thanks today to /u/adrian17 for some comments on the design of the problem on IRC. By the way, did you know we have an IRC channel where you can go to chat with other dailyprogrammers and get help on problems you are struggling with? It's on irc.freenode.net in the channel #reddit-dailyprogrammer. Why don't you stop by if you have a chance?\n\nOn another note: I was unsure how to classify this problem, whether it is hard enough for the [Hard] difficulty. I would much appreciate feedback on whether you guys think this is an appropriate challenge for [Hard] and whether it was a good challenge in general. Be honest but gentle :) \n\nThanks!\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Today we&amp;#39;re going to try something a little bit different. &lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;re are going to be given a file with 50,000 lines of text in it. 49,997 of those lines are going to be gibberish, but 3 lines are going to be part of a famous poem. Your task today is to find those three lines. &lt;/p&gt;\n\n&lt;p&gt;A few notes: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All text in the file is lower-case&lt;/li&gt;\n&lt;li&gt;All lines contain nothing but alphabetic characters, spaces, and a few pieces of punctuation&lt;/li&gt;\n&lt;li&gt;The lines of poetry are written in English&lt;/li&gt;\n&lt;li&gt;The three lines of the poem is in the file in the right order, but split up with lines of gibberish.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Formal inputs &amp;amp; outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;p&gt;The input for this challenge is &lt;a href=\"https://gist.githubusercontent.com/anonymous/c8fb349e9ae4fcb40cb5/raw/05a1ef03626057e1b57b5bbdddc4c2373ce4b465/challenge.txt\"&gt;this&lt;/a&gt; aforementioned file. Download it and use it as input for your problems. &lt;/p&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;p&gt;The three lines of the poem, in the right order. &lt;/p&gt;\n\n&lt;p&gt;Note that it might be the case that you reduce the number of possible lines to some very low number (say, 10-20 lines), after which you can easily use visual inspection to find the right lines. This is an acceptable way to solve the problem, but I &lt;em&gt;highly encourage&lt;/em&gt; you to try and find a way to print only the correct lines. &lt;/p&gt;\n\n&lt;p&gt;Oh, and by the way: if you happen to figure out what the right lines are exactly, either from visual inspection, reading it in a comment here (if you do solve the problem and wish to post the output, please indent the output with four space so as to hide the text as a spoiler), or any other way, you are not allowed to just put in a search function in your code for the correct words. That&amp;#39;s cheating :). You have to figure out a way to do it &amp;quot;legitimately&amp;quot;, and write the code pretending you have no idea what the lines are supposed to be. &lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;If you have a suggestion for a problem, please head to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and suggest it! &lt;/p&gt;\n\n&lt;p&gt;Much thanks today to &lt;a href=\"/u/adrian17\"&gt;/u/adrian17&lt;/a&gt; for some comments on the design of the problem on IRC. By the way, did you know we have an IRC channel where you can go to chat with other dailyprogrammers and get help on problems you are struggling with? It&amp;#39;s on irc.freenode.net in the channel #reddit-dailyprogrammer. Why don&amp;#39;t you stop by if you have a chance?&lt;/p&gt;\n\n&lt;p&gt;On another note: I was unsure how to classify this problem, whether it is hard enough for the [Hard] difficulty. I would much appreciate feedback on whether you guys think this is an appropriate challenge for [Hard] and whether it was a good challenge in general. Be honest but gentle :) &lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/3bzipa/20150703_challenge_221_hard_poetry_in_a_haystack/",
        "title": "[2015-07-03] Challenge #221 [Hard] Poetry in a haystack",
        "difficulty": "Hard"
    },
    {
        "selfText": "\nAcross the land the people whisper \"Beware the Wumpus. For it slumbers in the cave up yonder in the hills. Only the brave seek him.\"  \n\n\nThis challenge will be about implementing a simple rogue like game. You will create a game engine that will accept simple commands from the user. You will parse the commands and process them. You will score the moves with a point system. The goal of the player is to score the most points with 1 life. The cave will be a randomly generated N sized cave. \n\n#Design:\n\n##Cave Creation:\n\nOn running the game the user picks the size of the cave by entering a number N. This creates a cave NxN in size. N must be 10 to 20 in size.\n\nThe cave has rooms that scale with the size of the cave. The location of these rooms are picked randomly and the amount of each type is fixed on single number or percentage of how many rooms in the cave.\n\n**Entrance**: Only 1 of the rooms must be an entrance/exit point. This is where the player controlled hero spawns and can choose to leave the cave to end it.\n\n\n**Wumpus**: 15% of the rooms must spawn a Wumpus. (A monster your hero seeks to slay). So if you have 100 rooms, 15 of them will spawn a Wumpus.\n\n**Pit Trap**: 5% of the rooms must be a pit trap. If you walk into this room you fall to your doom. (And the game is over)\n\n**Gold**: 15% of the rooms must have a gold to loot. \n\n**Weapon**: 15% of the rooms must have a weapon on the ground for the player to pick up to use for slaying monsters.\n\n**Empty**: The remainder of rooms not assigned one of the above will be empty.\n\n\n##Game Engine:\n\nThe game engine is an endless loop. It will display to the user basic info for the game and prompt for a single letter command. It will parse the command then refresh the basic info and continue to prompt for a move. \n\n**How the Game Ends:**\n\n* The hero leaves the cave by the entrance. \n* The hero dies by moving into a pit trap room.\n* The hero dies by moving into a room with a Wumpus without having picked up a weapon.\n* The player chooses X to hard exit out of the game right of way.\n\n***\nThe player scores points. The higher the points the better they do at the game. The following is the point system.\n\n**Point system:**\n\n* Explore an empty room not visited before: 1 point\n* Find and Pickup a weapon: 5 points\n* Find and kill a Wumpus: 10 points\n* Find and loot gold: 5 points\n\n***\n\n**Game Commands:**\n\nWhen prompted the following commands can be entered and causes an action for the player:\n(Note: Case insensitive -- uppercase shown for easy to read)\n\n* ? -- help to show this list of moves a player can make\n* N  -- move north 1 space - cannot move north if the cave ends (outside of grid)\n* S  -- move south 1 space - cannot move south if the cave ends (outside of grid)\n* E  -- move east 1 space - cannot move east if the cave ends (outside of grid)\n* W -- moves west 1 space - cannot move west if the cave ends (outside of grid)\n* L -- loot either gold or weapon in the room\n* R -- run out of the cave entrance and head to the local inn to share your tale\n* X -- this is a hard exit out of the game. The game ends with no points awarded.\n\n##Environment Changes:\n\nAs the game progresses the cave changes based on the actions.\n\n* Once a weapon is picked up all other weapon rooms turn into gold rooms.\n\n* Entering a Wumpus room with a weapon that has been picked up instantly slays the Wumpus and turns that room into an empty explored room (only points for kill the Wumpus are given not points for exploring an empty room as well)\n\n* Picking up a weapon/gold will turn that room into an empty explored room (only points for the items and not for exploring an empty room)\n\n\n##Understanding Walls &amp; Environment:\n\nThere are walls surrounding your cave. So for example if you pick N to be 10 you will have a 10x10 cave. But really the cave is 12x12 with the Border of the Cave being Walls. You cannot go in a direction that would put you into a wall. (This is not a game for mining) Trying to move into a wall will display an error describing how you bump into a wall or such and continue then to redisplay the current room you are in and prompt for another command.\n\n\nAs you move in the cave you will be given hints to nearby dangers (see below on output). If to the n, s, e, w of your position you are next ta Wumpus you will \"Detect a Foul Stench in the Air\". If to the n, s, e, w of your position you are next to a pit trap you will \"Hear a howling wind\".\n\n\nThere are no clues to being near an empty room, gold or weapons. \n\n\n#Input &amp; Output:\n\n##Start of Game:\neither pass the N size of the cave as a start up value, you can prompt for it, you can hard code it. Whatever you like but somehow you must set the N value of the cave.\n\n##Status:\n\nThe program will give status to the user in the following format\n\n\n\n(Ascii Display of surrounding rooms)\n\n(Description of Room you are in)\n\n(Environment Clues/Description)\n\n[x Points Earned] You are (Weaponless/Armed).\n\nEnter Move (? for help) &gt;\n\n**Ascii Display**\n\n\nYou will show the 8 rooms surrounding you. Use the following ASCII values to represent rooms as such.\n\n* @ - the hero in the middle of the 9 rooms (8 surrounding and the one in the middle which you occupy)\n* ? - unexplored room that could be empty, weapon, gold, wumpus or a pit trap\n* . - explored/empty room\n* # - wall showing the boundary of the cave\n* ^ - Entrance to the cave where you can run out\n* W - weapon in an explored weapon room that you did not bother to loot which would be odd. You can't beat a Wumpus Unarmed.\n* $ - gold in an explored gold room that you did not bother to loot. Not looting this means you did not understand the goal of the game.\n\nExamples:\n\nYou are in the upper left corner of the cave.\n\n    ###\n    #@?\n    #.?\n\nJust left the entrance and started to explore. Hey why did you leave that gold there?\n\n    ^??\n    .@$\n    .??\n\nYou are not having luck finding anything right now\n\n    ###\n    .@.\n    ...\n\n**Description of Room:**\n\n\n\nExamples of how you might describe the rooms. Feel free to customize to your liking or humor. \n\n\nEntrance Room -- you see see the entrance here. You wish to run away?\n\nEmpty Room -- you see nothing which is something\n\nPit trap -- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhh noooooooooooooooooo *Splat*\n\nWumpus Room -- Overwhelmed in Stench a Wumpus stands before you ready to eat you.\n\nGold Room - before you lies the the gold of adventure seekers who feed a Wumpus Recently\n\nWeapon Room - Cast before you in a rock a sword awaits to be looted and name yourself King.\n\n\n**Environmental Clues/Description:**\n\n\nThis is giving you clues to nearby threats as well as describing any battles if you enter a room with a Wumpus and you are armed.\n\nIf next to a pit room you see a message like \"Howling Winds Fill the Room\"\nIf next to a Wumpus room you see a message like \"A fowl Stench fills the room\"\nIf you enter a room with a wumpus you describe if you kill it or you get eaten based on if you have a weapon or not.\nIf you enter a pit trap room - have fun describing how one falls before showing the game over.\n\n\n***\n\nSo putting it all together you might see these screen shots\n\n    ###\n    #@?\n    #.?\n    Empty Room - there is nothing here but air.\n    You hear howling winds.\n    [10 points earned] You are weaponless.\n    Enter Move (? for help) &gt;\n\n\n    ###\n    .@.\n    ...\n    Empty Room - there is nothing here but air.\n    [23 points earned] You are armed and dangerous.\n    Enter Move (? for help) &gt;\n\n\n##End of Game Message:\n\nWhen the game ends due to the conditions display why the game is over. Say the game is over and show the final points.\n\n\nExamples: \n\nSay you find a wumpus unarmed.\n\n\n    A Wumpus attacks you and makes you his lunch.\n    ***GAME OVER***\n    You scored 24 Points!\n\nSay you find that pit trap:\n\n    You fall to your death. Your screams are heard by no one.\n    ***GAME OVER***\n    You scored 1 whole point!\n\nSay you exit out of the dungeon\n\n\n    You exit the Wumpus cave and run to town. People buy you ales as you tell the story of your adventure.\n    ***GAME OVER***\n    You scored 120 points! Well Played!\n\n\n\n\n#**Notes:**\n\nI have done what I can to layout the challenge with a very large design requirement. There will be potential for holes or missing elements in the design or things I perhaps did not address in the design. Please find a suitable solution that fits your desire and implementation and consider this part of the challenge. However if you wish to ask questions about the design or point out obvious things missing from the design, please comment and I can make adjustments.\n\n\nBe creative. There are lots of strings for feedback or descriptions. Come up with your own or perhaps find a way to do random strings to keep the game fresh and unique. Add other features or monsters or whatever. This design for the challenge is much like the pirate code - it is just a bunch of guidelines for you to bend to your need and liking.\n\n\nRemember to add Error messages. If you loot an empty cave or move to a direction towards a wall you must display what happens and then either redisplay the whole status or just the prompt for a move. Up to you to decide.\n\n\nThis hard challenges builds on skills learned in doing easy and intermediate challenges. The difficulty comes from following a larger design than normal and putting it all together to make a very fun game. Have fun and enjoy the challenge!\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;Across the land the people whisper &amp;quot;Beware the Wumpus. For it slumbers in the cave up yonder in the hills. Only the brave seek him.&amp;quot;  &lt;/p&gt;\n\n&lt;p&gt;This challenge will be about implementing a simple rogue like game. You will create a game engine that will accept simple commands from the user. You will parse the commands and process them. You will score the moves with a point system. The goal of the player is to score the most points with 1 life. The cave will be a randomly generated N sized cave. &lt;/p&gt;\n\n&lt;h1&gt;Design:&lt;/h1&gt;\n\n&lt;h2&gt;Cave Creation:&lt;/h2&gt;\n\n&lt;p&gt;On running the game the user picks the size of the cave by entering a number N. This creates a cave NxN in size. N must be 10 to 20 in size.&lt;/p&gt;\n\n&lt;p&gt;The cave has rooms that scale with the size of the cave. The location of these rooms are picked randomly and the amount of each type is fixed on single number or percentage of how many rooms in the cave.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Entrance&lt;/strong&gt;: Only 1 of the rooms must be an entrance/exit point. This is where the player controlled hero spawns and can choose to leave the cave to end it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Wumpus&lt;/strong&gt;: 15% of the rooms must spawn a Wumpus. (A monster your hero seeks to slay). So if you have 100 rooms, 15 of them will spawn a Wumpus.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Pit Trap&lt;/strong&gt;: 5% of the rooms must be a pit trap. If you walk into this room you fall to your doom. (And the game is over)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Gold&lt;/strong&gt;: 15% of the rooms must have a gold to loot. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Weapon&lt;/strong&gt;: 15% of the rooms must have a weapon on the ground for the player to pick up to use for slaying monsters.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Empty&lt;/strong&gt;: The remainder of rooms not assigned one of the above will be empty.&lt;/p&gt;\n\n&lt;h2&gt;Game Engine:&lt;/h2&gt;\n\n&lt;p&gt;The game engine is an endless loop. It will display to the user basic info for the game and prompt for a single letter command. It will parse the command then refresh the basic info and continue to prompt for a move. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How the Game Ends:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The hero leaves the cave by the entrance. &lt;/li&gt;\n&lt;li&gt;The hero dies by moving into a pit trap room.&lt;/li&gt;\n&lt;li&gt;The hero dies by moving into a room with a Wumpus without having picked up a weapon.&lt;/li&gt;\n&lt;li&gt;The player chooses X to hard exit out of the game right of way.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;The player scores points. The higher the points the better they do at the game. The following is the point system.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Point system:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Explore an empty room not visited before: 1 point&lt;/li&gt;\n&lt;li&gt;Find and Pickup a weapon: 5 points&lt;/li&gt;\n&lt;li&gt;Find and kill a Wumpus: 10 points&lt;/li&gt;\n&lt;li&gt;Find and loot gold: 5 points&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;&lt;strong&gt;Game Commands:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When prompted the following commands can be entered and causes an action for the player:\n(Note: Case insensitive -- uppercase shown for easy to read)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;? -- help to show this list of moves a player can make&lt;/li&gt;\n&lt;li&gt;N  -- move north 1 space - cannot move north if the cave ends (outside of grid)&lt;/li&gt;\n&lt;li&gt;S  -- move south 1 space - cannot move south if the cave ends (outside of grid)&lt;/li&gt;\n&lt;li&gt;E  -- move east 1 space - cannot move east if the cave ends (outside of grid)&lt;/li&gt;\n&lt;li&gt;W -- moves west 1 space - cannot move west if the cave ends (outside of grid)&lt;/li&gt;\n&lt;li&gt;L -- loot either gold or weapon in the room&lt;/li&gt;\n&lt;li&gt;R -- run out of the cave entrance and head to the local inn to share your tale&lt;/li&gt;\n&lt;li&gt;X -- this is a hard exit out of the game. The game ends with no points awarded.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Environment Changes:&lt;/h2&gt;\n\n&lt;p&gt;As the game progresses the cave changes based on the actions.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Once a weapon is picked up all other weapon rooms turn into gold rooms.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Entering a Wumpus room with a weapon that has been picked up instantly slays the Wumpus and turns that room into an empty explored room (only points for kill the Wumpus are given not points for exploring an empty room as well)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Picking up a weapon/gold will turn that room into an empty explored room (only points for the items and not for exploring an empty room)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Understanding Walls &amp;amp; Environment:&lt;/h2&gt;\n\n&lt;p&gt;There are walls surrounding your cave. So for example if you pick N to be 10 you will have a 10x10 cave. But really the cave is 12x12 with the Border of the Cave being Walls. You cannot go in a direction that would put you into a wall. (This is not a game for mining) Trying to move into a wall will display an error describing how you bump into a wall or such and continue then to redisplay the current room you are in and prompt for another command.&lt;/p&gt;\n\n&lt;p&gt;As you move in the cave you will be given hints to nearby dangers (see below on output). If to the n, s, e, w of your position you are next ta Wumpus you will &amp;quot;Detect a Foul Stench in the Air&amp;quot;. If to the n, s, e, w of your position you are next to a pit trap you will &amp;quot;Hear a howling wind&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;There are no clues to being near an empty room, gold or weapons. &lt;/p&gt;\n\n&lt;h1&gt;Input &amp;amp; Output:&lt;/h1&gt;\n\n&lt;h2&gt;Start of Game:&lt;/h2&gt;\n\n&lt;p&gt;either pass the N size of the cave as a start up value, you can prompt for it, you can hard code it. Whatever you like but somehow you must set the N value of the cave.&lt;/p&gt;\n\n&lt;h2&gt;Status:&lt;/h2&gt;\n\n&lt;p&gt;The program will give status to the user in the following format&lt;/p&gt;\n\n&lt;p&gt;(Ascii Display of surrounding rooms)&lt;/p&gt;\n\n&lt;p&gt;(Description of Room you are in)&lt;/p&gt;\n\n&lt;p&gt;(Environment Clues/Description)&lt;/p&gt;\n\n&lt;p&gt;[x Points Earned] You are (Weaponless/Armed).&lt;/p&gt;\n\n&lt;p&gt;Enter Move (? for help) &amp;gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Ascii Display&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You will show the 8 rooms surrounding you. Use the following ASCII values to represent rooms as such.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;@ - the hero in the middle of the 9 rooms (8 surrounding and the one in the middle which you occupy)&lt;/li&gt;\n&lt;li&gt;? - unexplored room that could be empty, weapon, gold, wumpus or a pit trap&lt;/li&gt;\n&lt;li&gt;. - explored/empty room&lt;/li&gt;\n&lt;li&gt;# - wall showing the boundary of the cave&lt;/li&gt;\n&lt;li&gt;^ - Entrance to the cave where you can run out&lt;/li&gt;\n&lt;li&gt;W - weapon in an explored weapon room that you did not bother to loot which would be odd. You can&amp;#39;t beat a Wumpus Unarmed.&lt;/li&gt;\n&lt;li&gt;$ - gold in an explored gold room that you did not bother to loot. Not looting this means you did not understand the goal of the game.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;p&gt;You are in the upper left corner of the cave.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;###\n#@?\n#.?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just left the entrance and started to explore. Hey why did you leave that gold there?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;^??\n.@$\n.??\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You are not having luck finding anything right now&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;###\n.@.\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Description of Room:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Examples of how you might describe the rooms. Feel free to customize to your liking or humor. &lt;/p&gt;\n\n&lt;p&gt;Entrance Room -- you see see the entrance here. You wish to run away?&lt;/p&gt;\n\n&lt;p&gt;Empty Room -- you see nothing which is something&lt;/p&gt;\n\n&lt;p&gt;Pit trap -- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhh noooooooooooooooooo &lt;em&gt;Splat&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Wumpus Room -- Overwhelmed in Stench a Wumpus stands before you ready to eat you.&lt;/p&gt;\n\n&lt;p&gt;Gold Room - before you lies the the gold of adventure seekers who feed a Wumpus Recently&lt;/p&gt;\n\n&lt;p&gt;Weapon Room - Cast before you in a rock a sword awaits to be looted and name yourself King.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Environmental Clues/Description:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This is giving you clues to nearby threats as well as describing any battles if you enter a room with a Wumpus and you are armed.&lt;/p&gt;\n\n&lt;p&gt;If next to a pit room you see a message like &amp;quot;Howling Winds Fill the Room&amp;quot;\nIf next to a Wumpus room you see a message like &amp;quot;A fowl Stench fills the room&amp;quot;\nIf you enter a room with a wumpus you describe if you kill it or you get eaten based on if you have a weapon or not.\nIf you enter a pit trap room - have fun describing how one falls before showing the game over.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;So putting it all together you might see these screen shots&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;###\n#@?\n#.?\nEmpty Room - there is nothing here but air.\nYou hear howling winds.\n[10 points earned] You are weaponless.\nEnter Move (? for help) &amp;gt;\n\n\n###\n.@.\n...\nEmpty Room - there is nothing here but air.\n[23 points earned] You are armed and dangerous.\nEnter Move (? for help) &amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;End of Game Message:&lt;/h2&gt;\n\n&lt;p&gt;When the game ends due to the conditions display why the game is over. Say the game is over and show the final points.&lt;/p&gt;\n\n&lt;p&gt;Examples: &lt;/p&gt;\n\n&lt;p&gt;Say you find a wumpus unarmed.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A Wumpus attacks you and makes you his lunch.\n***GAME OVER***\nYou scored 24 Points!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Say you find that pit trap:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;You fall to your death. Your screams are heard by no one.\n***GAME OVER***\nYou scored 1 whole point!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Say you exit out of the dungeon&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;You exit the Wumpus cave and run to town. People buy you ales as you tell the story of your adventure.\n***GAME OVER***\nYou scored 120 points! Well Played!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;I have done what I can to layout the challenge with a very large design requirement. There will be potential for holes or missing elements in the design or things I perhaps did not address in the design. Please find a suitable solution that fits your desire and implementation and consider this part of the challenge. However if you wish to ask questions about the design or point out obvious things missing from the design, please comment and I can make adjustments.&lt;/p&gt;\n\n&lt;p&gt;Be creative. There are lots of strings for feedback or descriptions. Come up with your own or perhaps find a way to do random strings to keep the game fresh and unique. Add other features or monsters or whatever. This design for the challenge is much like the pirate code - it is just a bunch of guidelines for you to bend to your need and liking.&lt;/p&gt;\n\n&lt;p&gt;Remember to add Error messages. If you loot an empty cave or move to a direction towards a wall you must display what happens and then either redisplay the whole status or just the prompt for a move. Up to you to decide.&lt;/p&gt;\n\n&lt;p&gt;This hard challenges builds on skills learned in doing easy and intermediate challenges. The difficulty comes from following a larger design than normal and putting it all together to make a very fun game. Have fun and enjoy the challenge!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/21kqjq/4282014_challenge_154_hard_wumpus_cave_game/",
        "title": "[4/28/2014] Challenge #154 [Hard] Wumpus Cave Game",
        "difficulty": "Hard"
    },
    {
        "selfText": "In most cases, humans use a decimal system. Scientists have suggested that this way to count things has been defined by our hands with 5 fingers each (total of 10 fingers). When the computer was developed, the binary system was implemented because of the two options that electricity allows (current or no current). Today, we’ll throw practical sensibilities in the garbage and define a system to write all the integers that is based on operators and the static natural number sequence (integers 0 or higher).  Call it NOS (Natural Operator Sequence) base.\n\n#Rules\n\n1. Each digit in a number represents one of 3 operators: -  `0: +` `1: -` `2: *`\n2. The length of the number (count of digits) limits the natural number sequence used.  A 4 digit number means the operators are inserted into the sequence `0 _ 1 _ 2 _ 3 _ 4`\n3. Operators are inserted left to right, and there are no special precedence rules for `*` multiplication.\n3. The encoding used should use the fewest number of digits/operators possible:\n\nPossible encodings of the number `10` are:\n\n0000 = 0 + 1 + 2 + 3 + 4   \n0220 = 0 + 1 * 2 * 3 + 4  \n02212 = 0 + 1 * 2 * 3 - 4 * 5  \n\nOnly the first 2 representations satisfy the 4th rule of being the shortest possible:\n\n**optional 5th rule:**  As a tie break for \"correct representation\" use the representation with the most `0`s (representing +), and optionally if still tied, use the representation that would sort first.  ex:  first above `0000` representation of 10 has the most `0`'s.  These tie breakers are arbitrary, and you may use any tie breaking scheme you want.\n\nThe number 2 can be represented as either `02` or `20`.  By optional last rule, `02` is the \"correct\"  representation.\n\n#1 easy: read NOS base numbers (optional)\n\n**input**:  \n10020  \n\n**output**:  \n21  \n\n# 2 hard:  Find the shortest NOS representation of a decimal number\n\n**input**:  \n21  \n\n**output**:  \n10020  \n\nFind the shortest NOS representations for numbers up to say 50.\n\n# Philosophy bonus:\n\nSpeculate optimistically regarding interesting or practical features of using operators and a known sequence as a base system, or... merciless denigrate the optimistic fools that may dare propose thoughts.\n\n# thanks to:\n\n/u/jedidreyfus and /u/cheers- for the challenge idea they posted to /r/dailyprogrammer_ideas   \n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In most cases, humans use a decimal system. Scientists have suggested that this way to count things has been defined by our hands with 5 fingers each (total of 10 fingers). When the computer was developed, the binary system was implemented because of the two options that electricity allows (current or no current). Today, we’ll throw practical sensibilities in the garbage and define a system to write all the integers that is based on operators and the static natural number sequence (integers 0 or higher).  Call it NOS (Natural Operator Sequence) base.&lt;/p&gt;\n\n&lt;h1&gt;Rules&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Each digit in a number represents one of 3 operators: -  &lt;code&gt;0: +&lt;/code&gt; &lt;code&gt;1: -&lt;/code&gt; &lt;code&gt;2: *&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;The length of the number (count of digits) limits the natural number sequence used.  A 4 digit number means the operators are inserted into the sequence &lt;code&gt;0 _ 1 _ 2 _ 3 _ 4&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Operators are inserted left to right, and there are no special precedence rules for &lt;code&gt;*&lt;/code&gt; multiplication.&lt;/li&gt;\n&lt;li&gt;The encoding used should use the fewest number of digits/operators possible:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Possible encodings of the number &lt;code&gt;10&lt;/code&gt; are:&lt;/p&gt;\n\n&lt;p&gt;0000 = 0 + 1 + 2 + 3 + 4&lt;br/&gt;\n0220 = 0 + 1 * 2 * 3 + 4&lt;br/&gt;\n02212 = 0 + 1 * 2 * 3 - 4 * 5  &lt;/p&gt;\n\n&lt;p&gt;Only the first 2 representations satisfy the 4th rule of being the shortest possible:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;optional 5th rule:&lt;/strong&gt;  As a tie break for &amp;quot;correct representation&amp;quot; use the representation with the most &lt;code&gt;0&lt;/code&gt;s (representing +), and optionally if still tied, use the representation that would sort first.  ex:  first above &lt;code&gt;0000&lt;/code&gt; representation of 10 has the most &lt;code&gt;0&lt;/code&gt;&amp;#39;s.  These tie breakers are arbitrary, and you may use any tie breaking scheme you want.&lt;/p&gt;\n\n&lt;p&gt;The number 2 can be represented as either &lt;code&gt;02&lt;/code&gt; or &lt;code&gt;20&lt;/code&gt;.  By optional last rule, &lt;code&gt;02&lt;/code&gt; is the &amp;quot;correct&amp;quot;  representation.&lt;/p&gt;\n\n&lt;h1&gt;1 easy: read NOS base numbers (optional)&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt;:&lt;br/&gt;\n10020  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;:&lt;br/&gt;\n21  &lt;/p&gt;\n\n&lt;h1&gt;2 hard:  Find the shortest NOS representation of a decimal number&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt;:&lt;br/&gt;\n21  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;:&lt;br/&gt;\n10020  &lt;/p&gt;\n\n&lt;p&gt;Find the shortest NOS representations for numbers up to say 50.&lt;/p&gt;\n\n&lt;h1&gt;Philosophy bonus:&lt;/h1&gt;\n\n&lt;p&gt;Speculate optimistically regarding interesting or practical features of using operators and a known sequence as a base system, or... merciless denigrate the optimistic fools that may dare propose thoughts.&lt;/p&gt;\n\n&lt;h1&gt;thanks to:&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"/u/jedidreyfus\"&gt;/u/jedidreyfus&lt;/a&gt; and &lt;a href=\"/u/cheers-\"&gt;/u/cheers-&lt;/a&gt; for the challenge idea they posted to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;   &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/4bwibm/20160325_challenge_259_hard_operator_number_system/",
        "title": "[2016-03-25] Challenge #259 [Hard] Operator number system",
        "difficulty": "Hard"
    },
    {
        "selfText": "\n\nIn this challenge you will come up with an algorithm to solve the classic game of [Minesweeper](http://minesweeperonline.com/).\nThe brute force approach is impractical since the search space size is anywhere around 10^20 to 10^100 depending on the situation, you'll have to come up with something clever.\n\n#Formal Inputs &amp; Outputs\n\n##Input description\n\nThe current field state where each character represents one field. Flags will not be used. \nHidden/unknown fields are denoted with a '?'.   \n'Zero-fields' with no mines around are denoted with a space.\n\nExample for a 9x9 board:\n\n        1????\n        1????\n        111??\n          1??\n    1211  1??\n    ???21 1??\n    ????211??\n    ?????????\n    ?????????\n\n##Output description\n\nA list of zero-based row and column coordinates for the fields that you have determined to be **SAFE**. For the above input example this would be:\n\n    0 5\n    1 6\n    1 7\n    2 7\n    3 7\n    5 1\n    5 7\n    6 2\n    6 7\n\nThe list does not need to be ordered.\n\n\n##Challenge input\n\nAs suggested by /u/wutaki, this input is a greater challenge then the original input\n\n\n    ??????\n    ???2??\n    ???4??\n    ?2??2?\n    ?2222?\n    ?1  1?\n\n#Notes/Hints\n\nIf you have no idea where to start I suggest you play the game for a while and try to formalize your strategy.\n\nMinesweeper is a game of both logic and luck. [Sometimes it is impossible](http://i.imgur.com/yLhxzrl.jpg) to find free fields through logic. The right output would then be an empty list. Your algorithm does not need to guess.\n\n#Bonus\n\nExtra hard mode: Make a closed-loop bot. It should take a screenshot, parse the board state from the pixels, run the algorithm and manipulate the cursor to execute the clicks.\n\n*Note: If this idea is selected for submission I'll be able to provide lots of input/output examples using my own solution.*\n\n#Finally\n\nHave a good challenge idea like /u/janismac did?\n\nConsider submitting it to /r/dailyprogrammer_ideas",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;In this challenge you will come up with an algorithm to solve the classic game of &lt;a href=\"http://minesweeperonline.com/\"&gt;Minesweeper&lt;/a&gt;.\nThe brute force approach is impractical since the search space size is anywhere around 10&lt;sup&gt;20&lt;/sup&gt; to 10&lt;sup&gt;100&lt;/sup&gt; depending on the situation, you&amp;#39;ll have to come up with something clever.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;The current field state where each character represents one field. Flags will not be used. \nHidden/unknown fields are denoted with a &amp;#39;?&amp;#39;.&lt;br/&gt;\n&amp;#39;Zero-fields&amp;#39; with no mines around are denoted with a space.&lt;/p&gt;\n\n&lt;p&gt;Example for a 9x9 board:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    1????\n    1????\n    111??\n      1??\n1211  1??\n???21 1??\n????211??\n?????????\n?????????\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;A list of zero-based row and column coordinates for the fields that you have determined to be &lt;strong&gt;SAFE&lt;/strong&gt;. For the above input example this would be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0 5\n1 6\n1 7\n2 7\n3 7\n5 1\n5 7\n6 2\n6 7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The list does not need to be ordered.&lt;/p&gt;\n\n&lt;h2&gt;Challenge input&lt;/h2&gt;\n\n&lt;p&gt;As suggested by &lt;a href=\"/u/wutaki\"&gt;/u/wutaki&lt;/a&gt;, this input is a greater challenge then the original input&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;??????\n???2??\n???4??\n?2??2?\n?2222?\n?1  1?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;If you have no idea where to start I suggest you play the game for a while and try to formalize your strategy.&lt;/p&gt;\n\n&lt;p&gt;Minesweeper is a game of both logic and luck. &lt;a href=\"http://i.imgur.com/yLhxzrl.jpg\"&gt;Sometimes it is impossible&lt;/a&gt; to find free fields through logic. The right output would then be an empty list. Your algorithm does not need to guess.&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Extra hard mode: Make a closed-loop bot. It should take a screenshot, parse the board state from the pixels, run the algorithm and manipulate the cursor to execute the clicks.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Note: If this idea is selected for submission I&amp;#39;ll be able to provide lots of input/output examples using my own solution.&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea like &lt;a href=\"/u/janismac\"&gt;/u/janismac&lt;/a&gt; did?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/50s3ax/20160902_challenge_281_hard_minesweeper_solver/",
        "title": "[2016-09-02] Challenge #281 [Hard] Minesweeper Solver",
        "difficulty": "Hard"
    },
    {
        "selfText": " Intersecting Rectangles\n\nComputing the area of a [single rectangle](http://i.imgur.com/0W5Oiav.png) is extremely simple: width multiplied by height.  \nComputing the area of two rectangles is a little more challenging. They can either be separate and thus have their areas calculated individually, [like this](http://i.imgur.com/IefYcFj.png). They can also intersect, in which case you calculate their individual areas, and subtract the area of the intersection, [like this](http://i.imgur.com/6GzHGrh.png).  \nOnce you get to 3 rectangles, there are multiple possibilities: [no intersections](http://i.imgur.com/Ja2TUMv.png), [one intersection of two rectangles](http://i.imgur.com/OgYPfxG.png), [two intersections of two rectangles](http://i.imgur.com/orCodUz.png), [or one intersection of three rectangles (plus three intersections of just two rectangles)](http://i.imgur.com/xW1E588.png).  \nObviously at that point it becomes impractical to account for each situation individually but it might be possible. But what about 4 rectangles? 5 rectangles? **N** rectangles?\n\nYour challenge is, given any number of rectangles and their position/dimensions, find the area of the resultant overlapping (combined) shape.\n\n# Formal Inputs and Outputs\n\n## Input Description\n\nOn the console, you will be given a number **N** - this will represent how many rectangles you will receive. You will then be given co-ordinates describing opposite corners of **N** rectangles, in the form:\n\n    x1 y1 x2 y2\n    \nWhere the rectangle's opposite corners are the co-ordinates (x1, y1) and (x2, y2).  \nNote that the corners given will be the top-left and bottom-right co-ordinates, in that order. Assume top-left is (0, 0).\n\n## Output Description\n\nYou must print out the area (as a number) of the compound shape given. No units are necessary.\n\n# Sample Inputs &amp; Outputs\n\n## Sample Input\n\n(representing [this situation](http://i.imgur.com/l2xVFOi.png))\n\n\t3\n\t0 1 3 3\n\t2 2 6 4\n\t1 0 3 5\n\n## Sample Output\n\n\t18\n\n# Challenge\n\n## Challenge Input\n\n\t18\n\t1.6 1.2 7.9 3.1\n\t1.2 1.6 3.4 7.2\n\t2.6 11.6 6.8 14.0\n\t9.6 1.2 11.4 7.5\n\t9.6 1.7 14.1 2.8\n\t12.8 2.7 14.0 7.9\n\t2.3 8.8 2.6 13.4\n\t1.9 4.4 7.2 5.4\n\t10.1 6.9 12.9 7.6\n\t6.0 10.0 7.8 12.3\n\t9.4 9.3 10.9 12.6\n\t1.9 9.7 7.5 10.5\n\t9.4 4.9 13.5 5.9\n\t10.6 9.8 13.4 11.0\n\t9.6 12.3 14.5 12.8\n\t1.5 6.8 8.0 8.0\n\t6.3 4.7 7.7 7.0\n\t13.0 10.9 14.0 14.5\n\t\n## Challenge Output (hidden by default)\n\n[89.48](/spoiler)\n\t\n# Notes\n\nThinking of each shape individually will only make this challenge harder. Try grouping intersecting shapes up, or calculating the area of regions of the shape at a time.  \nAllocating occupied points in a 2-D array would be the easy way out of doing this - however, this falls short when you have large shapes, or the points are not integer values. Try to come up with another way of doing it.\n\nBecause this a particularly challenging task, We'll be awarding medals to anyone who can submit a novel solution without using the above method.",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#HardIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Hard)&lt;/em&gt;: Intersecting Rectangles&lt;/h1&gt;\n\n&lt;p&gt;Computing the area of a &lt;a href=\"http://i.imgur.com/0W5Oiav.png\"&gt;single rectangle&lt;/a&gt; is extremely simple: width multiplied by height.&lt;br/&gt;\nComputing the area of two rectangles is a little more challenging. They can either be separate and thus have their areas calculated individually, &lt;a href=\"http://i.imgur.com/IefYcFj.png\"&gt;like this&lt;/a&gt;. They can also intersect, in which case you calculate their individual areas, and subtract the area of the intersection, &lt;a href=\"http://i.imgur.com/6GzHGrh.png\"&gt;like this&lt;/a&gt;.&lt;br/&gt;\nOnce you get to 3 rectangles, there are multiple possibilities: &lt;a href=\"http://i.imgur.com/Ja2TUMv.png\"&gt;no intersections&lt;/a&gt;, &lt;a href=\"http://i.imgur.com/OgYPfxG.png\"&gt;one intersection of two rectangles&lt;/a&gt;, &lt;a href=\"http://i.imgur.com/orCodUz.png\"&gt;two intersections of two rectangles&lt;/a&gt;, &lt;a href=\"http://i.imgur.com/xW1E588.png\"&gt;or one intersection of three rectangles (plus three intersections of just two rectangles)&lt;/a&gt;.&lt;br/&gt;\nObviously at that point it becomes impractical to account for each situation individually but it might be possible. But what about 4 rectangles? 5 rectangles? &lt;strong&gt;N&lt;/strong&gt; rectangles?&lt;/p&gt;\n\n&lt;p&gt;Your challenge is, given any number of rectangles and their position/dimensions, find the area of the resultant overlapping (combined) shape.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On the console, you will be given a number &lt;strong&gt;N&lt;/strong&gt; - this will represent how many rectangles you will receive. You will then be given co-ordinates describing opposite corners of &lt;strong&gt;N&lt;/strong&gt; rectangles, in the form:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;x1 y1 x2 y2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where the rectangle&amp;#39;s opposite corners are the co-ordinates (x1, y1) and (x2, y2).&lt;br/&gt;\nNote that the corners given will be the top-left and bottom-right co-ordinates, in that order. Assume top-left is (0, 0).&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You must print out the area (as a number) of the compound shape given. No units are necessary.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;(representing &lt;a href=\"http://i.imgur.com/l2xVFOi.png\"&gt;this situation&lt;/a&gt;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;3\n0 1 3 3\n2 2 6 4\n1 0 3 5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;18\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;h2&gt;Challenge Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;18\n1.6 1.2 7.9 3.1\n1.2 1.6 3.4 7.2\n2.6 11.6 6.8 14.0\n9.6 1.2 11.4 7.5\n9.6 1.7 14.1 2.8\n12.8 2.7 14.0 7.9\n2.3 8.8 2.6 13.4\n1.9 4.4 7.2 5.4\n10.1 6.9 12.9 7.6\n6.0 10.0 7.8 12.3\n9.4 9.3 10.9 12.6\n1.9 9.7 7.5 10.5\n9.4 4.9 13.5 5.9\n10.6 9.8 13.4 11.0\n9.6 12.3 14.5 12.8\n1.5 6.8 8.0 8.0\n6.3 4.7 7.7 7.0\n13.0 10.9 14.0 14.5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Challenge Output (hidden by default)&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=\"/spoiler\"&gt;89.48&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;Thinking of each shape individually will only make this challenge harder. Try grouping intersecting shapes up, or calculating the area of regions of the shape at a time.&lt;br/&gt;\nAllocating occupied points in a 2-D array would be the easy way out of doing this - however, this falls short when you have large shapes, or the points are not integer values. Try to come up with another way of doing it.&lt;/p&gt;\n\n&lt;p&gt;Because this a particularly challenging task, We&amp;#39;ll be awarding medals to anyone who can submit a novel solution without using the above method.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/23b1pr/4182014_challenge_158_hard_intersecting_rectangles/",
        "title": "[4/18/2014] Challenge #158 [Hard] Intersecting Rectangles",
        "difficulty": "Hard"
    },
    {
        "selfText": " Substitution Cryptanalysis\n\nA [substitution cipher](https://en.wikipedia.org/?title=Substitution_cipher) is one where each letter in the alphabet is substituted for another letter. It's like a Caesar shift cipher, but where every letter is ciphered independently. For example, look at the two rows below.\n\n    abcdefghijklmnopqrstuvwxyz\n    YOJHZKNEALPBRMCQDVGUSITFXW\n\nTo encode something, find the letter on the top row, and swap it with the letter on the bottom row - and vice versa. For example, the plaintext:\n\n    hello world\n\nBecomes:\n\n    EZBBC TCVBH\n\nNow, how would you go about decrypting something like this? Let's take another example, with a different key.\n\n    IAL FTNHPL PDDI DR RDNP WF IUD\n\nYou're also given the following hints: `A` is ciphered to `H` and `O` is ciphered to `D`. You know the text was in English, so you could plausibly use a word list to rule out impossible decrypted texts - for example, in the third words `PDDI`, there is a double-O in the middle, so the first letter rules out P being the letter Q, as Q is always followed by a U.\n\nYour challenge is to decrypt a cipher-text into a list of possible original texts using a few letters of the substitution key, and whichever means you have at your disposal.\n\n# Formal Inputs and Outputs\n\n## Input Description\n\nOn the first line of input you will be given the ciphertext. Then, you're given a number **N**. Finally, on the next **N** lines, you're given pairs of letters, which are pieces of the key. For example, to represent our situation above:\n\n    IAL FTNHPL PDDI DR RDNP WF IUD\n    2\n    aH\n    oD\n\nNothing is case-sensitive. You may assume all plain-texts are in English. Punctuation is preserved, including spaces.\n\n## Output Description\n\nOutput a list of possible plain-texts. Sometimes this may only be one, if your input is specific enough. In this case:\n\n    the square root of four is two\n\nYou don't need to output the entire substitution key. In fact, it may not even be possible to do so, if the original text isn't a pangram.\n\n# Sample Inputs and Outputs\n\n## Sample 1\n\n### Input\n\n    LBH'ER ABG PBBXVAT CBEX PUBC FNAQJVPURF\n    2\n    rE\n    wJ\n\n### Output\n\n    you're not cooking pork chop sandwiches\n    you're nob cooking pork chop sandwiches\n\nObviously we can guess which output is valid.\n\n## Sample 2\n\n### Input\n\nThis case will check your word list validator.\n\n    ABCDEF\n    2\n    aC\n    zF\n\n### Output\n\n    quartz\n\n## Sample 3\n\n### Input\n\n    WRKZ DG ZRDG D AOX'Z VQVX\n    2\n    wW\n    sG\n\n### Output\n\n    what is this i don't even\n    whet is this i can't ulun\n\n(what's a ulun? I need a better word list!)\n\n## Sample 4\n\n### Input\n\n    JNOH MALAJJGJ SLNOGQ JSOGX\n    1\n    sX\n\n### Output\n\n    long parallel ironed lines\n\n# Notes\n\nThere's a handy word-list [here](https://gist.githubusercontent.com/Quackmatic/512736d51d84277594f2/raw/words) or you could check out [this thread](/r/dailyprogrammer/comments/2nluof/) talking about word lists.\n\nYou could also *in*validate words, rather than just validating them - check out [this list of impossible two-letter combinations](http://linguistics.stackexchange.com/questions/4082/impossible-bigrams-in-the-english-language). If you're using multiple systems, perhaps you could use a weighted scoring system to find the correct decrypted text.\n\nThere's an [example solver](http://quipqiup.com/) for this type of challenge, which will try to solve it, but it has a really weird word-list and ignores punctuation so it may not be awfully useful.\n\nGot any cool challenge ideas? Post them to /r/DailyProgrammer_Ideas!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#HardIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Hard)&lt;/em&gt;: Substitution Cryptanalysis&lt;/h1&gt;\n\n&lt;p&gt;A &lt;a href=\"https://en.wikipedia.org/?title=Substitution_cipher\"&gt;substitution cipher&lt;/a&gt; is one where each letter in the alphabet is substituted for another letter. It&amp;#39;s like a Caesar shift cipher, but where every letter is ciphered independently. For example, look at the two rows below.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;abcdefghijklmnopqrstuvwxyz\nYOJHZKNEALPBRMCQDVGUSITFXW\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To encode something, find the letter on the top row, and swap it with the letter on the bottom row - and vice versa. For example, the plaintext:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;hello world\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Becomes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;EZBBC TCVBH\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, how would you go about decrypting something like this? Let&amp;#39;s take another example, with a different key.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;IAL FTNHPL PDDI DR RDNP WF IUD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&amp;#39;re also given the following hints: &lt;code&gt;A&lt;/code&gt; is ciphered to &lt;code&gt;H&lt;/code&gt; and &lt;code&gt;O&lt;/code&gt; is ciphered to &lt;code&gt;D&lt;/code&gt;. You know the text was in English, so you could plausibly use a word list to rule out impossible decrypted texts - for example, in the third words &lt;code&gt;PDDI&lt;/code&gt;, there is a double-O in the middle, so the first letter rules out P being the letter Q, as Q is always followed by a U.&lt;/p&gt;\n\n&lt;p&gt;Your challenge is to decrypt a cipher-text into a list of possible original texts using a few letters of the substitution key, and whichever means you have at your disposal.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;On the first line of input you will be given the ciphertext. Then, you&amp;#39;re given a number &lt;strong&gt;N&lt;/strong&gt;. Finally, on the next &lt;strong&gt;N&lt;/strong&gt; lines, you&amp;#39;re given pairs of letters, which are pieces of the key. For example, to represent our situation above:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;IAL FTNHPL PDDI DR RDNP WF IUD\n2\naH\noD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Nothing is case-sensitive. You may assume all plain-texts are in English. Punctuation is preserved, including spaces.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Output a list of possible plain-texts. Sometimes this may only be one, if your input is specific enough. In this case:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;the square root of four is two\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You don&amp;#39;t need to output the entire substitution key. In fact, it may not even be possible to do so, if the original text isn&amp;#39;t a pangram.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample 1&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;LBH&amp;#39;ER ABG PBBXVAT CBEX PUBC FNAQJVPURF\n2\nrE\nwJ\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;you&amp;#39;re not cooking pork chop sandwiches\nyou&amp;#39;re nob cooking pork chop sandwiches\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Obviously we can guess which output is valid.&lt;/p&gt;\n\n&lt;h2&gt;Sample 2&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;p&gt;This case will check your word list validator.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ABCDEF\n2\naC\nzF\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;quartz\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample 3&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;WRKZ DG ZRDG D AOX&amp;#39;Z VQVX\n2\nwW\nsG\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;what is this i don&amp;#39;t even\nwhet is this i can&amp;#39;t ulun\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(what&amp;#39;s a ulun? I need a better word list!)&lt;/p&gt;\n\n&lt;h2&gt;Sample 4&lt;/h2&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;JNOH MALAJJGJ SLNOGQ JSOGX\n1\nsX\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;long parallel ironed lines\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;There&amp;#39;s a handy word-list &lt;a href=\"https://gist.githubusercontent.com/Quackmatic/512736d51d84277594f2/raw/words\"&gt;here&lt;/a&gt; or you could check out &lt;a href=\"/r/dailyprogrammer/comments/2nluof/\"&gt;this thread&lt;/a&gt; talking about word lists.&lt;/p&gt;\n\n&lt;p&gt;You could also &lt;em&gt;in&lt;/em&gt;validate words, rather than just validating them - check out &lt;a href=\"http://linguistics.stackexchange.com/questions/4082/impossible-bigrams-in-the-english-language\"&gt;this list of impossible two-letter combinations&lt;/a&gt;. If you&amp;#39;re using multiple systems, perhaps you could use a weighted scoring system to find the correct decrypted text.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s an &lt;a href=\"http://quipqiup.com/\"&gt;example solver&lt;/a&gt; for this type of challenge, which will try to solve it, but it has a really weird word-list and ignores punctuation so it may not be awfully useful.&lt;/p&gt;\n\n&lt;p&gt;Got any cool challenge ideas? Post them to &lt;a href=\"/r/DailyProgrammer_Ideas\"&gt;/r/DailyProgrammer_Ideas&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/3b668g/20150626_challenge_220_hard_substitution/",
        "title": "[2015-06-26] Challenge #220 [Hard] Substitution Cryptanalysis",
        "difficulty": "Hard"
    },
    {
        "selfText": "#Title: Now for Something Upside down\n\n \n\nThe [Easy] Challenge was delayed 1 day to be on April's Fools Day this week so the moderators could attempt to be clever and turn things upside down by making a super easy challenge to decode a message to just have people post hello world programs. The responses to that challenge was interesting.\n\n\nTo show how things got turned upside down this week's [Hard] challenge we are gonna make text appear upside down.\n\n\n#Input:\n\n* 1 to many lines of text to convert\n* You must read it in from standard input or a file. (No fixed strings hard coded into the program with the input)\n* Can handle as input by characters for converting [a-z] [A-Z] [ ] [?!.] [0-9] to upside down characters.\n\n\n##Example:\n\n    This is some text that I am writing!\n    Soon it will be just 4 lines of upside down text.\n    How did they do it? \n    We will all know soon.\n\n\n#Output:\n\nThe text modified to be upside down.\n\n##Example:\n\n\n    ˙uoos ʍouʞ llɐ llᴉʍ ǝM\n     ¿ʇᴉ op ʎǝɥʇ pᴉp ʍoH\n    ˙ʇxǝʇ uʍop ǝpᴉsdn ɟo sǝuᴉl ㄣ ʇsnɾ ǝq llᴉʍ ʇᴉ uooS\n    ¡ƃuᴉʇᴉɹʍ ɯɐ I ʇɐɥʇ ʇxǝʇ ǝɯos sᴉ sᴉɥ┴\n\n#Notes:\n\n\n* As part of the [Hard] challenge we leave it to you to figure out how this is possible.\n* Solutions might limit which languages you can use.\n\n#More Challenges\n\nIn addition to above look into trying these out:\n\n* convert upside down to normal\n* find conversions for $&amp;@';/\\&gt;&lt;+*=_- if any are possible\n* given a word search the text count the word matches. Count how many times the word is normal or upside down\n\n\n## Good single line Test String\n\nThe quick brown fox jumps over the lazy dog.?! 0 1 2 3 4 5 6 7 8 9 ",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Title: Now for Something Upside down&lt;/h1&gt;\n\n&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;The [Easy] Challenge was delayed 1 day to be on April&amp;#39;s Fools Day this week so the moderators could attempt to be clever and turn things upside down by making a super easy challenge to decode a message to just have people post hello world programs. The responses to that challenge was interesting.&lt;/p&gt;\n\n&lt;p&gt;To show how things got turned upside down this week&amp;#39;s [Hard] challenge we are gonna make text appear upside down.&lt;/p&gt;\n\n&lt;h1&gt;Input:&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;1 to many lines of text to convert&lt;/li&gt;\n&lt;li&gt;You must read it in from standard input or a file. (No fixed strings hard coded into the program with the input)&lt;/li&gt;\n&lt;li&gt;Can handle as input by characters for converting [a-z] [A-Z] [ ] [?!.] [0-9] to upside down characters.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example:&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;This is some text that I am writing!\nSoon it will be just 4 lines of upside down text.\nHow did they do it? \nWe will all know soon.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;The text modified to be upside down.&lt;/p&gt;\n\n&lt;h2&gt;Example:&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;˙uoos ʍouʞ llɐ llᴉʍ ǝM\n ¿ʇᴉ op ʎǝɥʇ pᴉp ʍoH\n˙ʇxǝʇ uʍop ǝpᴉsdn ɟo sǝuᴉl ㄣ ʇsnɾ ǝq llᴉʍ ʇᴉ uooS\n¡ƃuᴉʇᴉɹʍ ɯɐ I ʇɐɥʇ ʇxǝʇ ǝɯos sᴉ sᴉɥ┴\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes:&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;As part of the [Hard] challenge we leave it to you to figure out how this is possible.&lt;/li&gt;\n&lt;li&gt;Solutions might limit which languages you can use.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;More Challenges&lt;/h1&gt;\n\n&lt;p&gt;In addition to above look into trying these out:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;convert upside down to normal&lt;/li&gt;\n&lt;li&gt;find conversions for $&amp;amp;@&amp;#39;;/&amp;gt;&amp;lt;+*=_- if any are possible&lt;/li&gt;\n&lt;li&gt;given a word search the text count the word matches. Count how many times the word is normal or upside down&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Good single line Test String&lt;/h2&gt;\n\n&lt;p&gt;The quick brown fox jumps over the lazy dog.?! 0 1 2 3 4 5 6 7 8 9 &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/226zqp/4042014_challenge_156_hard_uʍop_ǝpᴉsd_ƃuᴉɥʇǝɯos/",
        "title": "[4/04/2014] Challenge #156 [Hard] uʍop ǝpᴉsd∩ ƃuᴉɥʇǝɯos ɹoɟ ʍoN",
        "difficulty": "Hard"
    },
    {
        "selfText": "# Description\n\nYou start with an empty grid of size m-by-m. Your goal is to fill it with numbers 1 through 9, so that the total sum of all numbers in the grid is the greatest.\n\n## Rules\n\nThe grid fill rules are as follows:\n\n* All cells must be filled with a number between 1 and 9.\n* You can fill any cell in the grid with \"1\".\n* You can fill any cell in the grid with \"2\", provided that cell is adjacent to a cell containing \"1\".\n* You can fill any cell in the grid with \"3\", provided that cell is both adjacent to a cell containing \"2\", and adjacent to another cell containing \"1\".\n* &amp;lt;snip&amp;gt;\n* You can fill any cell in the grid with \"9\", provided it is adjacent to cells containing 8, 7, 6, 5, 4, 3, 2, and 1.\n* \"Adjacent\" includes diagonals (i.e. in a move's reach of a chess King).\n* There are no limits on how many times you can use each number (except to comply with the above rules), and you are not obliged to use any number.\n* In case multiple optimal solutions (solutions with equally maximum total sums) are possible for a grid of a given size, producing any one is sufficient.\n\n# Formal Inputs and Outputs\n\n## Input\n\nThe input consists of a positive integer representing size \"m\" of an m-by-m grid, e.g.:\n\n    grid(3)\n\n## Output\n\nThe output consists of characters which represent a filled grid as per above rules, with an optimal solution (maximum total sum). The output format is a string of integers representing each row, with rows separated by line breaks (same format as the example solutions given below).\n\nBelow are example outputs for input:\n\n    grid(3)\n\n**Illegal solution:**\n\n    111\n    222\n    333\n\nBecause the bottom \"3\"s must each be adjacent to both a \"2\" and a \"1\", yet they are only adjacent to a \"2\".\n\n**Legal but suboptimal solution:**\n\n    123\n    321\n    123\n\nIn above example, each \"3\" is adjacent to a \"2\" and a \"1\", and each \"2\" is adjacent to a 1. However, the sum of the grid is *18*, which is less than the maximum possible to achieve in a 3x3 grid.\n\n**Legal and optimal solution:**\n\n    424\n    313\n    424\n\nEach 4 is adjacent to a \"3\", \"2\", and \"1\"; each \"3\" is adjacent to a \"2\" and 1\", and each \"2\" is adjacent to a \"1\". The sum of the above grid is *27*, which is a maximum achievable sum in a 3x3 grid.\n\n### Tips\n\n* I rated this problem as [hard], as I'm not personally aware of the computational complexity of an optimal algorithm to this problem, or even an algorithm which can scale to non-trivial grid sizes. \n* A naive brute force algorithm is on the order of c^n (exponential time), and thus is not feasible on normal computers beyond grids of about 4x4 size. \n* Verifying that a given solution is *legal* is possible in linear time. I'm not sure if there is an algorithm to prove a given solution is *optimal* any faster than producing an optimal solution to begin with.\n* If you don't have an algorithm that provides a guaranteed optimal solution (either via brute force, mathematical proof, or some combination thereof), feel free to provide a heuristic/best guess one.\n\n## Bonus\n\nGeneralize this problem to an m-by-n grid. In this case, the input will be two digits \"m\" and \"n\", representing the width and height respectively, and the output would be a filled m-by-n grid. For example, input:\n\n    grid(3,2)\n\nCould produce an optimal solution like:\n\n    313\n    424\n\n# Credit\n\nThis challenge was submitted by /u/GeneReddit123, many thanks! If you have a challenge idea, please share it in /r/dailyprogrammer_ideas and there's a good chance we'll use it.",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You start with an empty grid of size m-by-m. Your goal is to fill it with numbers 1 through 9, so that the total sum of all numbers in the grid is the greatest.&lt;/p&gt;\n\n&lt;h2&gt;Rules&lt;/h2&gt;\n\n&lt;p&gt;The grid fill rules are as follows:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All cells must be filled with a number between 1 and 9.&lt;/li&gt;\n&lt;li&gt;You can fill any cell in the grid with &amp;quot;1&amp;quot;.&lt;/li&gt;\n&lt;li&gt;You can fill any cell in the grid with &amp;quot;2&amp;quot;, provided that cell is adjacent to a cell containing &amp;quot;1&amp;quot;.&lt;/li&gt;\n&lt;li&gt;You can fill any cell in the grid with &amp;quot;3&amp;quot;, provided that cell is both adjacent to a cell containing &amp;quot;2&amp;quot;, and adjacent to another cell containing &amp;quot;1&amp;quot;.&lt;/li&gt;\n&lt;li&gt;&amp;lt;snip&amp;gt;&lt;/li&gt;\n&lt;li&gt;You can fill any cell in the grid with &amp;quot;9&amp;quot;, provided it is adjacent to cells containing 8, 7, 6, 5, 4, 3, 2, and 1.&lt;/li&gt;\n&lt;li&gt;&amp;quot;Adjacent&amp;quot; includes diagonals (i.e. in a move&amp;#39;s reach of a chess King).&lt;/li&gt;\n&lt;li&gt;There are no limits on how many times you can use each number (except to comply with the above rules), and you are not obliged to use any number.&lt;/li&gt;\n&lt;li&gt;In case multiple optimal solutions (solutions with equally maximum total sums) are possible for a grid of a given size, producing any one is sufficient.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;p&gt;The input consists of a positive integer representing size &amp;quot;m&amp;quot; of an m-by-m grid, e.g.:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;grid(3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;p&gt;The output consists of characters which represent a filled grid as per above rules, with an optimal solution (maximum total sum). The output format is a string of integers representing each row, with rows separated by line breaks (same format as the example solutions given below).&lt;/p&gt;\n\n&lt;p&gt;Below are example outputs for input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;grid(3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Illegal solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;111\n222\n333\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because the bottom &amp;quot;3&amp;quot;s must each be adjacent to both a &amp;quot;2&amp;quot; and a &amp;quot;1&amp;quot;, yet they are only adjacent to a &amp;quot;2&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Legal but suboptimal solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;123\n321\n123\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In above example, each &amp;quot;3&amp;quot; is adjacent to a &amp;quot;2&amp;quot; and a &amp;quot;1&amp;quot;, and each &amp;quot;2&amp;quot; is adjacent to a 1. However, the sum of the grid is &lt;em&gt;18&lt;/em&gt;, which is less than the maximum possible to achieve in a 3x3 grid.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Legal and optimal solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;424\n313\n424\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Each 4 is adjacent to a &amp;quot;3&amp;quot;, &amp;quot;2&amp;quot;, and &amp;quot;1&amp;quot;; each &amp;quot;3&amp;quot; is adjacent to a &amp;quot;2&amp;quot; and 1&amp;quot;, and each &amp;quot;2&amp;quot; is adjacent to a &amp;quot;1&amp;quot;. The sum of the above grid is &lt;em&gt;27&lt;/em&gt;, which is a maximum achievable sum in a 3x3 grid.&lt;/p&gt;\n\n&lt;h3&gt;Tips&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I rated this problem as [hard], as I&amp;#39;m not personally aware of the computational complexity of an optimal algorithm to this problem, or even an algorithm which can scale to non-trivial grid sizes. &lt;/li&gt;\n&lt;li&gt;A naive brute force algorithm is on the order of c&lt;sup&gt;n&lt;/sup&gt; (exponential time), and thus is not feasible on normal computers beyond grids of about 4x4 size. &lt;/li&gt;\n&lt;li&gt;Verifying that a given solution is &lt;em&gt;legal&lt;/em&gt; is possible in linear time. I&amp;#39;m not sure if there is an algorithm to prove a given solution is &lt;em&gt;optimal&lt;/em&gt; any faster than producing an optimal solution to begin with.&lt;/li&gt;\n&lt;li&gt;If you don&amp;#39;t have an algorithm that provides a guaranteed optimal solution (either via brute force, mathematical proof, or some combination thereof), feel free to provide a heuristic/best guess one.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Bonus&lt;/h2&gt;\n\n&lt;p&gt;Generalize this problem to an m-by-n grid. In this case, the input will be two digits &amp;quot;m&amp;quot; and &amp;quot;n&amp;quot;, representing the width and height respectively, and the output would be a filled m-by-n grid. For example, input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;grid(3,2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Could produce an optimal solution like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;313\n424\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was submitted by &lt;a href=\"/u/GeneReddit123\"&gt;/u/GeneReddit123&lt;/a&gt;, many thanks! If you have a challenge idea, please share it in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s a good chance we&amp;#39;ll use it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/58n2ca/20161021_challenge_288_hard_adjacent_numbers/",
        "title": "[2016-10-21] Challenge #288 [Hard] Adjacent Numbers problems",
        "difficulty": "Hard"
    },
    {
        "selfText": " Convex Polygon Area\n\nA convex polygon is a geometric polygon (ie. sides are straight edges), where all of the interior angles are less than 180'. For a more rigorous definition of this, see [this page](http://www.mathopenref.com/polygonconvex.html).\n\nThe challenge today is, given the points defining the boundaries of a convex polygon, find the area contained within it. \n    \n## Input Description\n\nFirst you will be given a number, **N**. This is the number of vertices on the convex polygon.  \nNext you will be given the points defining the polygon, in no particular order. The points will be a 2-D location on a flat plane of infinite size. These will always form a convex shape so don't worry about checking that \n\nin your program. These will be in the form `x,y` where `x` and `y` are real numbers.\n    \n## Output Description\n\nPrint the area of the shape.\n\n# Example Inputs and Outputs\n\n## Example Input 1\n\n    5\n    1,1\n    0,2\n    1,4\n    4,3\n    3,2\n\n## Example Output 1\n\n    6.5\n\n## Example Input 2\n\n    7\n    1,2\n    2,4\n    3,5\n    5,5\n    5,3\n    4,2\n    2.5,1.5\n\n## Example Output 2\n\n    9.75\n\n# Challenge\n\n## Challenge Input\n\n    8\n    -4,3\n    1,3\n    2,2\n    2,0\n    1.5,-1\n    0,-2\n    -3,-1\n    -3.5,0\n\n## Challenge Output\n\n    24\n\n# Notes\n\nDividing the shape up into smaller segments, eg. triangles/squares, may be crucial here.\n\n# Extension\n\nI quickly realised this problem could be solved much more trivially than I thought, so complete this too. Extend your program to accept 2 convex shapes as input, and calculate the combined area of the resulting intersected shape, similar to how is described [in this challenge](http://www.reddit.com/r/dailyprogrammer/comments/23b1pr/4182014_challenge_158_hard_intersecting_rectangles/).",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#HardIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Hard)&lt;/em&gt;: Convex Polygon Area&lt;/h1&gt;\n\n&lt;p&gt;A convex polygon is a geometric polygon (ie. sides are straight edges), where all of the interior angles are less than 180&amp;#39;. For a more rigorous definition of this, see &lt;a href=\"http://www.mathopenref.com/polygonconvex.html\"&gt;this page&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The challenge today is, given the points defining the boundaries of a convex polygon, find the area contained within it. &lt;/p&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;First you will be given a number, &lt;strong&gt;N&lt;/strong&gt;. This is the number of vertices on the convex polygon.&lt;br/&gt;\nNext you will be given the points defining the polygon, in no particular order. The points will be a 2-D location on a flat plane of infinite size. These will always form a convex shape so don&amp;#39;t worry about checking that &lt;/p&gt;\n\n&lt;p&gt;in your program. These will be in the form &lt;code&gt;x,y&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are real numbers.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Print the area of the shape.&lt;/p&gt;\n\n&lt;h1&gt;Example Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Example Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;5\n1,1\n0,2\n1,4\n4,3\n3,2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;6.5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;7\n1,2\n2,4\n3,5\n5,5\n5,3\n4,2\n2.5,1.5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;9.75\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;h2&gt;Challenge Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;8\n-4,3\n1,3\n2,2\n2,0\n1.5,-1\n0,-2\n-3,-1\n-3.5,0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Challenge Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;24\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;Dividing the shape up into smaller segments, eg. triangles/squares, may be crucial here.&lt;/p&gt;\n\n&lt;h1&gt;Extension&lt;/h1&gt;\n\n&lt;p&gt;I quickly realised this problem could be solved much more trivially than I thought, so complete this too. Extend your program to accept 2 convex shapes as input, and calculate the combined area of the resulting intersected shape, similar to how is described &lt;a href=\"http://www.reddit.com/r/dailyprogrammer/comments/23b1pr/4182014_challenge_158_hard_intersecting_rectangles/\"&gt;in this challenge&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/29umz8/742014_challenge_169_hard_convex_polygon_area/",
        "title": "[7/4/2014] Challenge #169 [Hard] Convex Polygon Area",
        "difficulty": "Hard"
    },
    {
        "selfText": "\n\nThe study of balance is interesting. Take for example a forest. Forests are very complex eco-systems with lots of things happening. For this challenge we will\nsimulate a virtual forest and watch over simulated time the effects of a forest. We will see trees grow and be harvested. We will see the impact of \nindustry upon the forest and watch as the wild life \"fights\" back.\n\n\nFor this simulated forest we will be dealing with 3 aspects.\n\n\n* Trees which can be a Sapling, Tree or Elder Tree.\n* Lumberjacks (He chops down down trees, he eats his lunch and goes to the Lava-try)\n* Bears (He maws the lumberjacks who smells like pancakes)\n\n##Cycle of time:\n\nThe simulation will simulate by months. You will progessive forward in time with a \"tick\". Each \"tick\" represents a month. Every 12 \"ticks\" represents a year.\nOur forest will change and be in constant change. We will record the progress of our forest and analyze what happens to it.\n\n##Forest:\n\nThe forest will be a two dimensional forest. We will require an input of N to represent the size of the forest in a grid that is N x N in size.\nAt each location you can hold Trees, Bears or Lumberjacks. They can occupy the same spot but often events occur when they occupy the same spot.\n\nOur forest will be spawned randomly based on the size. For example if your value of N = 10. You will have a 10 by 10 forest and 100 spots.\n\n    10% of the Forest will hold a Lumberjack in 10 random spots. (using our 100 spot forest this should be 10 lumberjacks)\n    50% of the Forest will hold Trees (Trees can be one of 3 kinds and will start off as the middle one of \"Tree\") in random spots.\n     2% of the Forest will hold Bears.\n\nHow you get the size of the forest is up to you. Either users enter it in, read it from a file, pass by argument or hard coded. Your choice. But you have\nto spawn the initial forest with the above percentages. I would recommend keeping N like 5 or higher. Small Forests are not much fun.\n\n##Events:\n\nDuring the simulation there will be events. The events occur based on some logic which I will explain below. The events essentially are the spawning of \nnew Trees, Lumberjacks, Bears or the decay of Trees, Lumberjacks and Bears. I will detail the events below in each description of the 3 elements of our forest.\n\n## Trees:\n\nEvery month a Tree has a 10% chance to spawn a new \"Sapling\". In a random open space adjacent to a Tree you have a 10% chance to create a \"Sapling\". \nFor example a Tree in the middle of the forest has 8 other spots around it. One of these if they do not have a type of Tree in it will create a \"Sapling\".\n\n\nAfter 12 months of being in existence a \"Sapling\" will be upgrade to a \"Tree\". A \"Sapling\" cannot spawn other trees until it has matured into a \"Tree\".\n\n\nOnce a \"Sapling\" becomes a tree it can spawn other new \"Saplings\". At this point once a \"Sapling\" matures into a \"Tree\" it exists and matures. When a \"Tree\"\nhas been around for 120 months (10 years) it will become an \"Elder Tree\".\n\n\nElder Trees have a 20% chance to spawn a new \"Sapling\" instead of 10%.\n\nIf there are no open adjacent spots to a Tree or Elder Tree it will not spawn any new Trees.\n\n\n## Lumberjacks:\n\nThey cut down trees, they skip and jump they like to press wild flowers. \n\nLumberjacks each month will wander. They will move up to 3 times to a randomly picked spot that is adjacent in any direction. So for example a Lumberjack in the middle of your grid has\n8 spots to move to. He will wander to a random spot. Then again. And finally for a third time.\n\nWhen the lumberjack moves if he encounters a Tree (not a sapling) he will stop and his wandering for that month comes to an end. \nHe will then harvest the Tree for lumber. Remove the tree. Gain 1 piece of lumber. Lumberjacks will not harvest \"Sapling\". They will harvest an Elder Tree. \nElder Trees are worth 2 pieces of lumber.\n\nEvery 12 months the amount of lumber harvested is compared to the number of lumberjacks in the forest. If the lumber collected equals or exceeds the amount of lumberjacks\nin the forest a new lumberjack is hired and randomly spawned in the forest. Actually a math formula is used to determine if we hire 1 or many lumberjacks. We hire a number\nof new lumberjacks based on lumber gathered. Let us say you have 10 lumberjacks. If you harvest 10-19 pieces of lumber you would hire 1 lumberjack. But if you harvest 20-29\npieces of lumber you would hire 2 lumberjacks. If you harvest 30-39 you would gain 3 lumberjacks. And so forth.\n\nHowever if after a 12 month span the amount of lumber collected is below the number of lumberjacks then a lumberjack is let go to save money and 1 random lumberjack\nis removed from the forest. However you will never reduce your Lumberjack labor force below 0.\n\n## Bears:\n\nThey wander the forest much like a lumberjack. Instead of 3 spaces a Bear will roam up to 5 spaces. If a bear comes across a Lumberjack he will stop his wandering\nfor the month. (For example after 2 moves the bear lands on a space with a lumberjack he will not make any more moves for this month)\n\nLumberjacks smell like pancakes. Bears love pancakes. Therefore the Bear will unfortunately maw and hurt the lumberjack. The lumberjack will be removed from the \nforest (He will go home and shop on wednesdays and have buttered scones for tea).\n\nWe will track this as a \"Maw\" accident. During the course of 12 months if there 0 \"Maw\" accidents then the Bear population will increase by 1. \nIf however there are any \"Maw\" accidents the Lumberjacks will hire a Zoo to trap and take a Bear away. Remove 1 random Bear. Note that if your Bear population reaches\n0 bears then there will be no \"Maw\" accidents in the next year and so you will spawn 1 new Bear next year.\n\nIf there is only 1 lumberjack in the forest and he gets Maw'd. He will be sent home. But a new one will be hired immediately and respawned  somewhere else in the forest.\nThe lumberjack population will not drop below 1.\n\n\n## Time:\n\nThe simulation occurs for 4800 months (400 years). Or until the following condition occur.\n\n* You have 0 Trees left in the forest. So no Saplings, Trees or Elder Trees exist.\n\n\n#Output:\n\nEvery month you will print out a log of spawn or decay events. If nothing happens then nothing is logged.\n\n\nExample:\n\n    Month [0001]: [3] pieces of lumber harvested by Lumberjacks.\n    Month [0001]: [10] new Saplings Created.\n    Month [0002]: [2] pieces of lumber harvested by Lumberjacks.\n    Month [0002]: [9] new Saplings Created.\n    Month [0003]: [1] Lumberjack was Maw'd by a bear.\n\tMonth [0120]: [10] Trees become Elder Trees\n\nEvery year you will print out a log of events for yearly events:\n\n    Year [001]: Forest has 30 Trees, 20 Saplings, 1 Elder Tree, 9 Lumberjacks and 2 Bears.\n\tYear [001]: 1 Bear captured by Zoo.\n\tYear [001]: 9 pieces of lumber harvested 1 new Lumberjack hired.\n\tYear [002]: Forest has 50 Trees, 25 Saplings, 2 Elder Tree, 10 Lumberjacks and 1 Bears.\n\tYear [002]: 1 new Bear added.\n\tYear [003]: Forest has 100 Trees, 99 Saplings, 10 Elder Tree, 1 Lumberjacks, and 0 Bears.\n\tYear [003]: 1 new Bear added.\n\tYear [003]: 3 Pieces of lumber harvested 3 new Lumberjacks hired.\n\t\n\t\n#Optional Output 1:\n\nAt the end of the simulation you can bring out an ASCII graph showing the yearly populations of Bears, Trees, Lumberjacks and open space (BTL Graph)\nI recommend 50 Spots and each spot = 2%. \n\nExample:\n\n    year 1: [BTTTTTTTTTTTTTTTTTTTTLLL______________________]  \n    year 2: [BBTTTTTTTTTTTTTTTTTTTLLLL_____________________]\n    year 3: [BTTTTTTTLLLLLLLL______________________________]\n    year 4: [BBBTTTTTTTTTTTTTTTTTLLLLLLLL__________________]\n\nSo for year 1 we had 2% Bears, 40% Trees (Saplings+Trees+Elder Trees), 6% Lumberjacks and the rest was open space\nEach spot is 2%. We have 50 characters. So 100%. We round \"up\" for figuring out how many to display and just use \"_\" as filler at the end for open space.\n\n#Optional Output 2:\n\nYou can over the course of the simulation output the \"Map\" in ASCII or any other form you wish. Use like \"B\" For bear \"S\" for sapling \"T\" for tree \"E\" for Elder Tree, \"L\" For lumberjack and \".\" for empty.\nSome people can use \"animated\" ascii via like a ncurses library and show in realtime what is happening. (logs go to a file or not shown) Etc. Ultimately be creative\nhere in how you might want to show over time the impact of how the forest is changing.\n\nOr you can just print out the forest every year or every 10 years.\n\n#Ackward events/issues/etc:\n\nWhen bears and lumberjacks roam if the random spot already has a bear or lumberjack in it a new spot is picked. If the 2nd attempt at a spot still has a same kind of element then it will stop roaming for the month. More or less we don't want more than 1 lumberjacks or bears in the same spot.\n\n\nBears can roam into a Tree spot. Nothing happens. If a bear roams into a lumberjack he maws him. If a lumberjack roams into a Bear spot he will get maw'd by the bear. \n\n\n#Spawn/Decay/Removal Rates:\n\nYou might encounter issues with these. Feel free to tweak as needed. The challenge is more a test of design. Picking/playing with and testing these rates is part of design work. It might look good on paper but when tested it might not work without some minor tweaks.",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;The study of balance is interesting. Take for example a forest. Forests are very complex eco-systems with lots of things happening. For this challenge we will\nsimulate a virtual forest and watch over simulated time the effects of a forest. We will see trees grow and be harvested. We will see the impact of \nindustry upon the forest and watch as the wild life &amp;quot;fights&amp;quot; back.&lt;/p&gt;\n\n&lt;p&gt;For this simulated forest we will be dealing with 3 aspects.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Trees which can be a Sapling, Tree or Elder Tree.&lt;/li&gt;\n&lt;li&gt;Lumberjacks (He chops down down trees, he eats his lunch and goes to the Lava-try)&lt;/li&gt;\n&lt;li&gt;Bears (He maws the lumberjacks who smells like pancakes)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Cycle of time:&lt;/h2&gt;\n\n&lt;p&gt;The simulation will simulate by months. You will progessive forward in time with a &amp;quot;tick&amp;quot;. Each &amp;quot;tick&amp;quot; represents a month. Every 12 &amp;quot;ticks&amp;quot; represents a year.\nOur forest will change and be in constant change. We will record the progress of our forest and analyze what happens to it.&lt;/p&gt;\n\n&lt;h2&gt;Forest:&lt;/h2&gt;\n\n&lt;p&gt;The forest will be a two dimensional forest. We will require an input of N to represent the size of the forest in a grid that is N x N in size.\nAt each location you can hold Trees, Bears or Lumberjacks. They can occupy the same spot but often events occur when they occupy the same spot.&lt;/p&gt;\n\n&lt;p&gt;Our forest will be spawned randomly based on the size. For example if your value of N = 10. You will have a 10 by 10 forest and 100 spots.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10% of the Forest will hold a Lumberjack in 10 random spots. (using our 100 spot forest this should be 10 lumberjacks)\n50% of the Forest will hold Trees (Trees can be one of 3 kinds and will start off as the middle one of &amp;quot;Tree&amp;quot;) in random spots.\n 2% of the Forest will hold Bears.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How you get the size of the forest is up to you. Either users enter it in, read it from a file, pass by argument or hard coded. Your choice. But you have\nto spawn the initial forest with the above percentages. I would recommend keeping N like 5 or higher. Small Forests are not much fun.&lt;/p&gt;\n\n&lt;h2&gt;Events:&lt;/h2&gt;\n\n&lt;p&gt;During the simulation there will be events. The events occur based on some logic which I will explain below. The events essentially are the spawning of \nnew Trees, Lumberjacks, Bears or the decay of Trees, Lumberjacks and Bears. I will detail the events below in each description of the 3 elements of our forest.&lt;/p&gt;\n\n&lt;h2&gt;Trees:&lt;/h2&gt;\n\n&lt;p&gt;Every month a Tree has a 10% chance to spawn a new &amp;quot;Sapling&amp;quot;. In a random open space adjacent to a Tree you have a 10% chance to create a &amp;quot;Sapling&amp;quot;. \nFor example a Tree in the middle of the forest has 8 other spots around it. One of these if they do not have a type of Tree in it will create a &amp;quot;Sapling&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;After 12 months of being in existence a &amp;quot;Sapling&amp;quot; will be upgrade to a &amp;quot;Tree&amp;quot;. A &amp;quot;Sapling&amp;quot; cannot spawn other trees until it has matured into a &amp;quot;Tree&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;Once a &amp;quot;Sapling&amp;quot; becomes a tree it can spawn other new &amp;quot;Saplings&amp;quot;. At this point once a &amp;quot;Sapling&amp;quot; matures into a &amp;quot;Tree&amp;quot; it exists and matures. When a &amp;quot;Tree&amp;quot;\nhas been around for 120 months (10 years) it will become an &amp;quot;Elder Tree&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;Elder Trees have a 20% chance to spawn a new &amp;quot;Sapling&amp;quot; instead of 10%.&lt;/p&gt;\n\n&lt;p&gt;If there are no open adjacent spots to a Tree or Elder Tree it will not spawn any new Trees.&lt;/p&gt;\n\n&lt;h2&gt;Lumberjacks:&lt;/h2&gt;\n\n&lt;p&gt;They cut down trees, they skip and jump they like to press wild flowers. &lt;/p&gt;\n\n&lt;p&gt;Lumberjacks each month will wander. They will move up to 3 times to a randomly picked spot that is adjacent in any direction. So for example a Lumberjack in the middle of your grid has\n8 spots to move to. He will wander to a random spot. Then again. And finally for a third time.&lt;/p&gt;\n\n&lt;p&gt;When the lumberjack moves if he encounters a Tree (not a sapling) he will stop and his wandering for that month comes to an end. \nHe will then harvest the Tree for lumber. Remove the tree. Gain 1 piece of lumber. Lumberjacks will not harvest &amp;quot;Sapling&amp;quot;. They will harvest an Elder Tree. \nElder Trees are worth 2 pieces of lumber.&lt;/p&gt;\n\n&lt;p&gt;Every 12 months the amount of lumber harvested is compared to the number of lumberjacks in the forest. If the lumber collected equals or exceeds the amount of lumberjacks\nin the forest a new lumberjack is hired and randomly spawned in the forest. Actually a math formula is used to determine if we hire 1 or many lumberjacks. We hire a number\nof new lumberjacks based on lumber gathered. Let us say you have 10 lumberjacks. If you harvest 10-19 pieces of lumber you would hire 1 lumberjack. But if you harvest 20-29\npieces of lumber you would hire 2 lumberjacks. If you harvest 30-39 you would gain 3 lumberjacks. And so forth.&lt;/p&gt;\n\n&lt;p&gt;However if after a 12 month span the amount of lumber collected is below the number of lumberjacks then a lumberjack is let go to save money and 1 random lumberjack\nis removed from the forest. However you will never reduce your Lumberjack labor force below 0.&lt;/p&gt;\n\n&lt;h2&gt;Bears:&lt;/h2&gt;\n\n&lt;p&gt;They wander the forest much like a lumberjack. Instead of 3 spaces a Bear will roam up to 5 spaces. If a bear comes across a Lumberjack he will stop his wandering\nfor the month. (For example after 2 moves the bear lands on a space with a lumberjack he will not make any more moves for this month)&lt;/p&gt;\n\n&lt;p&gt;Lumberjacks smell like pancakes. Bears love pancakes. Therefore the Bear will unfortunately maw and hurt the lumberjack. The lumberjack will be removed from the \nforest (He will go home and shop on wednesdays and have buttered scones for tea).&lt;/p&gt;\n\n&lt;p&gt;We will track this as a &amp;quot;Maw&amp;quot; accident. During the course of 12 months if there 0 &amp;quot;Maw&amp;quot; accidents then the Bear population will increase by 1. \nIf however there are any &amp;quot;Maw&amp;quot; accidents the Lumberjacks will hire a Zoo to trap and take a Bear away. Remove 1 random Bear. Note that if your Bear population reaches\n0 bears then there will be no &amp;quot;Maw&amp;quot; accidents in the next year and so you will spawn 1 new Bear next year.&lt;/p&gt;\n\n&lt;p&gt;If there is only 1 lumberjack in the forest and he gets Maw&amp;#39;d. He will be sent home. But a new one will be hired immediately and respawned  somewhere else in the forest.\nThe lumberjack population will not drop below 1.&lt;/p&gt;\n\n&lt;h2&gt;Time:&lt;/h2&gt;\n\n&lt;p&gt;The simulation occurs for 4800 months (400 years). Or until the following condition occur.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You have 0 Trees left in the forest. So no Saplings, Trees or Elder Trees exist.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;Every month you will print out a log of spawn or decay events. If nothing happens then nothing is logged.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Month [0001]: [3] pieces of lumber harvested by Lumberjacks.\nMonth [0001]: [10] new Saplings Created.\nMonth [0002]: [2] pieces of lumber harvested by Lumberjacks.\nMonth [0002]: [9] new Saplings Created.\nMonth [0003]: [1] Lumberjack was Maw&amp;#39;d by a bear.\nMonth [0120]: [10] Trees become Elder Trees\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Every year you will print out a log of events for yearly events:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Year [001]: Forest has 30 Trees, 20 Saplings, 1 Elder Tree, 9 Lumberjacks and 2 Bears.\nYear [001]: 1 Bear captured by Zoo.\nYear [001]: 9 pieces of lumber harvested 1 new Lumberjack hired.\nYear [002]: Forest has 50 Trees, 25 Saplings, 2 Elder Tree, 10 Lumberjacks and 1 Bears.\nYear [002]: 1 new Bear added.\nYear [003]: Forest has 100 Trees, 99 Saplings, 10 Elder Tree, 1 Lumberjacks, and 0 Bears.\nYear [003]: 1 new Bear added.\nYear [003]: 3 Pieces of lumber harvested 3 new Lumberjacks hired.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional Output 1:&lt;/h1&gt;\n\n&lt;p&gt;At the end of the simulation you can bring out an ASCII graph showing the yearly populations of Bears, Trees, Lumberjacks and open space (BTL Graph)\nI recommend 50 Spots and each spot = 2%. &lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;year 1: [BTTTTTTTTTTTTTTTTTTTTLLL______________________]  \nyear 2: [BBTTTTTTTTTTTTTTTTTTTLLLL_____________________]\nyear 3: [BTTTTTTTLLLLLLLL______________________________]\nyear 4: [BBBTTTTTTTTTTTTTTTTTLLLLLLLL__________________]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So for year 1 we had 2% Bears, 40% Trees (Saplings+Trees+Elder Trees), 6% Lumberjacks and the rest was open space\nEach spot is 2%. We have 50 characters. So 100%. We round &amp;quot;up&amp;quot; for figuring out how many to display and just use &amp;quot;_&amp;quot; as filler at the end for open space.&lt;/p&gt;\n\n&lt;h1&gt;Optional Output 2:&lt;/h1&gt;\n\n&lt;p&gt;You can over the course of the simulation output the &amp;quot;Map&amp;quot; in ASCII or any other form you wish. Use like &amp;quot;B&amp;quot; For bear &amp;quot;S&amp;quot; for sapling &amp;quot;T&amp;quot; for tree &amp;quot;E&amp;quot; for Elder Tree, &amp;quot;L&amp;quot; For lumberjack and &amp;quot;.&amp;quot; for empty.\nSome people can use &amp;quot;animated&amp;quot; ascii via like a ncurses library and show in realtime what is happening. (logs go to a file or not shown) Etc. Ultimately be creative\nhere in how you might want to show over time the impact of how the forest is changing.&lt;/p&gt;\n\n&lt;p&gt;Or you can just print out the forest every year or every 10 years.&lt;/p&gt;\n\n&lt;h1&gt;Ackward events/issues/etc:&lt;/h1&gt;\n\n&lt;p&gt;When bears and lumberjacks roam if the random spot already has a bear or lumberjack in it a new spot is picked. If the 2nd attempt at a spot still has a same kind of element then it will stop roaming for the month. More or less we don&amp;#39;t want more than 1 lumberjacks or bears in the same spot.&lt;/p&gt;\n\n&lt;p&gt;Bears can roam into a Tree spot. Nothing happens. If a bear roams into a lumberjack he maws him. If a lumberjack roams into a Bear spot he will get maw&amp;#39;d by the bear. &lt;/p&gt;\n\n&lt;h1&gt;Spawn/Decay/Removal Rates:&lt;/h1&gt;\n\n&lt;p&gt;You might encounter issues with these. Feel free to tweak as needed. The challenge is more a test of design. Picking/playing with and testing these rates is part of design work. It might look good on paper but when tested it might not work without some minor tweaks.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/27h53e/662014_challenge_165_hard_simulated_ecology_the/",
        "title": "[6/6/2014] Challenge #165 [Hard] Simulated Ecology - The Forest",
        "difficulty": "Hard"
    },
    {
        "selfText": "# Description\n\nYou have a 4x4 grid containing pieces numbered 1 to 16, of which you choose the order. To move the pieces you swap the positions of 2 pieces (this is not a slider puzzle - there's no open space).  Tiles must be swapped with adjacent tiles. The goal to to solve the puzzle in as few moves as possible, showing all steps. The steps are which 2 pieces swap positions for each move. Pieces could be referred to by their position or their number.\n\n**Input #1**\n\n\n\n4 6 2 14\n\n15 8 13 1\n\n10 5 9 12\n\n7 11 16 3\n\n**the solved puzzle is:**\n\n1 2 3 4\n\n5 6 7 8\n\n9 10 11 12\n\n13 14 15 16\n\nIt may be too hard to guarantee a solution in the fewest possible moves.  You may instead use a strategy that is quick enough, if you want.\n\n# thanks \n\nthanks to /u/purpledesertowl for this idea that was submitted at /r/dailyprogrammer_ideas.",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You have a 4x4 grid containing pieces numbered 1 to 16, of which you choose the order. To move the pieces you swap the positions of 2 pieces (this is not a slider puzzle - there&amp;#39;s no open space).  Tiles must be swapped with adjacent tiles. The goal to to solve the puzzle in as few moves as possible, showing all steps. The steps are which 2 pieces swap positions for each move. Pieces could be referred to by their position or their number.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Input #1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;4 6 2 14&lt;/p&gt;\n\n&lt;p&gt;15 8 13 1&lt;/p&gt;\n\n&lt;p&gt;10 5 9 12&lt;/p&gt;\n\n&lt;p&gt;7 11 16 3&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;the solved puzzle is:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;1 2 3 4&lt;/p&gt;\n\n&lt;p&gt;5 6 7 8&lt;/p&gt;\n\n&lt;p&gt;9 10 11 12&lt;/p&gt;\n\n&lt;p&gt;13 14 15 16&lt;/p&gt;\n\n&lt;p&gt;It may be too hard to guarantee a solution in the fewest possible moves.  You may instead use a strategy that is quick enough, if you want.&lt;/p&gt;\n\n&lt;h1&gt;thanks&lt;/h1&gt;\n\n&lt;p&gt;thanks to &lt;a href=\"/u/purpledesertowl\"&gt;/u/purpledesertowl&lt;/a&gt; for this idea that was submitted at &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/4ey6as/20160415_challenge_262_hard_4x4_puzzle_swapper/",
        "title": "[2016-04-15] Challenge #262 [Hard] 4x4 puzzle swapper",
        "difficulty": "Hard"
    },
    {
        "selfText": "Are you ready to take the [Game of Threes](https://www.reddit.com/r/dailyprogrammer/comments/3rhzdj/20151104_challenge_239_intermediate_a_zerosum/) to the next level? \n\n# Background\n\nAs it turns out, if we chain the steps of a Threes solution into a sequence (ignoring their signs), the sequence becomes a [ternary](https://en.wikipedia.org/wiki/Ternary_numeral_system) representation of numeric data. In other words, we can use base 3 (instead of decimal or binary) to store numbers! \n\nFor example, if we were to use [ASCII character values](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/ASCII-Table-wide.svg/2000px-ASCII-Table-wide.svg.png) as our \"data\", then we could encode the letter `a` into a Threes solution like this:\n\n- `a` is `97` in decimal\n- `97` in base 3 (ternary) is `10121`\n- We can \"reverse\" the Threes process in order to come up with a number that has a threes solution containing the numbers `[1, 0, 1, 2, 1]` in that order.\n  - Start at 1 (where Threes ends)\n  - `1 * 3 + 1` = `4`\n  - `4 * 3 - 2` = `10`\n  - `10 * 3 - 1` = `29`\n  - `29 * 3 + 0` = `87`\n  - `87 * 3 + 1` = `262`\n- A \"Threes-encoded\" `a` is then the number `262`. \n\nNote that at a couple steps, we subtracted instead of adding. Since the sign in the solution is not significant, additions can be flipped for subtractions to achieve different results. That means that `a` could actually be encoded as: `260`, `278`, `386`, `388`, or others. For example, `260` could be decoded like this:\n\n    260 1\n    87 0\n    29 1\n    10 2\n    4 -1\n    1\n\nThat still results in `10121`, in base 10 is `97`, or ASCII `a`. However, there is now the possibility to go wrong in the decoding!\n\n    262 2\n    88 2\n    30 0\n    10 -1\n    3 0\n    1\n    1\n\nThat decoding resulted in `22010`, which is base 10 `219`, or ASCII `Û`. Oops!\n\n# The Problem\n\nNow that we have a way to encode/decode characters into \"Threes\", let's encode words:\n\n- `three` -&amp;gt; `[11022, 10212, 11020, 10202, 10202]` (ternary)\n- Concatenate them all into: `1102210212110201020210202`\n- Encode that string by working Threes backwards so it becomes: `1343814725227`\n\nWhere is this all going? Your mission for this challenge is to take a Threes-encoded English word as input, and output the original, un-encoded word. You may want to use a dictionary file containing a list of valid words. See: [enable1.txt](https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/common/enable1.txt). Since enable1.txt is all lowercase, you should make your word checking case-insensitive (e.g. \"ExtrapOlation\" is a word). Just remember that encoded upper and lower case letters have very different codes.\n\n*Note:* Some encoded numbers have multiple possible word solutions. If you get a slightly different word, that's okay. Alternatively, you could make your solution output *all* possible word solutions!\n\n## Sample Input 1\n\n    1343814725227\n\n## Sample Output 1\n\n    three\n\n## Sample Input 2\n\n    66364005622431677379166556\n\n## Sample Output 2\n\n    Programming\n\n## Challenge Input\n\n    1023141284209081472421723187973153755941662449\n\n# Bonus Points\n\nSolve the problem without using a words file (like \"enable1.txt\"). *Note:* This may or may not be possible; I'm not actually sure. **Update:** The bonus is actually impossible. As [others](https://www.reddit.com/r/dailyprogrammer/comments/3rrtxh/20151106_challenge_239_hard_an_encoding_of_threes/cwqwn5s) and [I](https://www.reddit.com/r/dailyprogrammer/comments/3rrtxh/20151106_challenge_239_hard_an_encoding_of_threes/cwr5cnt) remarked, there are just too many possible solutions/combinations. A dictionary or other language guide is necessary.\n\n# Fluff\n\nThis concludes the Game of Threes series. Since this was my (/u/Blackshell's) first series of posted problems, I would really appreciate feedback on how it went. Thanks for playing!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Are you ready to take the &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/3rhzdj/20151104_challenge_239_intermediate_a_zerosum/\"&gt;Game of Threes&lt;/a&gt; to the next level? &lt;/p&gt;\n\n&lt;h1&gt;Background&lt;/h1&gt;\n\n&lt;p&gt;As it turns out, if we chain the steps of a Threes solution into a sequence (ignoring their signs), the sequence becomes a &lt;a href=\"https://en.wikipedia.org/wiki/Ternary_numeral_system\"&gt;ternary&lt;/a&gt; representation of numeric data. In other words, we can use base 3 (instead of decimal or binary) to store numbers! &lt;/p&gt;\n\n&lt;p&gt;For example, if we were to use &lt;a href=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/ASCII-Table-wide.svg/2000px-ASCII-Table-wide.svg.png\"&gt;ASCII character values&lt;/a&gt; as our &amp;quot;data&amp;quot;, then we could encode the letter &lt;code&gt;a&lt;/code&gt; into a Threes solution like this:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is &lt;code&gt;97&lt;/code&gt; in decimal&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;97&lt;/code&gt; in base 3 (ternary) is &lt;code&gt;10121&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;We can &amp;quot;reverse&amp;quot; the Threes process in order to come up with a number that has a threes solution containing the numbers &lt;code&gt;[1, 0, 1, 2, 1]&lt;/code&gt; in that order.\n\n&lt;ul&gt;\n&lt;li&gt;Start at 1 (where Threes ends)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;1 * 3 + 1&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;4 * 3 - 2&lt;/code&gt; = &lt;code&gt;10&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;10 * 3 - 1&lt;/code&gt; = &lt;code&gt;29&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;29 * 3 + 0&lt;/code&gt; = &lt;code&gt;87&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;87 * 3 + 1&lt;/code&gt; = &lt;code&gt;262&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;A &amp;quot;Threes-encoded&amp;quot; &lt;code&gt;a&lt;/code&gt; is then the number &lt;code&gt;262&lt;/code&gt;. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Note that at a couple steps, we subtracted instead of adding. Since the sign in the solution is not significant, additions can be flipped for subtractions to achieve different results. That means that &lt;code&gt;a&lt;/code&gt; could actually be encoded as: &lt;code&gt;260&lt;/code&gt;, &lt;code&gt;278&lt;/code&gt;, &lt;code&gt;386&lt;/code&gt;, &lt;code&gt;388&lt;/code&gt;, or others. For example, &lt;code&gt;260&lt;/code&gt; could be decoded like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;260 1\n87 0\n29 1\n10 2\n4 -1\n1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That still results in &lt;code&gt;10121&lt;/code&gt;, in base 10 is &lt;code&gt;97&lt;/code&gt;, or ASCII &lt;code&gt;a&lt;/code&gt;. However, there is now the possibility to go wrong in the decoding!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;262 2\n88 2\n30 0\n10 -1\n3 0\n1\n1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That decoding resulted in &lt;code&gt;22010&lt;/code&gt;, which is base 10 &lt;code&gt;219&lt;/code&gt;, or ASCII &lt;code&gt;Û&lt;/code&gt;. Oops!&lt;/p&gt;\n\n&lt;h1&gt;The Problem&lt;/h1&gt;\n\n&lt;p&gt;Now that we have a way to encode/decode characters into &amp;quot;Threes&amp;quot;, let&amp;#39;s encode words:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;three&lt;/code&gt; -&amp;gt; &lt;code&gt;[11022, 10212, 11020, 10202, 10202]&lt;/code&gt; (ternary)&lt;/li&gt;\n&lt;li&gt;Concatenate them all into: &lt;code&gt;1102210212110201020210202&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Encode that string by working Threes backwards so it becomes: &lt;code&gt;1343814725227&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Where is this all going? Your mission for this challenge is to take a Threes-encoded English word as input, and output the original, un-encoded word. You may want to use a dictionary file containing a list of valid words. See: &lt;a href=\"https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/common/enable1.txt\"&gt;enable1.txt&lt;/a&gt;. Since enable1.txt is all lowercase, you should make your word checking case-insensitive (e.g. &amp;quot;ExtrapOlation&amp;quot; is a word). Just remember that encoded upper and lower case letters have very different codes.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Some encoded numbers have multiple possible word solutions. If you get a slightly different word, that&amp;#39;s okay. Alternatively, you could make your solution output &lt;em&gt;all&lt;/em&gt; possible word solutions!&lt;/p&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;1343814725227\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;three\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;66364005622431677379166556\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Programming\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Challenge Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;1023141284209081472421723187973153755941662449\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus Points&lt;/h1&gt;\n\n&lt;p&gt;Solve the problem without using a words file (like &amp;quot;enable1.txt&amp;quot;). &lt;em&gt;Note:&lt;/em&gt; This may or may not be possible; I&amp;#39;m not actually sure. &lt;strong&gt;Update:&lt;/strong&gt; The bonus is actually impossible. As &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/3rrtxh/20151106_challenge_239_hard_an_encoding_of_threes/cwqwn5s\"&gt;others&lt;/a&gt; and &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/3rrtxh/20151106_challenge_239_hard_an_encoding_of_threes/cwr5cnt\"&gt;I&lt;/a&gt; remarked, there are just too many possible solutions/combinations. A dictionary or other language guide is necessary.&lt;/p&gt;\n\n&lt;h1&gt;Fluff&lt;/h1&gt;\n\n&lt;p&gt;This concludes the Game of Threes series. Since this was my (&lt;a href=\"/u/Blackshell\"&gt;/u/Blackshell&lt;/a&gt;&amp;#39;s) first series of posted problems, I would really appreciate feedback on how it went. Thanks for playing!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/3rrtxh/20151106_challenge_239_hard_an_encoding_of_threes/",
        "title": "[2015-11-06] Challenge #239 [Hard] An Encoding of Threes",
        "difficulty": "Hard"
    },
    {
        "selfText": " The Universal Machine\n\nImagine an infinitely long, one-dimensional list of symbols. The list is infinite in both directions, and each symbol is indexed by a number, where the middle of the list is zero. This is called a **tape**. The symbols on the tape can be any symbol from an **alphabet**, which is just a set of possible symbols. If our example alphabet consists of the symbols `0`, `1` and `#`, then a valid tape would look like:\n\n    #0110#10101#111#01##\n    |\n\n(The `|` marks the location of the middle of the tape, position zero.) Of course, we can't represent an infinite tape at once. Therefore, we add another possible symbol to our alphabet, `_` (underscore), to denote the lack of a symbol. This `_` symbol fills the rest of the tape, all the way out to infinity, like so (ellipsis denotes repeat):\n\n\n    . . . _________________#0110#10101#111#01##_________________ . . .\n                           |\n\nNow, imagine we have a **machine** that can look at this tape, but it can only see one symbol on the tape at once. To look at this tape, it has a **read head**. In our tape diagrams, the read head is marked with a caret (`^`). For example, here's the read head at position 7:\n\n    #0110#10101#111#01##\n    |      ^\n\nThis read head can move one symbol to the left or right, but it can't skip ahead arbitrarily or jump to a specific location. Besides the read head, the machine also has a **state**. This is just an alphanumeric string, with no spaces, like a variable of the machine. It could be `Red`, it could be `Clockwise`, it could be `Catch22`, it could be `Tgnqovjaxbg`, as long as it's alphanumeric.\n\nNow, this machine is capable of performing a **step**. A step will change the symbol under the read head to another symbol from the alphabet, and then either move the read head left or right. The type of step that happens depends on the current state, and the current symbol under the read head. We can define a rule for our machine which says something like this:\n\n&gt; If the current symbol under the read head is **p**, and the current state is **A**, then change the state to **B**, change the symbol under the read head to **q** and move the read head in direction **d**.\n\n**p** and **q** can be the same symbol, and **A** and **B** can be the same state. For example:\n\n&gt; If the current symbol under the read head is `0`, and the current state is `State1`, then change the state to `State1`, change the symbol under the read head to `1` and move the read head left.\n\nThis rule is called a **transition function**, and the typical notation is:\n\n    𝛿(A, p) = (B, q, d)\n\nSo our example rule is:\n\n    𝛿(State1, 0) = (State1, 1, &lt;)\n\nSo, if our machine is in the state `State1` and our tape looks like this:\n\n    #0110#10101#111#01##\n    |      ^\n\nThen, after applying our transition function above, we're now in `State1` (again) and the tape now looks like this:\n\n    #0110#11101#111#01##\n    |     ^\n\nYou'll typically have quite a few transition functions to cover every possible state/symbol combination. After each step, the machine compares the new state to a special state known as the **accepting state**. If the current state is the accepting state, then the machine stops, as the computation is complete.\n\nWhew, that's a lot of information! Here's the synopsis of what you need to describe one of these machines:\n\n* The **alphabet**: all possible symbols (along with `_`, which is implicitly part of the alphabet.)\n* The **tape** at the start of the computation.\n* The **starting position** of the read head on the tape; this is assumed to be zero.\n* The **list of possible** states that our machine can be in.\n* The **starting state**, and the **accepting state**.\n* A list of **transition functions**, that cover every possible symbol/state combination on the given tape.\n\nThis type of machine is known as a [**Turing machine**](http://en.wikipedia.org/wiki/Turing_machine), named after the famous groundbreaking computer scientist and mathematician [Alan Turing](http://en.wikipedia.org/wiki/Alan_Turing). It sounds hopelessly verbose in practice, but a Turing machine is insanely useful as a theoretical model for computation. To gloss over quite a few details: if a machine can simulate any such Turing machine as described above, then it's described as **Turing-complete**. Today, you'll be writing a program to simulate a turing machine given the above required parameters; therefore, you'll need to use a Turing-complete language to solve this challenge. :)\n\n# Formal Inputs and Outputs\n\n## Input Description\n\nFirst, you will be given the alphabet of a Turing machine (excluding `_`, which is always part of the alphabet) as a sequence of non-whitespace characters, like so:\n\n    01\n\nNext, you will be given a space-separated list of possible states for the machine, like this:\n\n    Mov B Bi OK\n\nYou will then be given the initial state, and the accepting state, on two lines:\n\n    Mov\n    OK\n\nAfter this, you will be given the initial tape to use. The first character is assumed to be at position 0, with following characters at successive locations (1, 2, 3, etc.), like so:\n\n    01100100\n\nFinally, you're given a list of transition rules. These are in the format `StateBefore SymbolBefore = StateAfter SymbolAfter DirectionToMove`, like this list:\n\n    Mov 0 = Mov 0 &gt;\n    Mov 1 = Mov 1 &gt;\n    Mov _ = B _ &lt;\n    B 0 = B 0 &lt;\n    B 1 = Bi 1 &lt;\n    B _ = OK _ &gt;\n    Bi 0 = Bi 1 &lt;\n    Bi 1 = Bi 0 &lt;\n    Bi _ = OK _ &gt;\n\nThe direction is either `&lt;` for left, or `&gt;` for right.\n\n## Output Description\n\nYou are to output the tape after the computation has finished. You are also to output the symbol `|` (pipe) under the middle of the tape (position zero), and output the symbol `^` (caret) under the position of the read head after the computation has finished. If the `^` and `|` would be in the same place (ie. the read head finishes at the middle of the tape), just print only the `|`.\n\n    10011100\n    |\n\n# Sample Turing Machines\n\n## Machine 1: Two's Complement\n\nThis machine computes the two's complement of the binary number in the input. Notice how the transition functions can use the `_` symbol, even though it's not explicitly part of the alphabet.\n\n### Input\n\n    01\n    Mov B Bi OK\n    Mov\n    OK\n    01100100\n    Mov 0 = Mov 0 &gt;\n    Mov 1 = Mov 1 &gt;\n    Mov _ = B _ &lt;\n    B 0 = B 0 &lt;\n    B 1 = Bi 1 &lt;\n    B _ = OK _ &gt;\n    Bi 0 = Bi 1 &lt;\n    Bi 1 = Bi 0 &lt;\n    Bi _ = OK _ &gt;\n\n### Output\n\n    10011100\n    |\n\n## Machine 2: Moving Morse Code\n\nThis machine takes input as dots (`.`) and dashes (`/`), including a delimiter symbol, `k`. The dots and dashes are moved to after the `k`.\n\n### Input\n\n    ./k\n    Init Mdot MDash Ret OK\n    Init\n    OK\n    /././../.../..../k\n    Init _ = Init _ &gt;\n    Init . = Mdot _ &gt;\n    Init / = MDash _ &gt;\n    Init k = OK k &gt;\n    Mdot . = Mdot . &gt;\n    Mdot / = Mdot / &gt;\n    Mdot k = Mdot k &gt;\n    Mdot _ = Ret . &lt;\n    MDash . = MDash . &gt;\n    MDash / = MDash / &gt;\n    MDash k = MDash k &gt;\n    MDash _ = Ret / &lt;\n    Ret . = Ret . &lt;\n    Ret / = Ret / &lt;\n    Ret k = Ret k &lt;\n    Ret _ = Init _ &gt;\n\n### Output\n\n    _________________k/././../.../..../\n    |                 ^                \n\nNotice all the spaces in the output, as the dots and dashes are now not centered on the middle of the tape.\n\n## Machine 3: Copying \n\nThis machine takes a binary input string, including a delimiter symbol at the end. The binary string is copied to after the delimiter symbol.\n\n### Input\n\n    01xy#\n    C0 C1 Ret Search OK\n    Search\n    OK\n    0110100#\n    Search 0 = C0 x &gt;\n    Search 1 = C1 y &gt;\n    Search # = OK # &gt;\n    C0 0 = C0 0 &gt;\n    C0 1 = C0 1 &gt;\n    C0 # = C0 # &gt;\n    C0 _ = Ret 0 &lt;\n    C1 0 = C1 0 &gt;\n    C1 1 = C1 1 &gt;\n    C1 # = C1 # &gt;\n    C1 _ = Ret 1 &lt;\n    Ret 0 = Ret 0 &lt;\n    Ret 1 = Ret 1 &lt;\n    Ret # = Ret # &lt;\n    Ret x = Search 0 &gt;\n    Ret y = Search 1 &gt;\n\n### Output\n\n    0110100#0110100\n    |       ^      \n\n# Notes and Further Reading\n\nThe Wolfram MathWorld [page on Turing Machines](http://mathworld.wolfram.com/TuringMachine.html) has some more description of the concept of turing machines. Sometimes cell 'colours' are used rather than 'symbols', but the over-arching concept is always the same.\n\nGot any cool challenge ideas? Submit them to /r/DailyProgrammer_Ideas!",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#HardIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Hard)&lt;/em&gt;: The Universal Machine&lt;/h1&gt;\n\n&lt;p&gt;Imagine an infinitely long, one-dimensional list of symbols. The list is infinite in both directions, and each symbol is indexed by a number, where the middle of the list is zero. This is called a &lt;strong&gt;tape&lt;/strong&gt;. The symbols on the tape can be any symbol from an &lt;strong&gt;alphabet&lt;/strong&gt;, which is just a set of possible symbols. If our example alphabet consists of the symbols &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;, then a valid tape would look like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#0110#10101#111#01##\n|\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(The &lt;code&gt;|&lt;/code&gt; marks the location of the middle of the tape, position zero.) Of course, we can&amp;#39;t represent an infinite tape at once. Therefore, we add another possible symbol to our alphabet, &lt;code&gt;_&lt;/code&gt; (underscore), to denote the lack of a symbol. This &lt;code&gt;_&lt;/code&gt; symbol fills the rest of the tape, all the way out to infinity, like so (ellipsis denotes repeat):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;. . . _________________#0110#10101#111#01##_________________ . . .\n                       |\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, imagine we have a &lt;strong&gt;machine&lt;/strong&gt; that can look at this tape, but it can only see one symbol on the tape at once. To look at this tape, it has a &lt;strong&gt;read head&lt;/strong&gt;. In our tape diagrams, the read head is marked with a caret (&lt;code&gt;^&lt;/code&gt;). For example, here&amp;#39;s the read head at position 7:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#0110#10101#111#01##\n|      ^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This read head can move one symbol to the left or right, but it can&amp;#39;t skip ahead arbitrarily or jump to a specific location. Besides the read head, the machine also has a &lt;strong&gt;state&lt;/strong&gt;. This is just an alphanumeric string, with no spaces, like a variable of the machine. It could be &lt;code&gt;Red&lt;/code&gt;, it could be &lt;code&gt;Clockwise&lt;/code&gt;, it could be &lt;code&gt;Catch22&lt;/code&gt;, it could be &lt;code&gt;Tgnqovjaxbg&lt;/code&gt;, as long as it&amp;#39;s alphanumeric.&lt;/p&gt;\n\n&lt;p&gt;Now, this machine is capable of performing a &lt;strong&gt;step&lt;/strong&gt;. A step will change the symbol under the read head to another symbol from the alphabet, and then either move the read head left or right. The type of step that happens depends on the current state, and the current symbol under the read head. We can define a rule for our machine which says something like this:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;If the current symbol under the read head is &lt;strong&gt;p&lt;/strong&gt;, and the current state is &lt;strong&gt;A&lt;/strong&gt;, then change the state to &lt;strong&gt;B&lt;/strong&gt;, change the symbol under the read head to &lt;strong&gt;q&lt;/strong&gt; and move the read head in direction &lt;strong&gt;d&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;p&lt;/strong&gt; and &lt;strong&gt;q&lt;/strong&gt; can be the same symbol, and &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; can be the same state. For example:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;If the current symbol under the read head is &lt;code&gt;0&lt;/code&gt;, and the current state is &lt;code&gt;State1&lt;/code&gt;, then change the state to &lt;code&gt;State1&lt;/code&gt;, change the symbol under the read head to &lt;code&gt;1&lt;/code&gt; and move the read head left.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This rule is called a &lt;strong&gt;transition function&lt;/strong&gt;, and the typical notation is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;𝛿(A, p) = (B, q, d)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So our example rule is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;𝛿(State1, 0) = (State1, 1, &amp;lt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, if our machine is in the state &lt;code&gt;State1&lt;/code&gt; and our tape looks like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#0110#10101#111#01##\n|      ^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, after applying our transition function above, we&amp;#39;re now in &lt;code&gt;State1&lt;/code&gt; (again) and the tape now looks like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#0110#11101#111#01##\n|     ^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&amp;#39;ll typically have quite a few transition functions to cover every possible state/symbol combination. After each step, the machine compares the new state to a special state known as the &lt;strong&gt;accepting state&lt;/strong&gt;. If the current state is the accepting state, then the machine stops, as the computation is complete.&lt;/p&gt;\n\n&lt;p&gt;Whew, that&amp;#39;s a lot of information! Here&amp;#39;s the synopsis of what you need to describe one of these machines:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The &lt;strong&gt;alphabet&lt;/strong&gt;: all possible symbols (along with &lt;code&gt;_&lt;/code&gt;, which is implicitly part of the alphabet.)&lt;/li&gt;\n&lt;li&gt;The &lt;strong&gt;tape&lt;/strong&gt; at the start of the computation.&lt;/li&gt;\n&lt;li&gt;The &lt;strong&gt;starting position&lt;/strong&gt; of the read head on the tape; this is assumed to be zero.&lt;/li&gt;\n&lt;li&gt;The &lt;strong&gt;list of possible&lt;/strong&gt; states that our machine can be in.&lt;/li&gt;\n&lt;li&gt;The &lt;strong&gt;starting state&lt;/strong&gt;, and the &lt;strong&gt;accepting state&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;A list of &lt;strong&gt;transition functions&lt;/strong&gt;, that cover every possible symbol/state combination on the given tape.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This type of machine is known as a &lt;a href=\"http://en.wikipedia.org/wiki/Turing_machine\"&gt;&lt;strong&gt;Turing machine&lt;/strong&gt;&lt;/a&gt;, named after the famous groundbreaking computer scientist and mathematician &lt;a href=\"http://en.wikipedia.org/wiki/Alan_Turing\"&gt;Alan Turing&lt;/a&gt;. It sounds hopelessly verbose in practice, but a Turing machine is insanely useful as a theoretical model for computation. To gloss over quite a few details: if a machine can simulate any such Turing machine as described above, then it&amp;#39;s described as &lt;strong&gt;Turing-complete&lt;/strong&gt;. Today, you&amp;#39;ll be writing a program to simulate a turing machine given the above required parameters; therefore, you&amp;#39;ll need to use a Turing-complete language to solve this challenge. :)&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;First, you will be given the alphabet of a Turing machine (excluding &lt;code&gt;_&lt;/code&gt;, which is always part of the alphabet) as a sequence of non-whitespace characters, like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;01\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Next, you will be given a space-separated list of possible states for the machine, like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Mov B Bi OK\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will then be given the initial state, and the accepting state, on two lines:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Mov\nOK\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After this, you will be given the initial tape to use. The first character is assumed to be at position 0, with following characters at successive locations (1, 2, 3, etc.), like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;01100100\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally, you&amp;#39;re given a list of transition rules. These are in the format &lt;code&gt;StateBefore SymbolBefore = StateAfter SymbolAfter DirectionToMove&lt;/code&gt;, like this list:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Mov 0 = Mov 0 &amp;gt;\nMov 1 = Mov 1 &amp;gt;\nMov _ = B _ &amp;lt;\nB 0 = B 0 &amp;lt;\nB 1 = Bi 1 &amp;lt;\nB _ = OK _ &amp;gt;\nBi 0 = Bi 1 &amp;lt;\nBi 1 = Bi 0 &amp;lt;\nBi _ = OK _ &amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The direction is either &lt;code&gt;&amp;lt;&lt;/code&gt; for left, or &lt;code&gt;&amp;gt;&lt;/code&gt; for right.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;You are to output the tape after the computation has finished. You are also to output the symbol &lt;code&gt;|&lt;/code&gt; (pipe) under the middle of the tape (position zero), and output the symbol &lt;code&gt;^&lt;/code&gt; (caret) under the position of the read head after the computation has finished. If the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; would be in the same place (ie. the read head finishes at the middle of the tape), just print only the &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10011100\n|\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Turing Machines&lt;/h1&gt;\n\n&lt;h2&gt;Machine 1: Two&amp;#39;s Complement&lt;/h2&gt;\n\n&lt;p&gt;This machine computes the two&amp;#39;s complement of the binary number in the input. Notice how the transition functions can use the &lt;code&gt;_&lt;/code&gt; symbol, even though it&amp;#39;s not explicitly part of the alphabet.&lt;/p&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;01\nMov B Bi OK\nMov\nOK\n01100100\nMov 0 = Mov 0 &amp;gt;\nMov 1 = Mov 1 &amp;gt;\nMov _ = B _ &amp;lt;\nB 0 = B 0 &amp;lt;\nB 1 = Bi 1 &amp;lt;\nB _ = OK _ &amp;gt;\nBi 0 = Bi 1 &amp;lt;\nBi 1 = Bi 0 &amp;lt;\nBi _ = OK _ &amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;10011100\n|\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Machine 2: Moving Morse Code&lt;/h2&gt;\n\n&lt;p&gt;This machine takes input as dots (&lt;code&gt;.&lt;/code&gt;) and dashes (&lt;code&gt;/&lt;/code&gt;), including a delimiter symbol, &lt;code&gt;k&lt;/code&gt;. The dots and dashes are moved to after the &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;./k\nInit Mdot MDash Ret OK\nInit\nOK\n/././../.../..../k\nInit _ = Init _ &amp;gt;\nInit . = Mdot _ &amp;gt;\nInit / = MDash _ &amp;gt;\nInit k = OK k &amp;gt;\nMdot . = Mdot . &amp;gt;\nMdot / = Mdot / &amp;gt;\nMdot k = Mdot k &amp;gt;\nMdot _ = Ret . &amp;lt;\nMDash . = MDash . &amp;gt;\nMDash / = MDash / &amp;gt;\nMDash k = MDash k &amp;gt;\nMDash _ = Ret / &amp;lt;\nRet . = Ret . &amp;lt;\nRet / = Ret / &amp;lt;\nRet k = Ret k &amp;lt;\nRet _ = Init _ &amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;_________________k/././../.../..../\n|                 ^                \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice all the spaces in the output, as the dots and dashes are now not centered on the middle of the tape.&lt;/p&gt;\n\n&lt;h2&gt;Machine 3: Copying&lt;/h2&gt;\n\n&lt;p&gt;This machine takes a binary input string, including a delimiter symbol at the end. The binary string is copied to after the delimiter symbol.&lt;/p&gt;\n\n&lt;h3&gt;Input&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;01xy#\nC0 C1 Ret Search OK\nSearch\nOK\n0110100#\nSearch 0 = C0 x &amp;gt;\nSearch 1 = C1 y &amp;gt;\nSearch # = OK # &amp;gt;\nC0 0 = C0 0 &amp;gt;\nC0 1 = C0 1 &amp;gt;\nC0 # = C0 # &amp;gt;\nC0 _ = Ret 0 &amp;lt;\nC1 0 = C1 0 &amp;gt;\nC1 1 = C1 1 &amp;gt;\nC1 # = C1 # &amp;gt;\nC1 _ = Ret 1 &amp;lt;\nRet 0 = Ret 0 &amp;lt;\nRet 1 = Ret 1 &amp;lt;\nRet # = Ret # &amp;lt;\nRet x = Search 0 &amp;gt;\nRet y = Search 1 &amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;0110100#0110100\n|       ^      \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes and Further Reading&lt;/h1&gt;\n\n&lt;p&gt;The Wolfram MathWorld &lt;a href=\"http://mathworld.wolfram.com/TuringMachine.html\"&gt;page on Turing Machines&lt;/a&gt; has some more description of the concept of turing machines. Sometimes cell &amp;#39;colours&amp;#39; are used rather than &amp;#39;symbols&amp;#39;, but the over-arching concept is always the same.&lt;/p&gt;\n\n&lt;p&gt;Got any cool challenge ideas? Submit them to &lt;a href=\"/r/DailyProgrammer_Ideas\"&gt;/r/DailyProgrammer_Ideas&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/31aja8/20150403_challenge_208_hard_the_universal_machine/",
        "title": "[2015-04-03] Challenge #208 [Hard] The Universal Machine",
        "difficulty": "Hard"
    },
    {
        "selfText": "\n\nIn the popular game Minecraft (http://en.wikipedia.org/wiki/Minecraft) you navigate a 3-D block world. Each block can be various types. You gather blocks to place blocks. More or less. \n\nPart of the challenge is navigating this world such that you have to mine down and be able to get back up. So for this challenge we will be throwing at you some combined challenges to solve. Users can select which level of involvement. If you feel you have time or ability solve which challenges you can.\n\nThe 3 challenges to solve (Easy, Intermediate and Hard)\n\n* Generate a 3-D Minecraft Map with a fixed starting point and fixed point for the goal.\n* Navigate the map to find a *shortest* and *safe*path down and back again. (if possible)\n* Generate a 3-D map with a fixed starting point but a random end point. You must develop an agent program to seek out the unknown goal safely and return.\n\n#The Map\n\nTo generate a world we are going to keep our minecraft world simple. Each block can be the following:\n\n* Air - Basically nothing\n* Dirt - Block which can be removed\n* Sand - Block which can be removed but obeys differently than dirt\n* Lava - Dangerous block which we have to avoid.\n*Diamond block - Our goal block we wish to mine that block and leave air.\n\n##Air Block\n\nOur player can occupy an Air block. If they are standing on top of an air block they will drop down to the block below the air block. As you can imagine if it is another air block they keep dropping down until they hit the bottom of the map.\n\n## Dirt Block\n\nOur player can remove any dirt block adjacent to the player that is not diagonal. So if you image 3x3x3 blocks. And if the player is in the exact middle they can only remove dirt blocks up, down and the 4 blocks around him. The corners could not be removed because it would be diagonal.\n\nA removed dirt block becomes air.\n\n## Sand Block\n\nA sand block works like a dirt block. It follows our gravity. If there is an air block below a sand block it will fall (leaving an air block where it was) until the block below the sand block is not an air block. After generating a map you will have to adjust the map to have any sand fall into place.\n\n##Lava Block\n\nA Lava block if you touch it you die. Not good. Lava as a liquid can flow. To keep it simple the rule for lava is if you have air below a lava block the block below lava becomes lava. It will keep becoming lava until the block below lava is not air. Think of it as a Sand Block but it does not \"fall\" and leave behind air blocks but \"flows\"\n\n## Hero\n\nThe hero occupies only air blocks. He cannot be inside any other block. To move he will be removing blocks. He can remove Dirt and sand blocks trying to get to the diamond block. He can only remove blocks next to him but not diagonal. Once a block is removed or mined it becomes air. He cannot mine or move into lava. His goal is to mine the Diamond block.\n\n#Easy Challenge:\n\nGenerate a 100x100x10 minecraft world. Once it generates you must act on it the laws defined above (sand and lava mostly) \n\nThink of the world as x and y coordinates define the 2-D surface. Then you have a z coordinate to shift up or down a \"plane\". The top x-y surface of blocks will always be all air. \nThe block at 0, 0, 1 will always be dirt. Your Hero will start and occupy at 0, 0, 0. \nThe only diamond block in this world is at 99,99,9 . All the other blocks in the world will be randomly determined to be Air, Sand, Dirt or Lava.\n\n#Navigation:\n\nFor the intermediate challenge you have to navigate the world. For the hero to move you can move to any air block. Again if they move to an air block if the block below it is not air they will move \"down\" automatically by \"Falling\" until they are above a non-air block. If the block they stand on is lava they die. They can be next to lava but never on top of lava as they will fall into the liquid and die.(Note for those who play mine craft we are making the liquid lava more simple. I realize Lava flows over blocks but we aren't going that complex)\n\nMoving down is pretty easy. You just move your hero until they keep falling. The problem is going back up. Your hero can only \"jump\" if the blocks allow it. Example.\n\n* D = safe block like dirt, sand or diamond to be on top of\n* A = Air - nothing\n* H = Hero occupying a block which is an air block\n\nImagine these blocks since the hero wants to move up to be on top of the blocks:\n\n     AAA\n     DAA\n     DDH\n\nHe has to move up. He can only move up by jumping up. Since the block above him is air and then the block above the block next to him has air above it and is next to the block he jumps up to he can safely move on top of that block to be as follows.\n\n     AAA\n     DHA\n     DDA\n\nHe can continue to jump and move over as he can jump up 1 block and over 1 safely always.\n\n     HAA\n     DAA\n     DDA\n\nThe problem is if he jumps up into an air block but the adjacent blocks to that block are not air over a safe block he cannot jump.\n\n     AAA\n     DAD\n     DHD\n     DDD\n\nThe above is a pit. The poor hero jumps up into the air block above him but the blocks next to that air block do not allow him to move. \n\nKeep in mind I am showing you 2-D examples. Our world will be 3-D. If he can move up 1 block into air and any of the 4 blocks next to that adjacent not diagonal are air he can move safely into that air. \n\nYou cannot jump also if the block of air you will occupy is on top of a lava block (you die)\n\n(Note in real mine craft your hero takes up 2 blocks height. We are making this more simple in that you will occupy 1 block)\n\nKeeping all this in mine now you need to find the shortest and safest path to mine the diamond and get back. You start by occupying 0, 0, 0 which is air. Below it at 0, 0, 1 is a dirt block. So you are always safe. The diamond block is 99,99, 9 you want to move such that you can mine dirt or sand to create air to make a path to occupy 99,99,9 then you need to get back.\n\nThe key here is getting back. You cannot simply mine down You will create a \"pit\" that you cannot get back. If you cannot get a path to the diamond and back up to 0,0,0 you are unable to do the idea of the challenge of getting there and back. So when you make your path you will have to probably mine down and then mine over creating a \"step\" that allows you to \"jump\" back up to navigate safely.\n\n##Lava and Sand Danger\n\nEverytime you \"mine\" a sand or dirt block you make it an air block. You will have to check the case if sand or lava is above it. If Sand was above that block then the sand block will fall down until the block below is no longer air. If it was your goal to move into that space you cannot because you have to mine it again. Keep in mind there could be a chain reaction of sand. If you can a Sand Above a sand. The bottom sand drops down to an Air. It leaves behind an air and guess what that sand above that sand will drop down as well.\n\nLava drops down as well but it doesn't leave behind air, it flows (thus growing) If the hero mines the block above the lava will fall into his air spot and kill him. So don't do that.\n\nIf sand wants to fall on the air spot occupied by the hero it will kill him. So don't mine up if the block above that is sand (Note in minecraft you get pushed to an adjacent space so to keep it simple I am saying death but if you want to do a \"push\" here then go for it.)\n\n#Intermediate level challenge:\n\nFind the shortest and safe path down that lets you mine blocks to the diamond and then let you move back to the starting point following the above rules of jumping up and mining. \n\n#Hard level challenge:\n\nGenerate a random map as always. The only difference from the easy generation is that the map will randomly place the 1 diamond block. The hero agent will seek out this diamond to get it. The hero also can only see blocks next to him. He will avoid moving down into air that has him falling more than 5 blocks in height (we didn't worry about this in intermediate as we had to leave a path back and that would mean he couldn't get back)\nThe hero will only remember or know about blocks he has been adjacent to. If for example he removes a dirt block above him. He does not know the block above that which is lava or sand and it kills him. However if he was adjacent to that block above the block he wants to mine he knows it will be sand or lava and he will not choose to mine it to seek out the diamond. \n\n#Very Hard Challenge:\n\nDo the hard challenge a path to the random diamond then find another path (or same path if safe) to get back to 0,0,0. If the first path was not always safe then the agent will try to navigate back to his starting spot if possible or until he dies.\n\n#Questions:\n\nThis is a very long winded challenge. I will no doubt miss something. I hope you see the intent of the challenge and can address any missing element I did not cover. If you think it is important enough to bring up - go for it - share with all or ask and I will do what I can to answer. Sometimes it is hard to come up with air tight descriptions that cover ALL basis. In some cases the design of how to handle it is left to you to solve however you feel you want to solve it. Have patience with the challenge and see the intent. Thanks!\n\n\n#FAQ:\n\n* Failed maps seem to be common with pure random. If you wish to weight what is created to increase our hero's chances I would say go for it.\n\n* No jump and removing blocks.\n* No Placing blocks. We only remove. \n\n#Co-Credit:\n\nThanks to /u/Godspiral. His post of this idea http://pv.reddit.com/r/dailyprogrammer_ideas/comments/299qci/intermediate_generate_a_simple_minecraft_world/ - helped shape this challenge.",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;In the popular game Minecraft (&lt;a href=\"http://en.wikipedia.org/wiki/Minecraft\"&gt;http://en.wikipedia.org/wiki/Minecraft&lt;/a&gt;) you navigate a 3-D block world. Each block can be various types. You gather blocks to place blocks. More or less. &lt;/p&gt;\n\n&lt;p&gt;Part of the challenge is navigating this world such that you have to mine down and be able to get back up. So for this challenge we will be throwing at you some combined challenges to solve. Users can select which level of involvement. If you feel you have time or ability solve which challenges you can.&lt;/p&gt;\n\n&lt;p&gt;The 3 challenges to solve (Easy, Intermediate and Hard)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Generate a 3-D Minecraft Map with a fixed starting point and fixed point for the goal.&lt;/li&gt;\n&lt;li&gt;Navigate the map to find a &lt;em&gt;shortest&lt;/em&gt; and &lt;em&gt;safe&lt;/em&gt;path down and back again. (if possible)&lt;/li&gt;\n&lt;li&gt;Generate a 3-D map with a fixed starting point but a random end point. You must develop an agent program to seek out the unknown goal safely and return.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;The Map&lt;/h1&gt;\n\n&lt;p&gt;To generate a world we are going to keep our minecraft world simple. Each block can be the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Air - Basically nothing&lt;/li&gt;\n&lt;li&gt;Dirt - Block which can be removed&lt;/li&gt;\n&lt;li&gt;Sand - Block which can be removed but obeys differently than dirt&lt;/li&gt;\n&lt;li&gt;Lava - Dangerous block which we have to avoid.\n*Diamond block - Our goal block we wish to mine that block and leave air.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Air Block&lt;/h2&gt;\n\n&lt;p&gt;Our player can occupy an Air block. If they are standing on top of an air block they will drop down to the block below the air block. As you can imagine if it is another air block they keep dropping down until they hit the bottom of the map.&lt;/p&gt;\n\n&lt;h2&gt;Dirt Block&lt;/h2&gt;\n\n&lt;p&gt;Our player can remove any dirt block adjacent to the player that is not diagonal. So if you image 3x3x3 blocks. And if the player is in the exact middle they can only remove dirt blocks up, down and the 4 blocks around him. The corners could not be removed because it would be diagonal.&lt;/p&gt;\n\n&lt;p&gt;A removed dirt block becomes air.&lt;/p&gt;\n\n&lt;h2&gt;Sand Block&lt;/h2&gt;\n\n&lt;p&gt;A sand block works like a dirt block. It follows our gravity. If there is an air block below a sand block it will fall (leaving an air block where it was) until the block below the sand block is not an air block. After generating a map you will have to adjust the map to have any sand fall into place.&lt;/p&gt;\n\n&lt;h2&gt;Lava Block&lt;/h2&gt;\n\n&lt;p&gt;A Lava block if you touch it you die. Not good. Lava as a liquid can flow. To keep it simple the rule for lava is if you have air below a lava block the block below lava becomes lava. It will keep becoming lava until the block below lava is not air. Think of it as a Sand Block but it does not &amp;quot;fall&amp;quot; and leave behind air blocks but &amp;quot;flows&amp;quot;&lt;/p&gt;\n\n&lt;h2&gt;Hero&lt;/h2&gt;\n\n&lt;p&gt;The hero occupies only air blocks. He cannot be inside any other block. To move he will be removing blocks. He can remove Dirt and sand blocks trying to get to the diamond block. He can only remove blocks next to him but not diagonal. Once a block is removed or mined it becomes air. He cannot mine or move into lava. His goal is to mine the Diamond block.&lt;/p&gt;\n\n&lt;h1&gt;Easy Challenge:&lt;/h1&gt;\n\n&lt;p&gt;Generate a 100x100x10 minecraft world. Once it generates you must act on it the laws defined above (sand and lava mostly) &lt;/p&gt;\n\n&lt;p&gt;Think of the world as x and y coordinates define the 2-D surface. Then you have a z coordinate to shift up or down a &amp;quot;plane&amp;quot;. The top x-y surface of blocks will always be all air. \nThe block at 0, 0, 1 will always be dirt. Your Hero will start and occupy at 0, 0, 0. \nThe only diamond block in this world is at 99,99,9 . All the other blocks in the world will be randomly determined to be Air, Sand, Dirt or Lava.&lt;/p&gt;\n\n&lt;h1&gt;Navigation:&lt;/h1&gt;\n\n&lt;p&gt;For the intermediate challenge you have to navigate the world. For the hero to move you can move to any air block. Again if they move to an air block if the block below it is not air they will move &amp;quot;down&amp;quot; automatically by &amp;quot;Falling&amp;quot; until they are above a non-air block. If the block they stand on is lava they die. They can be next to lava but never on top of lava as they will fall into the liquid and die.(Note for those who play mine craft we are making the liquid lava more simple. I realize Lava flows over blocks but we aren&amp;#39;t going that complex)&lt;/p&gt;\n\n&lt;p&gt;Moving down is pretty easy. You just move your hero until they keep falling. The problem is going back up. Your hero can only &amp;quot;jump&amp;quot; if the blocks allow it. Example.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;D = safe block like dirt, sand or diamond to be on top of&lt;/li&gt;\n&lt;li&gt;A = Air - nothing&lt;/li&gt;\n&lt;li&gt;H = Hero occupying a block which is an air block&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Imagine these blocks since the hero wants to move up to be on top of the blocks:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; AAA\n DAA\n DDH\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;He has to move up. He can only move up by jumping up. Since the block above him is air and then the block above the block next to him has air above it and is next to the block he jumps up to he can safely move on top of that block to be as follows.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; AAA\n DHA\n DDA\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;He can continue to jump and move over as he can jump up 1 block and over 1 safely always.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; HAA\n DAA\n DDA\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem is if he jumps up into an air block but the adjacent blocks to that block are not air over a safe block he cannot jump.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; AAA\n DAD\n DHD\n DDD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above is a pit. The poor hero jumps up into the air block above him but the blocks next to that air block do not allow him to move. &lt;/p&gt;\n\n&lt;p&gt;Keep in mind I am showing you 2-D examples. Our world will be 3-D. If he can move up 1 block into air and any of the 4 blocks next to that adjacent not diagonal are air he can move safely into that air. &lt;/p&gt;\n\n&lt;p&gt;You cannot jump also if the block of air you will occupy is on top of a lava block (you die)&lt;/p&gt;\n\n&lt;p&gt;(Note in real mine craft your hero takes up 2 blocks height. We are making this more simple in that you will occupy 1 block)&lt;/p&gt;\n\n&lt;p&gt;Keeping all this in mine now you need to find the shortest and safest path to mine the diamond and get back. You start by occupying 0, 0, 0 which is air. Below it at 0, 0, 1 is a dirt block. So you are always safe. The diamond block is 99,99, 9 you want to move such that you can mine dirt or sand to create air to make a path to occupy 99,99,9 then you need to get back.&lt;/p&gt;\n\n&lt;p&gt;The key here is getting back. You cannot simply mine down You will create a &amp;quot;pit&amp;quot; that you cannot get back. If you cannot get a path to the diamond and back up to 0,0,0 you are unable to do the idea of the challenge of getting there and back. So when you make your path you will have to probably mine down and then mine over creating a &amp;quot;step&amp;quot; that allows you to &amp;quot;jump&amp;quot; back up to navigate safely.&lt;/p&gt;\n\n&lt;h2&gt;Lava and Sand Danger&lt;/h2&gt;\n\n&lt;p&gt;Everytime you &amp;quot;mine&amp;quot; a sand or dirt block you make it an air block. You will have to check the case if sand or lava is above it. If Sand was above that block then the sand block will fall down until the block below is no longer air. If it was your goal to move into that space you cannot because you have to mine it again. Keep in mind there could be a chain reaction of sand. If you can a Sand Above a sand. The bottom sand drops down to an Air. It leaves behind an air and guess what that sand above that sand will drop down as well.&lt;/p&gt;\n\n&lt;p&gt;Lava drops down as well but it doesn&amp;#39;t leave behind air, it flows (thus growing) If the hero mines the block above the lava will fall into his air spot and kill him. So don&amp;#39;t do that.&lt;/p&gt;\n\n&lt;p&gt;If sand wants to fall on the air spot occupied by the hero it will kill him. So don&amp;#39;t mine up if the block above that is sand (Note in minecraft you get pushed to an adjacent space so to keep it simple I am saying death but if you want to do a &amp;quot;push&amp;quot; here then go for it.)&lt;/p&gt;\n\n&lt;h1&gt;Intermediate level challenge:&lt;/h1&gt;\n\n&lt;p&gt;Find the shortest and safe path down that lets you mine blocks to the diamond and then let you move back to the starting point following the above rules of jumping up and mining. &lt;/p&gt;\n\n&lt;h1&gt;Hard level challenge:&lt;/h1&gt;\n\n&lt;p&gt;Generate a random map as always. The only difference from the easy generation is that the map will randomly place the 1 diamond block. The hero agent will seek out this diamond to get it. The hero also can only see blocks next to him. He will avoid moving down into air that has him falling more than 5 blocks in height (we didn&amp;#39;t worry about this in intermediate as we had to leave a path back and that would mean he couldn&amp;#39;t get back)\nThe hero will only remember or know about blocks he has been adjacent to. If for example he removes a dirt block above him. He does not know the block above that which is lava or sand and it kills him. However if he was adjacent to that block above the block he wants to mine he knows it will be sand or lava and he will not choose to mine it to seek out the diamond. &lt;/p&gt;\n\n&lt;h1&gt;Very Hard Challenge:&lt;/h1&gt;\n\n&lt;p&gt;Do the hard challenge a path to the random diamond then find another path (or same path if safe) to get back to 0,0,0. If the first path was not always safe then the agent will try to navigate back to his starting spot if possible or until he dies.&lt;/p&gt;\n\n&lt;h1&gt;Questions:&lt;/h1&gt;\n\n&lt;p&gt;This is a very long winded challenge. I will no doubt miss something. I hope you see the intent of the challenge and can address any missing element I did not cover. If you think it is important enough to bring up - go for it - share with all or ask and I will do what I can to answer. Sometimes it is hard to come up with air tight descriptions that cover ALL basis. In some cases the design of how to handle it is left to you to solve however you feel you want to solve it. Have patience with the challenge and see the intent. Thanks!&lt;/p&gt;\n\n&lt;h1&gt;FAQ:&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Failed maps seem to be common with pure random. If you wish to weight what is created to increase our hero&amp;#39;s chances I would say go for it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No jump and removing blocks.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No Placing blocks. We only remove. &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Co-Credit:&lt;/h1&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/Godspiral\"&gt;/u/Godspiral&lt;/a&gt;. His post of this idea &lt;a href=\"http://pv.reddit.com/r/dailyprogrammer_ideas/comments/299qci/intermediate_generate_a_simple_minecraft_world/\"&gt;http://pv.reddit.com/r/dailyprogrammer_ideas/comments/299qci/intermediate_generate_a_simple_minecraft_world/&lt;/a&gt; - helped shape this challenge.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2xdqg0/2015227_challenge_203_hard_minecraft_there_and/",
        "title": "[2015-2-27] Challenge #203 [Hard] Minecraft: There and Back",
        "difficulty": "Hard"
    },
    {
        "selfText": "# Description\n\nWrite a program to print out the (x, y) coordinates of each point in the nth iteration of the [Heighway dragon fractal](http://www-user.uni-bremen.de/schmuhl/fractals/dragon_curve_o12.png). Start at the origin (0, 0) and take steps of length 1, starting in the positive x direction (1, 0), then turning to the positive y direction (1, 1). Your program should generate 2^n + 1 lines of output.\n\nYou can use any resources you want for help coming up with the algorithm, but if you want to start from the very beginning, use only the fact that the nth iteration can be made by [folding a strip of paper in half n times, then unfolding it so that each crease is at a right angle](http://www.cutoutfoldup.com/images/0216-s03b.jpg).\n\n# Example\n\nFor n = 3, your output should be:\n\n    0 0\n    1 0\n    1 1\n    0 1\n    0 2\n    -1 2\n    -1 1\n    -2 1\n    -2 2\n\n[Plotted image of these points](http://i.imgur.com/3sCzNyG.png), made using LibreOffice.\n\nThe sum of the x's here is -4, and the sum of the y's is 10. For n = 12, the sums are -104896 and 52416. To verify that your program is correct, post the sum of x's and y's for n = 16 along with your code.\n\n# Optional challenges\n\nToday's basic challenge is not too hard, relatively speaking, so if you want more, try some of these optional add-ons, or take it in your own direction.\n\n1. Show us a plot of your output. There are many options for this. You can use a plotting library for your language of choice, or use a spreadsheet like I did. gnuplot is another free option. Feel free to get creative with colors, effects, animations, etc.\n1. Optimize your code for memory usage. Aim for O(n) space.\n1. Optimize your code for speed. What's the largest n you can generate all the data for in less than 1 minute? (You can skip printing output for this one, as long as you actually do all the calculations.)\n1. Golf: minimize your code length. What's the shortest program you can write in your language that works?\n1. There are [other ways of generating the Heighway dragon](http://i.imgur.com/n30yp.gif) than the paper folding one I suggested. Try implementing a different one than you used first.\n1. There are many variations of the Heighway dragon [(see Variations at the bottom)](http://ecademy.agnesscott.edu/~lriddle/ifs/heighway/heighway.htm). Try creating a terdragon, golden dragon, or anything else you can find.\n1. Find a way to efficiently calculate s(n), the sum of the x's and y's for the nth iteration. For example, s(3) = (-4, 10) and s(12) = (-104896, 52416). Post s(100) along with your code. (This is possible without any advanced math, but it's tricky.)\n1. Find a way to efficiently calculate p(k), the (x, y) position after k steps (i.e. the (k+1)th line of output when n is sufficiently large), starting from from p(0) = (0, 0), p(1) = (1, 0). For example, p(345) = (13, 6). Post p(3^(45)) along with your code. (This one is also quite tricky.)",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Write a program to print out the (x, y) coordinates of each point in the nth iteration of the &lt;a href=\"http://www-user.uni-bremen.de/schmuhl/fractals/dragon_curve_o12.png\"&gt;Heighway dragon fractal&lt;/a&gt;. Start at the origin (0, 0) and take steps of length 1, starting in the positive x direction (1, 0), then turning to the positive y direction (1, 1). Your program should generate 2&lt;sup&gt;n&lt;/sup&gt; + 1 lines of output.&lt;/p&gt;\n\n&lt;p&gt;You can use any resources you want for help coming up with the algorithm, but if you want to start from the very beginning, use only the fact that the nth iteration can be made by &lt;a href=\"http://www.cutoutfoldup.com/images/0216-s03b.jpg\"&gt;folding a strip of paper in half n times, then unfolding it so that each crease is at a right angle&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Example&lt;/h1&gt;\n\n&lt;p&gt;For n = 3, your output should be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0 0\n1 0\n1 1\n0 1\n0 2\n-1 2\n-1 1\n-2 1\n-2 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"http://i.imgur.com/3sCzNyG.png\"&gt;Plotted image of these points&lt;/a&gt;, made using LibreOffice.&lt;/p&gt;\n\n&lt;p&gt;The sum of the x&amp;#39;s here is -4, and the sum of the y&amp;#39;s is 10. For n = 12, the sums are -104896 and 52416. To verify that your program is correct, post the sum of x&amp;#39;s and y&amp;#39;s for n = 16 along with your code.&lt;/p&gt;\n\n&lt;h1&gt;Optional challenges&lt;/h1&gt;\n\n&lt;p&gt;Today&amp;#39;s basic challenge is not too hard, relatively speaking, so if you want more, try some of these optional add-ons, or take it in your own direction.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Show us a plot of your output. There are many options for this. You can use a plotting library for your language of choice, or use a spreadsheet like I did. gnuplot is another free option. Feel free to get creative with colors, effects, animations, etc.&lt;/li&gt;\n&lt;li&gt;Optimize your code for memory usage. Aim for O(n) space.&lt;/li&gt;\n&lt;li&gt;Optimize your code for speed. What&amp;#39;s the largest n you can generate all the data for in less than 1 minute? (You can skip printing output for this one, as long as you actually do all the calculations.)&lt;/li&gt;\n&lt;li&gt;Golf: minimize your code length. What&amp;#39;s the shortest program you can write in your language that works?&lt;/li&gt;\n&lt;li&gt;There are &lt;a href=\"http://i.imgur.com/n30yp.gif\"&gt;other ways of generating the Heighway dragon&lt;/a&gt; than the paper folding one I suggested. Try implementing a different one than you used first.&lt;/li&gt;\n&lt;li&gt;There are many variations of the Heighway dragon &lt;a href=\"http://ecademy.agnesscott.edu/%7Elriddle/ifs/heighway/heighway.htm\"&gt;(see Variations at the bottom)&lt;/a&gt;. Try creating a terdragon, golden dragon, or anything else you can find.&lt;/li&gt;\n&lt;li&gt;Find a way to efficiently calculate s(n), the sum of the x&amp;#39;s and y&amp;#39;s for the nth iteration. For example, s(3) = (-4, 10) and s(12) = (-104896, 52416). Post s(100) along with your code. (This is possible without any advanced math, but it&amp;#39;s tricky.)&lt;/li&gt;\n&lt;li&gt;Find a way to efficiently calculate p(k), the (x, y) position after k steps (i.e. the (k+1)th line of output when n is sufficiently large), starting from from p(0) = (0, 0), p(1) = (1, 0). For example, p(345) = (13, 6). Post p(3&lt;sup&gt;45&lt;/sup&gt;) along with your code. (This one is also quite tricky.)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/3dl9wr/20150717_challenge_223_hard_the_heighway_dragon/",
        "title": "[2015-07-17] Challenge #223 [Hard] The Heighway dragon fractal",
        "difficulty": "Hard"
    },
    {
        "selfText": "# Description\n\nKimCo Global, the global corporation from DPRK, is secretly developing an awesome new  product for its loyal costumers called Number. It is what is says - Number, but not just any Number, each Number is a unique positive integer. Each number costs its value - so 1 costs $1, 5 costs $5, etc. KimCo Global puts each number from 1 to 10^15 on sale. \n\nYour friend, a salesman for KimCo Global, needs your help to optimize their profits. He received all available Numbers whose sum of digits equals 69 and seeks to sell them for the highest value he can. His regular accountant is of no help, can you assist?\n\nWhat is the total of positive integers less than 10^15 whose sum of digits equal 69?\n\n# Credit\n\nThis challenge was suggested by user /u/raluralu, many thanks. If you have any challenge ideaas, please do share them on /r/dailyprogrammer_ideas and there's a good chance we'll use them. \n\n# EDIT 2017-03-11\n\nThere's been some discussion about the ambiguity of this challenge - is it asking for the *sum* of all of those Numbers or the *quantity* of Numbers that fit the constraint? I have to admit the original submission from /r/dailyprogrammer_ideas was also a bit ambiguous. I believe the submitter who wrote it does not speak English natively, and so they had some ambiguity in their presentation. As such, I copied their question complete with ambiguity. \n\nBecause of this, I think either will be fine - the sum or the quantity. \n\nThe real challenge, and why this is a Friday hard one, is writing a better than naive solution as some of you have picked up. Some of it is math and some of it is programming. ",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;KimCo Global, the global corporation from DPRK, is secretly developing an awesome new  product for its loyal costumers called Number. It is what is says - Number, but not just any Number, each Number is a unique positive integer. Each number costs its value - so 1 costs $1, 5 costs $5, etc. KimCo Global puts each number from 1 to 10&lt;sup&gt;15&lt;/sup&gt; on sale. &lt;/p&gt;\n\n&lt;p&gt;Your friend, a salesman for KimCo Global, needs your help to optimize their profits. He received all available Numbers whose sum of digits equals 69 and seeks to sell them for the highest value he can. His regular accountant is of no help, can you assist?&lt;/p&gt;\n\n&lt;p&gt;What is the total of positive integers less than 10&lt;sup&gt;15&lt;/sup&gt; whose sum of digits equal 69?&lt;/p&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by user &lt;a href=\"/u/raluralu\"&gt;/u/raluralu&lt;/a&gt;, many thanks. If you have any challenge ideaas, please do share them on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s a good chance we&amp;#39;ll use them. &lt;/p&gt;\n\n&lt;h1&gt;EDIT 2017-03-11&lt;/h1&gt;\n\n&lt;p&gt;There&amp;#39;s been some discussion about the ambiguity of this challenge - is it asking for the &lt;em&gt;sum&lt;/em&gt; of all of those Numbers or the &lt;em&gt;quantity&lt;/em&gt; of Numbers that fit the constraint? I have to admit the original submission from &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; was also a bit ambiguous. I believe the submitter who wrote it does not speak English natively, and so they had some ambiguity in their presentation. As such, I copied their question complete with ambiguity. &lt;/p&gt;\n\n&lt;p&gt;Because of this, I think either will be fine - the sum or the quantity. &lt;/p&gt;\n\n&lt;p&gt;The real challenge, and why this is a Friday hard one, is writing a better than naive solution as some of you have picked up. Some of it is math and some of it is programming. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/5yoo87/20170310_challenge_305_hard_numbers_for_sale/",
        "title": "[2017-03-10] Challenge #305 [Hard] Numbers for Sale",
        "difficulty": "Hard"
    },
    {
        "selfText": "#Descripton:\n\nGiven a typical x/y coordinate system we can plot lines. It would be interesting to know which lines intersect.\n\n#Input: \n\nA series of lines from 1 to many to put in our 2-D space. The data will be in the form:\n\n    (label) (x1 y1) (x2 y2)\n\n* (label) will be a letter A-Z\n* (x1 y1) will be the coordinates of the starting point on line\n* (x2 y2) will be the coordinates of the ending point on line\n\n\n##example input:\n\n    A -2.5 .5 3.5 .5\n    B -2.23 99.99 -2.10 -56.23\n    C -1.23 99.99 -1.10 -56.23\n    D 100.1 1000.34 2000.23 2100.23\n    E 1.5 -1 1.5 1.0\n    F 2.0 2.0 3.0 2.0\n    G 2.5 .5 2.5 2.0\n\n\n* Max X can be 1,000,000,000.00\n* Max Y can be 1,000,000,000.00\n\n#Output:\n\nThe program will list which lines intersect. And which have 0 intersects.\n\n##Example Output:\n\n    Intersecting Lines:\n    A B\n    A C\n    A E\n    A G\n    F G\n    No intersections:\n    D\n\n#Difficulty:\n\nThis is a coder_d00d(tm) unknown difficulty challenge. It could be easy. Could be hard. But it seems cool for a Friday.\n\n\n* If you want to make it **easier**: input is only 2 lines and you return yes/no\n* If you want to make it **harder**: output is the 2 lines and the (x y) point they intersect at.\n\n\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Descripton:&lt;/h1&gt;\n\n&lt;p&gt;Given a typical x/y coordinate system we can plot lines. It would be interesting to know which lines intersect.&lt;/p&gt;\n\n&lt;h1&gt;Input:&lt;/h1&gt;\n\n&lt;p&gt;A series of lines from 1 to many to put in our 2-D space. The data will be in the form:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(label) (x1 y1) (x2 y2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;(label) will be a letter A-Z&lt;/li&gt;\n&lt;li&gt;(x1 y1) will be the coordinates of the starting point on line&lt;/li&gt;\n&lt;li&gt;(x2 y2) will be the coordinates of the ending point on line&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;example input:&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;A -2.5 .5 3.5 .5\nB -2.23 99.99 -2.10 -56.23\nC -1.23 99.99 -1.10 -56.23\nD 100.1 1000.34 2000.23 2100.23\nE 1.5 -1 1.5 1.0\nF 2.0 2.0 3.0 2.0\nG 2.5 .5 2.5 2.0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Max X can be 1,000,000,000.00&lt;/li&gt;\n&lt;li&gt;Max Y can be 1,000,000,000.00&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;The program will list which lines intersect. And which have 0 intersects.&lt;/p&gt;\n\n&lt;h2&gt;Example Output:&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Intersecting Lines:\nA B\nA C\nA E\nA G\nF G\nNo intersections:\nD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Difficulty:&lt;/h1&gt;\n\n&lt;p&gt;This is a coder_d00d(tm) unknown difficulty challenge. It could be easy. Could be hard. But it seems cool for a Friday.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you want to make it &lt;strong&gt;easier&lt;/strong&gt;: input is only 2 lines and you return yes/no&lt;/li&gt;\n&lt;li&gt;If you want to make it &lt;strong&gt;harder&lt;/strong&gt;: output is the 2 lines and the (x y) point they intersect at.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/26b42x/5232014_challenge_163_hard_intersecting_lines_in/",
        "title": "[5/23/2014] Challenge #163 [Hard] Intersecting Lines in 2-D space",
        "difficulty": "Hard"
    },
    {
        "selfText": "While this one is a hard challenge, it's also open ended - be creative in how you solve the problem. I encourage you to compare notes, think about the challenge before you write code, and explore your algorithms. See the bonus questions below for some additional questions.\n\n# Description\n\nMost of us have seen and ridden elevators - you crazy folks in the UK and commonwealth countries often call them \"lifts\" - but I'm sure I'm not the only one who has puzzled about the scheduling algorithms. Which riders do you pick up and when? Do you service requests in the order of arrival or do you work on maximal overlap?\n\nFor this challenge, you'll have to anwer those questions. You're designing an elevator scheduling algorithm for a building and you have plenty of riders to keep happy. You can have any algorithm you want as long as you stick to the constraints - the cars have a fixed capacity and speed.\n\nMake sure you see the bonus questions after the challenge input.\n\n# Input Description\n\nYou'll be given a single integer *N* on a line. The first *N* lines will identify elevator cars and with these fields: Car identifier, capacity, vertical speed in floors per second, and starting floor. Assume instantaneous getting on or off the elevator for the riders once you arrive on the floor. Assume that the elevator *is able to* leave with the rider as soon as it is able, but it *may* linger waiting for more people to arrive - the choice is yours. \n\nExample:\n\n\tC1 12 .1 1\n\nThis translates to Car 1, capacity of 12 people, moves at .1 floors per second (ten seconds to traverse a floor up or down), and starting at floor 1.\n\nThen you'll get another integer on a line, *M*. The next *M* lines will show riders, with fields: Rider identification, elevator request time in seconds, source floor and destination floor. Rider identification numbers will be *stable*, meaning the rider will have the same identifier the entire exercise. Examples:\n\n\tR1 0 1 4\n\nThis translates to Rider 1 who at time point 0 wants to go from floor 1 to floor 4. Riders will not transit floors without an elevator.\n\n# Output Description\n\nThe main thing to show in the output is the time point at which all requests have been satisfied. (Yes, this is trying to get you guys to compete for the most efficient algorithm). Optionally show all intermediate steps and journeys, and wait times for riders. \n\n# Challenge Input\n\nThis was randomly generated, and so it has a few \"oddities\" in it, like riders who get on and off on the same floor, and riders who change their destination in the next second (e.g. in the middle of a ride). You still have to satisfy *every* request. \n\n\t2\n\tC1 12 .1 1\n\tC2 12 .2 1\n\t359\n    R3 0 1 9\n    R4 1 1 11\n    R0 11 1 7\n    R2 11 1 9\n    R15 13 1 9\n    R5 26 1 4\n    R16 27 1 2\n    R1 28 1 2\n    R13 28 1 9\n    R10 32 1 3\n    R14 35 1 4\n    R8 36 1 10\n    R17 38 1 12\n    R3 49 9 9\n    R18 50 1 10\n    R7 51 1 3\n    R10 53 3 10\n    R12 54 1 6\n    R0 60 7 1\n    R1 62 2 1\n    R9 66 1 8\n    R19 66 1 6\n    R15 71 9 2\n    R11 72 1 8\n    R16 78 2 4\n    R6 82 1 12\n    R8 85 10 11\n    R10 89 10 12\n    R3 90 9 6\n    R5 94 4 7\n    R2 94 9 10\n    R6 95 12 1\n    R3 111 6 9\n    R14 114 4 5\n    R13 115 9 5\n    R19 117 6 2\n    R12 122 6 12\n    R4 123 11 7\n    R9 123 8 12\n    R6 124 1 5\n    R0 124 1 6\n    R7 127 3 3\n    R11 139 8 9\n    R7 141 3 4\n    R17 143 12 2\n    R14 143 5 5\n    R16 151 4 9\n    R5 155 7 12\n    R1 155 1 11\n    R18 159 10 10\n    R15 160 2 4\n    R19 162 2 3\n    R2 164 10 3\n    R11 164 9 9\n    R3 165 9 4\n    R12 167 12 1\n    R10 169 12 1\n    R0 174 6 9\n    R11 181 9 2\n    R18 182 10 12\n    R9 184 12 4\n    R5 185 12 11\n    R4 197 7 5\n    R2 198 3 3\n    R3 198 4 8\n    R6 199 5 5\n    R8 199 11 6\n    R13 201 5 5\n    R14 203 5 4\n    R1 205 11 12\n    R16 211 9 1\n    R6 212 5 11\n    R7 214 4 8\n    R15 216 4 6\n    R19 226 3 11\n    R1 230 12 12\n    R7 232 8 5\n    R0 234 9 12\n    R3 237 8 2\n    R17 238 2 6\n    R2 240 3 11\n    R12 240 1 3\n    R15 246 6 6\n    R13 247 5 10\n    R5 248 11 5\n    R10 249 1 6\n    R18 252 12 4\n    R9 253 4 8\n    R1 256 12 12\n    R4 257 5 12\n    R16 258 1 2\n    R13 258 10 5\n    R6 262 11 2\n    R11 263 2 7\n    R9 269 8 5\n    R3 271 2 6\n    R14 274 4 9\n    R5 282 5 12\n    R11 285 7 6\n    R16 287 2 8\n    R14 290 9 5\n    R2 297 11 4\n    R18 299 4 6\n    R13 300 5 5\n    R8 301 6 5\n    R0 303 12 3\n    R19 305 11 1\n    R7 310 5 8\n    R2 311 4 4\n    R1 315 12 8\n    R16 318 8 11\n    R8 320 5 8\n    R1 324 8 2\n    R10 325 6 9\n    R17 325 6 2\n    R2 330 4 11\n    R19 330 1 9\n    R9 332 5 5\n    R5 335 12 11\n    R18 338 6 9\n    R11 340 6 8\n    R12 342 3 9\n    R9 344 5 11\n    R12 346 9 12\n    R13 346 5 12\n    R6 351 2 2\n    R0 354 3 10\n    R10 358 9 9\n    R4 369 12 12\n    R15 370 6 8\n    R3 372 6 5\n    R17 374 2 9\n    R14 383 5 4\n    R7 389 8 1\n    R18 396 9 6\n    R12 396 12 7\n    R8 411 8 1\n    R16 419 11 3\n    R2 420 11 1\n    R10 420 9 11\n    R6 423 2 12\n    R1 423 2 8\n    R7 425 1 1\n    R11 426 8 4\n    R13 429 12 11\n    R19 430 9 7\n    R5 432 11 9\n    R15 435 8 3\n    R0 438 10 6\n    R6 444 12 9\n    R17 449 9 9\n    R14 452 4 4\n    R9 456 11 2\n    R18 460 6 7\n    R5 463 9 2\n    R12 464 7 2\n    R4 468 12 5\n    R13 468 11 6\n    R2 475 1 4\n    R19 478 7 4\n    R12 491 2 10\n    R10 496 11 7\n    R0 501 6 3\n    R2 501 4 2\n    R7 502 1 3\n    R3 502 5 7\n    R14 505 4 11\n    R6 507 9 2\n    R1 508 8 12\n    R15 510 3 1\n    R16 512 3 12\n    R11 515 4 10\n    R18 515 7 2\n    R19 517 4 3\n    R15 519 1 5\n    R9 521 2 2\n    R2 524 2 5\n    R14 525 11 2\n    R18 526 2 11\n    R4 530 5 5\n    R6 531 2 5\n    R8 536 1 5\n    R12 536 10 3\n    R16 536 12 7\n    R15 538 5 7\n    R17 538 9 5\n    R13 544 6 7\n    R10 546 7 11\n    R11 547 10 5\n    R7 548 3 1\n    R4 554 5 1\n    R3 558 7 11\n    R10 568 11 7\n    R6 570 5 5\n    R12 572 3 7\n    R7 573 1 4\n    R19 574 3 6\n    R16 576 7 3\n    R0 577 3 8\n    R4 586 1 9\n    R11 587 5 9\n    R14 587 2 4\n    R2 590 5 5\n    R5 599 2 2\n    R10 599 7 7\n    R9 601 2 4\n    R1 603 12 6\n    R3 606 11 1\n    R18 606 11 9\n    R13 610 7 11\n    R10 614 7 4\n    R17 615 5 4\n    R16 616 3 3\n    R12 617 7 10\n    R7 621 4 2\n    R6 622 5 4\n    R19 626 6 12\n    R2 628 5 11\n    R15 629 7 7\n    R14 630 4 4\n    R11 632 9 6\n    R8 632 5 3\n    R0 639 8 6\n    R6 649 4 10\n    R10 651 4 11\n    R9 653 4 6\n    R14 653 4 12\n    R4 655 9 10\n    R0 656 6 4\n    R2 660 11 5\n    R13 660 11 6\n    R3 663 1 6\n    R18 664 9 5\n    R1 667 6 7\n    R5 668 2 11\n    R12 668 10 9\n    R16 672 3 9\n    R15 675 7 4\n    R17 680 4 3\n    R7 681 2 10\n    R9 681 6 9\n    R10 686 11 10\n    R14 689 12 9\n    R4 690 10 3\n    R1 698 7 9\n    R18 698 5 8\n    R0 699 4 12\n    R19 705 12 7\n    R2 708 5 1\n    R8 712 3 8\n    R13 718 6 2\n    R0 721 12 7\n    R14 721 9 5\n    R18 722 8 7\n    R15 723 4 8\n    R14 730 5 11\n    R4 733 3 12\n    R13 738 2 4\n    R6 741 10 1\n    R10 741 10 1\n    R15 741 8 9\n    R19 743 7 2\n    R13 751 4 7\n    R3 752 6 1\n    R14 755 11 9\n    R4 758 12 2\n    R11 759 6 9\n    R5 762 11 9\n    R15 765 9 2\n    R19 770 2 6\n    R9 775 9 9\n    R12 777 9 12\n    R17 778 3 7\n    R0 780 7 3\n    R0 781 3 11\n    R18 785 7 1\n    R8 787 8 11\n    R6 788 1 11\n    R7 790 10 4\n    R19 791 6 7\n    R13 791 7 6\n    R2 792 1 1\n    R9 794 9 5\n    R10 800 1 10\n    R15 804 2 5\n    R12 807 12 1\n    R11 808 9 4\n    R5 809 9 5\n    R14 813 9 2\n    R1 819 9 11\n    R19 819 7 5\n    R16 822 9 4\n    R0 823 11 8\n    R17 828 7 2\n    R11 834 4 4\n    R8 834 11 11\n    R3 837 1 6\n    R5 839 5 4\n    R4 842 2 4\n    R2 844 1 11\n    R18 851 1 1\n    R15 854 5 8\n    R0 855 8 5\n    R6 857 11 11\n    R12 857 1 3\n    R9 858 5 11\n    R8 859 11 3\n    R10 863 10 5\n    R7 867 4 6\n    R5 869 4 6\n    R0 878 5 8\n    R6 879 11 12\n    R7 882 6 12\n    R17 883 2 10\n    R13 883 6 5\n    R8 885 3 11\n    R13 887 5 7\n    R15 888 8 6\n    R3 891 6 6\n    R6 898 12 10\n    R17 898 10 3\n    R3 899 6 5\n    R5 900 6 11\n    R18 901 1 9\n    R15 906 6 10\n    R19 907 5 12\n    R13 908 7 9\n    R11 914 4 5\n    R16 917 4 5\n    R8 924 11 11\n    R14 924 2 2\n    R0 926 8 9\n    R9 926 11 2\n    R2 935 11 7\n    R1 937 11 5\n    R10 940 5 8\n    R18 946 9 11\n    R19 946 12 4\n    R3 947 5 8\n    R8 947 11 4\n    R13 947 9 4\n    R12 948 3 4\n    R4 950 4 2\n    R9 951 2 9\n    R0 963 9 11\n    R17 973 3 3\n    R16 975 5 12\n    R18 977 11 12\n    R9 980 9 6\n    R13 980 4 9\n    R5 983 11 1\n    R3 983 8 11\n    R7 985 12 7\n    R14 985 2 8\n    R10 991 8 12\n    R19 991 4 6\n    R17 992 3 5\n    R0 993 11 6\n    R1 997 5 3\n# Bonus\n\nWhich improves delivery efficiency most?\n\n* Longer linger times?\n* More cars?\n* Faster cars?",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;While this one is a hard challenge, it&amp;#39;s also open ended - be creative in how you solve the problem. I encourage you to compare notes, think about the challenge before you write code, and explore your algorithms. See the bonus questions below for some additional questions.&lt;/p&gt;\n\n&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Most of us have seen and ridden elevators - you crazy folks in the UK and commonwealth countries often call them &amp;quot;lifts&amp;quot; - but I&amp;#39;m sure I&amp;#39;m not the only one who has puzzled about the scheduling algorithms. Which riders do you pick up and when? Do you service requests in the order of arrival or do you work on maximal overlap?&lt;/p&gt;\n\n&lt;p&gt;For this challenge, you&amp;#39;ll have to anwer those questions. You&amp;#39;re designing an elevator scheduling algorithm for a building and you have plenty of riders to keep happy. You can have any algorithm you want as long as you stick to the constraints - the cars have a fixed capacity and speed.&lt;/p&gt;\n\n&lt;p&gt;Make sure you see the bonus questions after the challenge input.&lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a single integer &lt;em&gt;N&lt;/em&gt; on a line. The first &lt;em&gt;N&lt;/em&gt; lines will identify elevator cars and with these fields: Car identifier, capacity, vertical speed in floors per second, and starting floor. Assume instantaneous getting on or off the elevator for the riders once you arrive on the floor. Assume that the elevator &lt;em&gt;is able to&lt;/em&gt; leave with the rider as soon as it is able, but it &lt;em&gt;may&lt;/em&gt; linger waiting for more people to arrive - the choice is yours. &lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;C1 12 .1 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This translates to Car 1, capacity of 12 people, moves at .1 floors per second (ten seconds to traverse a floor up or down), and starting at floor 1.&lt;/p&gt;\n\n&lt;p&gt;Then you&amp;#39;ll get another integer on a line, &lt;em&gt;M&lt;/em&gt;. The next &lt;em&gt;M&lt;/em&gt; lines will show riders, with fields: Rider identification, elevator request time in seconds, source floor and destination floor. Rider identification numbers will be &lt;em&gt;stable&lt;/em&gt;, meaning the rider will have the same identifier the entire exercise. Examples:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;R1 0 1 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This translates to Rider 1 who at time point 0 wants to go from floor 1 to floor 4. Riders will not transit floors without an elevator.&lt;/p&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;The main thing to show in the output is the time point at which all requests have been satisfied. (Yes, this is trying to get you guys to compete for the most efficient algorithm). Optionally show all intermediate steps and journeys, and wait times for riders. &lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;This was randomly generated, and so it has a few &amp;quot;oddities&amp;quot; in it, like riders who get on and off on the same floor, and riders who change their destination in the next second (e.g. in the middle of a ride). You still have to satisfy &lt;em&gt;every&lt;/em&gt; request. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;2\nC1 12 .1 1\nC2 12 .2 1\n359\nR3 0 1 9\nR4 1 1 11\nR0 11 1 7\nR2 11 1 9\nR15 13 1 9\nR5 26 1 4\nR16 27 1 2\nR1 28 1 2\nR13 28 1 9\nR10 32 1 3\nR14 35 1 4\nR8 36 1 10\nR17 38 1 12\nR3 49 9 9\nR18 50 1 10\nR7 51 1 3\nR10 53 3 10\nR12 54 1 6\nR0 60 7 1\nR1 62 2 1\nR9 66 1 8\nR19 66 1 6\nR15 71 9 2\nR11 72 1 8\nR16 78 2 4\nR6 82 1 12\nR8 85 10 11\nR10 89 10 12\nR3 90 9 6\nR5 94 4 7\nR2 94 9 10\nR6 95 12 1\nR3 111 6 9\nR14 114 4 5\nR13 115 9 5\nR19 117 6 2\nR12 122 6 12\nR4 123 11 7\nR9 123 8 12\nR6 124 1 5\nR0 124 1 6\nR7 127 3 3\nR11 139 8 9\nR7 141 3 4\nR17 143 12 2\nR14 143 5 5\nR16 151 4 9\nR5 155 7 12\nR1 155 1 11\nR18 159 10 10\nR15 160 2 4\nR19 162 2 3\nR2 164 10 3\nR11 164 9 9\nR3 165 9 4\nR12 167 12 1\nR10 169 12 1\nR0 174 6 9\nR11 181 9 2\nR18 182 10 12\nR9 184 12 4\nR5 185 12 11\nR4 197 7 5\nR2 198 3 3\nR3 198 4 8\nR6 199 5 5\nR8 199 11 6\nR13 201 5 5\nR14 203 5 4\nR1 205 11 12\nR16 211 9 1\nR6 212 5 11\nR7 214 4 8\nR15 216 4 6\nR19 226 3 11\nR1 230 12 12\nR7 232 8 5\nR0 234 9 12\nR3 237 8 2\nR17 238 2 6\nR2 240 3 11\nR12 240 1 3\nR15 246 6 6\nR13 247 5 10\nR5 248 11 5\nR10 249 1 6\nR18 252 12 4\nR9 253 4 8\nR1 256 12 12\nR4 257 5 12\nR16 258 1 2\nR13 258 10 5\nR6 262 11 2\nR11 263 2 7\nR9 269 8 5\nR3 271 2 6\nR14 274 4 9\nR5 282 5 12\nR11 285 7 6\nR16 287 2 8\nR14 290 9 5\nR2 297 11 4\nR18 299 4 6\nR13 300 5 5\nR8 301 6 5\nR0 303 12 3\nR19 305 11 1\nR7 310 5 8\nR2 311 4 4\nR1 315 12 8\nR16 318 8 11\nR8 320 5 8\nR1 324 8 2\nR10 325 6 9\nR17 325 6 2\nR2 330 4 11\nR19 330 1 9\nR9 332 5 5\nR5 335 12 11\nR18 338 6 9\nR11 340 6 8\nR12 342 3 9\nR9 344 5 11\nR12 346 9 12\nR13 346 5 12\nR6 351 2 2\nR0 354 3 10\nR10 358 9 9\nR4 369 12 12\nR15 370 6 8\nR3 372 6 5\nR17 374 2 9\nR14 383 5 4\nR7 389 8 1\nR18 396 9 6\nR12 396 12 7\nR8 411 8 1\nR16 419 11 3\nR2 420 11 1\nR10 420 9 11\nR6 423 2 12\nR1 423 2 8\nR7 425 1 1\nR11 426 8 4\nR13 429 12 11\nR19 430 9 7\nR5 432 11 9\nR15 435 8 3\nR0 438 10 6\nR6 444 12 9\nR17 449 9 9\nR14 452 4 4\nR9 456 11 2\nR18 460 6 7\nR5 463 9 2\nR12 464 7 2\nR4 468 12 5\nR13 468 11 6\nR2 475 1 4\nR19 478 7 4\nR12 491 2 10\nR10 496 11 7\nR0 501 6 3\nR2 501 4 2\nR7 502 1 3\nR3 502 5 7\nR14 505 4 11\nR6 507 9 2\nR1 508 8 12\nR15 510 3 1\nR16 512 3 12\nR11 515 4 10\nR18 515 7 2\nR19 517 4 3\nR15 519 1 5\nR9 521 2 2\nR2 524 2 5\nR14 525 11 2\nR18 526 2 11\nR4 530 5 5\nR6 531 2 5\nR8 536 1 5\nR12 536 10 3\nR16 536 12 7\nR15 538 5 7\nR17 538 9 5\nR13 544 6 7\nR10 546 7 11\nR11 547 10 5\nR7 548 3 1\nR4 554 5 1\nR3 558 7 11\nR10 568 11 7\nR6 570 5 5\nR12 572 3 7\nR7 573 1 4\nR19 574 3 6\nR16 576 7 3\nR0 577 3 8\nR4 586 1 9\nR11 587 5 9\nR14 587 2 4\nR2 590 5 5\nR5 599 2 2\nR10 599 7 7\nR9 601 2 4\nR1 603 12 6\nR3 606 11 1\nR18 606 11 9\nR13 610 7 11\nR10 614 7 4\nR17 615 5 4\nR16 616 3 3\nR12 617 7 10\nR7 621 4 2\nR6 622 5 4\nR19 626 6 12\nR2 628 5 11\nR15 629 7 7\nR14 630 4 4\nR11 632 9 6\nR8 632 5 3\nR0 639 8 6\nR6 649 4 10\nR10 651 4 11\nR9 653 4 6\nR14 653 4 12\nR4 655 9 10\nR0 656 6 4\nR2 660 11 5\nR13 660 11 6\nR3 663 1 6\nR18 664 9 5\nR1 667 6 7\nR5 668 2 11\nR12 668 10 9\nR16 672 3 9\nR15 675 7 4\nR17 680 4 3\nR7 681 2 10\nR9 681 6 9\nR10 686 11 10\nR14 689 12 9\nR4 690 10 3\nR1 698 7 9\nR18 698 5 8\nR0 699 4 12\nR19 705 12 7\nR2 708 5 1\nR8 712 3 8\nR13 718 6 2\nR0 721 12 7\nR14 721 9 5\nR18 722 8 7\nR15 723 4 8\nR14 730 5 11\nR4 733 3 12\nR13 738 2 4\nR6 741 10 1\nR10 741 10 1\nR15 741 8 9\nR19 743 7 2\nR13 751 4 7\nR3 752 6 1\nR14 755 11 9\nR4 758 12 2\nR11 759 6 9\nR5 762 11 9\nR15 765 9 2\nR19 770 2 6\nR9 775 9 9\nR12 777 9 12\nR17 778 3 7\nR0 780 7 3\nR0 781 3 11\nR18 785 7 1\nR8 787 8 11\nR6 788 1 11\nR7 790 10 4\nR19 791 6 7\nR13 791 7 6\nR2 792 1 1\nR9 794 9 5\nR10 800 1 10\nR15 804 2 5\nR12 807 12 1\nR11 808 9 4\nR5 809 9 5\nR14 813 9 2\nR1 819 9 11\nR19 819 7 5\nR16 822 9 4\nR0 823 11 8\nR17 828 7 2\nR11 834 4 4\nR8 834 11 11\nR3 837 1 6\nR5 839 5 4\nR4 842 2 4\nR2 844 1 11\nR18 851 1 1\nR15 854 5 8\nR0 855 8 5\nR6 857 11 11\nR12 857 1 3\nR9 858 5 11\nR8 859 11 3\nR10 863 10 5\nR7 867 4 6\nR5 869 4 6\nR0 878 5 8\nR6 879 11 12\nR7 882 6 12\nR17 883 2 10\nR13 883 6 5\nR8 885 3 11\nR13 887 5 7\nR15 888 8 6\nR3 891 6 6\nR6 898 12 10\nR17 898 10 3\nR3 899 6 5\nR5 900 6 11\nR18 901 1 9\nR15 906 6 10\nR19 907 5 12\nR13 908 7 9\nR11 914 4 5\nR16 917 4 5\nR8 924 11 11\nR14 924 2 2\nR0 926 8 9\nR9 926 11 2\nR2 935 11 7\nR1 937 11 5\nR10 940 5 8\nR18 946 9 11\nR19 946 12 4\nR3 947 5 8\nR8 947 11 4\nR13 947 9 4\nR12 948 3 4\nR4 950 4 2\nR9 951 2 9\nR0 963 9 11\nR17 973 3 3\nR16 975 5 12\nR18 977 11 12\nR9 980 9 6\nR13 980 4 9\nR5 983 11 1\nR3 983 8 11\nR7 985 12 7\nR14 985 2 8\nR10 991 8 12\nR19 991 4 6\nR17 992 3 5\nR0 993 11 6\nR1 997 5 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Which improves delivery efficiency most?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Longer linger times?&lt;/li&gt;\n&lt;li&gt;More cars?&lt;/li&gt;\n&lt;li&gt;Faster cars?&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/39ixxi/20150612_challenge_218_hard_elevator_scheduling/",
        "title": "[2015-06-12] Challenge #218 [Hard] Elevator Scheduling",
        "difficulty": "Hard"
    },
    {
        "selfText": ": Language Detection\n\nYou are part of the newly formed ILU team, whose acronym spells Internet Language Usage. Your goal is to help write part of a web-crawler that detects which language a wep-page / document has been written in. The good news is you only have to support detection of five languages (English, Spanish, French, German, and Portuguese), though the bad news is the text input has been stripped to just space-delimited words. These languages have hundreds of thousands of words each, some growing at a rate of [~25,000 new words a year](http://en.wikipedia.org/wiki/English_language#Number_of_words_in_English)! These languages also share many words, called [cognates](http://en.wikipedia.org/wiki/Cognate). An example would be the French-English word \"lance\", both meaning a spear / javelin-like weapon.\n\nYou are allowed to use whatever resources you have, except for existing language-detection tools. I recommend using the [WinEdt dictionary set](http://www.winedt.org/Dict/) as a starting point for the five languages.\n\nThe more consistently correct you are, the most correct your solution is considered.\n\n# Formal Inputs &amp; Outputs\n## Input Description\n\nYou will be give a large lower-case space-delimited non-punctuated string that has a series of words (they may or may not form a grammatically correct). The string will be unicode, to support accents in all of the five languages (except English). Note that a string of a certain language may make references to nouns in their own respective language. As an example, the sample input is in French, but references the American publication \"The Hollywood Reporter\" and the state \"California\".\n\n## Output Description\n\nGiven the input, you must attempt to detect the language the text was written in, printing your top guesses. At minimum you must print your top guess; if your code is not certain of the language, you may print your ordered \"best guesses\".\n\n# Sample Inputs &amp; Outputs\n## Sample Input 0\n\n    l'école a été classé meilleure école de cinéma d'europe par la revue professionnelle de référence the hollywood reporter et 7e meilleure école de cinéma du monde juste derrière le california institute of the arts et devant l'université columbia\n\n## Sample Output 0\n\n    French\n    English\n\n## Sample Input 1\n\n    few things are harder to put up with than the annoyance of a good example\n\n## Sample Output 1\n\n    English\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#HardIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Hard)&lt;/em&gt;: Language Detection&lt;/h1&gt;\n\n&lt;p&gt;You are part of the newly formed ILU team, whose acronym spells Internet Language Usage. Your goal is to help write part of a web-crawler that detects which language a wep-page / document has been written in. The good news is you only have to support detection of five languages (English, Spanish, French, German, and Portuguese), though the bad news is the text input has been stripped to just space-delimited words. These languages have hundreds of thousands of words each, some growing at a rate of &lt;a href=\"http://en.wikipedia.org/wiki/English_language#Number_of_words_in_English\"&gt;~25,000 new words a year&lt;/a&gt;! These languages also share many words, called &lt;a href=\"http://en.wikipedia.org/wiki/Cognate\"&gt;cognates&lt;/a&gt;. An example would be the French-English word &amp;quot;lance&amp;quot;, both meaning a spear / javelin-like weapon.&lt;/p&gt;\n\n&lt;p&gt;You are allowed to use whatever resources you have, except for existing language-detection tools. I recommend using the &lt;a href=\"http://www.winedt.org/Dict/\"&gt;WinEdt dictionary set&lt;/a&gt; as a starting point for the five languages.&lt;/p&gt;\n\n&lt;p&gt;The more consistently correct you are, the most correct your solution is considered.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;You will be give a large lower-case space-delimited non-punctuated string that has a series of words (they may or may not form a grammatically correct). The string will be unicode, to support accents in all of the five languages (except English). Note that a string of a certain language may make references to nouns in their own respective language. As an example, the sample input is in French, but references the American publication &amp;quot;The Hollywood Reporter&amp;quot; and the state &amp;quot;California&amp;quot;.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Given the input, you must attempt to detect the language the text was written in, printing your top guesses. At minimum you must print your top guess; if your code is not certain of the language, you may print your ordered &amp;quot;best guesses&amp;quot;.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input 0&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;l&amp;#39;école a été classé meilleure école de cinéma d&amp;#39;europe par la revue professionnelle de référence the hollywood reporter et 7e meilleure école de cinéma du monde juste derrière le california institute of the arts et devant l&amp;#39;université columbia\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 0&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;French\nEnglish\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;few things are harder to put up with than the annoyance of a good example\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;English\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/1mby3b/091313_challenge_127_hard_language_detection/",
        "title": "[09/13/13] Challenge #127 [Hard] Language Detection",
        "difficulty": "Hard"
    },
    {
        "selfText": "\n\nThe [Oregon Trail] (http://en.wikipedia.org/wiki/The_Oregon_Trail_(video_game\\)) is a very iconic game. Essentially it is a road trip going from a start location to an end location. You must manage and overcome various challenges and obstacles. The game was intended for education to teach about the life of a pioneer in North America in the 19th century.\n\nFor this Friday Hard challenge you will make your own road trip game. To allow freedom for creativity I will not be placing too many narrow requirements on you for this challenge. The difficulty of this challenge is design and implementation.\n\nYour game must meet the following requirements:\n\n* It must involve travel. You are going from a starting point to an end point. Maybe you complete the journey. Probably most often you do not.\n\n* It must have a scoring system. The better the score the better you do.\n\n* It must involve at least 1 resource in limited supply that must be managed.\n\n\nA quick note on the resource. The Oregon trail has several resources like food, arrows, parts for the wagon to fix it and so on. It gives a way to gain/use/lose these resources. Without the proper amount you fail your journey. The resources should fit your game's theme. If you do it in space, fuel for a spacecraft. If you are on a boat, you need tar to fix holes or cloth to repair sails. Etc.\n\n#Input:\n\nUp to you how you manage the game. Part of this being hard is the design falls on you.\n\n#Output:\n\nText/Graphics/Other - up to you. Ideally you need an interface that a human can use and it should have some minor appeal/ease of use.\n\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;The &lt;a href=\"http://en.wikipedia.org/wiki/The_Oregon_Trail_(video_game)\"&gt;Oregon Trail&lt;/a&gt; is a very iconic game. Essentially it is a road trip going from a start location to an end location. You must manage and overcome various challenges and obstacles. The game was intended for education to teach about the life of a pioneer in North America in the 19th century.&lt;/p&gt;\n\n&lt;p&gt;For this Friday Hard challenge you will make your own road trip game. To allow freedom for creativity I will not be placing too many narrow requirements on you for this challenge. The difficulty of this challenge is design and implementation.&lt;/p&gt;\n\n&lt;p&gt;Your game must meet the following requirements:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;It must involve travel. You are going from a starting point to an end point. Maybe you complete the journey. Probably most often you do not.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It must have a scoring system. The better the score the better you do.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It must involve at least 1 resource in limited supply that must be managed.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A quick note on the resource. The Oregon trail has several resources like food, arrows, parts for the wagon to fix it and so on. It gives a way to gain/use/lose these resources. Without the proper amount you fail your journey. The resources should fit your game&amp;#39;s theme. If you do it in space, fuel for a spacecraft. If you are on a boat, you need tar to fix holes or cloth to repair sails. Etc.&lt;/p&gt;\n\n&lt;h1&gt;Input:&lt;/h1&gt;\n\n&lt;p&gt;Up to you how you manage the game. Part of this being hard is the design falls on you.&lt;/p&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;Text/Graphics/Other - up to you. Ideally you need an interface that a human can use and it should have some minor appeal/ease of use.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2ccipl/8012014_challenge_173_hard_road_trip_game/",
        "title": "[8/01/2014] Challenge #173 [Hard] Road Trip Game",
        "difficulty": "Hard"
    },
    {
        "selfText": "\n\nOur lumberjacks have been busy lately. Before winter the lumberjacks must get the logs to the lumber mill. Our lumberjacks use a local river system to float logs down river to the lumber mill. \n\nOne of our lumberjacks was a former software engineer who gave up his keyboard and mouse for an axe. He has suggested to the lumberjack foreman that using a program he can solve a problem they been having.\n\nThey want to find out how many logs can float in the river without causing a pile up. If you put too many logs in the river they will get stuck. However if you put just enough in and help them float down paths in the complex river they can optimize how many logs can be sent to the lumbermill.\n\nYour challenge is to solve two problems.\n\n* How many logs can be sent down the river system to maximize the use of the river without causing a pile up.\n\n* The routes must be optimal and the shortest path possible given the logs already sent on the river. Show the optimal path.\n\n#River:\n\nThe river is directed from a source down into a large pond by the lumbermill. There are many routes to take. Each route can support so many \"log routes\". Think of a log route as a route a log takes down the stream. For this log to reach the pond it takes away capacity from the route to hold logs. Once a part of a route has enough logs passing through it - it can no longer support more logs.\n\nThe following directed river gives you \"nodes\". The direction matters as you can only go in 1 direction. And the number represents how many \"log paths\" can travel over that segment of river before new log  routes can no longer route on that segment (they have to find another segment that is not at full capacity)\n\nA is our Start. All logs enter the river at point A.\n\n* A-&gt;B - holds 6 log paths\n* A-&gt;C - holds 2 log paths\n* B-&gt;E - holds 3 log paths\n* B-&gt;D - holds 3 log paths\n* D-&gt;C - holds 2 log paths\n* D-&gt;F - holds 1 log path\n* C-&gt;G - holds 5 log paths\n* E-&gt;H - holds 1 log paths\n* E-&gt;I - holds 2 log paths\n* F-&gt;H - holds 1 log path\n* G-&gt;H - holds 2 log paths\n* G-&gt;I - holds 2 log paths\n* H-&gt;I - holds 4 log paths\n\nI is the lumber mill pond.\n\nSo log routes will go from A to I. You want the shortest path to route logs. But as routes get used eventually they hit segment limits and you will have to find a new route to take for the next log to find the shortest path.\n\n#Log Paths\n\nSo an optimal path on our river would be A-&gt;B-&gt;E-&gt;I -- 4 segments. However each of those segments will now have 1 less log that can go on it. When we send another log we might A-&gt;B-&gt;E-&gt;I again for the next log. But the third log will not be able to take this path because the E-&gt;I segment has 2 logs going on that path so the problem must find another path as the E-&gt;I segment is now maxed on what logs can go on it.\n\n#Output:\n\nSend a log and show the optimal path. Your output will show the log #  (the first, 2nd, 3rd log sent down the river) and the shortest path on the river it can take (given all the previous log routes being used)\n\nEventually hit a point where no new log can be sent because the river cannot handle it. Anymore logs will cause a pile up. At this point we will know how many logs can our river handle.\n\nSo your output should show as an example\n\nLog #1 takes A-&gt;B-&gt;E-&gt;I - path of 4\n\nLog #2 takes A-&gt;B-&gt;E-&gt;I - path of 4\n\nLog #3 takes A-&gt;C-&gt;G-&gt;I - path of 4\n\n...\n\nLog #n takes (path) - path of (size of path)\n\n\nRiver is now full. Can send n logs.\n\n#Spoiler Warning\n\nThis challenge is key to keep your solutions under spoiler protection. Not just your code but any verbal text talking about how you solve it. So if you wish to use \"text\" to say like \"Oh well I solve this by....\" please spoiler that or your solution will be removed. Thank you.\n\n#Commentary on difficulty\n\nIt sometimes happens solutions have commentary on \"Oh this wasn't hard\" for [Hard] challenges. Don't do this. I see these comments as an un-needed comment towards the mods. Sometimes [Hard] is easy for you because you solved problems like this. Great. Many people cannot solve [Hard] problems and this kind of comment just hurts the community and also as you can see annoys moderators who spend time to research and develop challenges.\n\nThank you.\n\n",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;Our lumberjacks have been busy lately. Before winter the lumberjacks must get the logs to the lumber mill. Our lumberjacks use a local river system to float logs down river to the lumber mill. &lt;/p&gt;\n\n&lt;p&gt;One of our lumberjacks was a former software engineer who gave up his keyboard and mouse for an axe. He has suggested to the lumberjack foreman that using a program he can solve a problem they been having.&lt;/p&gt;\n\n&lt;p&gt;They want to find out how many logs can float in the river without causing a pile up. If you put too many logs in the river they will get stuck. However if you put just enough in and help them float down paths in the complex river they can optimize how many logs can be sent to the lumbermill.&lt;/p&gt;\n\n&lt;p&gt;Your challenge is to solve two problems.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;How many logs can be sent down the river system to maximize the use of the river without causing a pile up.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The routes must be optimal and the shortest path possible given the logs already sent on the river. Show the optimal path.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;River:&lt;/h1&gt;\n\n&lt;p&gt;The river is directed from a source down into a large pond by the lumbermill. There are many routes to take. Each route can support so many &amp;quot;log routes&amp;quot;. Think of a log route as a route a log takes down the stream. For this log to reach the pond it takes away capacity from the route to hold logs. Once a part of a route has enough logs passing through it - it can no longer support more logs.&lt;/p&gt;\n\n&lt;p&gt;The following directed river gives you &amp;quot;nodes&amp;quot;. The direction matters as you can only go in 1 direction. And the number represents how many &amp;quot;log paths&amp;quot; can travel over that segment of river before new log  routes can no longer route on that segment (they have to find another segment that is not at full capacity)&lt;/p&gt;\n\n&lt;p&gt;A is our Start. All logs enter the river at point A.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;A-&amp;gt;B - holds 6 log paths&lt;/li&gt;\n&lt;li&gt;A-&amp;gt;C - holds 2 log paths&lt;/li&gt;\n&lt;li&gt;B-&amp;gt;E - holds 3 log paths&lt;/li&gt;\n&lt;li&gt;B-&amp;gt;D - holds 3 log paths&lt;/li&gt;\n&lt;li&gt;D-&amp;gt;C - holds 2 log paths&lt;/li&gt;\n&lt;li&gt;D-&amp;gt;F - holds 1 log path&lt;/li&gt;\n&lt;li&gt;C-&amp;gt;G - holds 5 log paths&lt;/li&gt;\n&lt;li&gt;E-&amp;gt;H - holds 1 log paths&lt;/li&gt;\n&lt;li&gt;E-&amp;gt;I - holds 2 log paths&lt;/li&gt;\n&lt;li&gt;F-&amp;gt;H - holds 1 log path&lt;/li&gt;\n&lt;li&gt;G-&amp;gt;H - holds 2 log paths&lt;/li&gt;\n&lt;li&gt;G-&amp;gt;I - holds 2 log paths&lt;/li&gt;\n&lt;li&gt;H-&amp;gt;I - holds 4 log paths&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I is the lumber mill pond.&lt;/p&gt;\n\n&lt;p&gt;So log routes will go from A to I. You want the shortest path to route logs. But as routes get used eventually they hit segment limits and you will have to find a new route to take for the next log to find the shortest path.&lt;/p&gt;\n\n&lt;h1&gt;Log Paths&lt;/h1&gt;\n\n&lt;p&gt;So an optimal path on our river would be A-&amp;gt;B-&amp;gt;E-&amp;gt;I -- 4 segments. However each of those segments will now have 1 less log that can go on it. When we send another log we might A-&amp;gt;B-&amp;gt;E-&amp;gt;I again for the next log. But the third log will not be able to take this path because the E-&amp;gt;I segment has 2 logs going on that path so the problem must find another path as the E-&amp;gt;I segment is now maxed on what logs can go on it.&lt;/p&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;Send a log and show the optimal path. Your output will show the log #  (the first, 2nd, 3rd log sent down the river) and the shortest path on the river it can take (given all the previous log routes being used)&lt;/p&gt;\n\n&lt;p&gt;Eventually hit a point where no new log can be sent because the river cannot handle it. Anymore logs will cause a pile up. At this point we will know how many logs can our river handle.&lt;/p&gt;\n\n&lt;p&gt;So your output should show as an example&lt;/p&gt;\n\n&lt;p&gt;Log #1 takes A-&amp;gt;B-&amp;gt;E-&amp;gt;I - path of 4&lt;/p&gt;\n\n&lt;p&gt;Log #2 takes A-&amp;gt;B-&amp;gt;E-&amp;gt;I - path of 4&lt;/p&gt;\n\n&lt;p&gt;Log #3 takes A-&amp;gt;C-&amp;gt;G-&amp;gt;I - path of 4&lt;/p&gt;\n\n&lt;p&gt;...&lt;/p&gt;\n\n&lt;p&gt;Log #n takes (path) - path of (size of path)&lt;/p&gt;\n\n&lt;p&gt;River is now full. Can send n logs.&lt;/p&gt;\n\n&lt;h1&gt;Spoiler Warning&lt;/h1&gt;\n\n&lt;p&gt;This challenge is key to keep your solutions under spoiler protection. Not just your code but any verbal text talking about how you solve it. So if you wish to use &amp;quot;text&amp;quot; to say like &amp;quot;Oh well I solve this by....&amp;quot; please spoiler that or your solution will be removed. Thank you.&lt;/p&gt;\n\n&lt;h1&gt;Commentary on difficulty&lt;/h1&gt;\n\n&lt;p&gt;It sometimes happens solutions have commentary on &amp;quot;Oh this wasn&amp;#39;t hard&amp;quot; for [Hard] challenges. Don&amp;#39;t do this. I see these comments as an un-needed comment towards the mods. Sometimes [Hard] is easy for you because you solved problems like this. Great. Many people cannot solve [Hard] problems and this kind of comment just hurts the community and also as you can see annoys moderators who spend time to research and develop challenges.&lt;/p&gt;\n\n&lt;p&gt;Thank you.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/2lljyq/11052014_challenge_187_hard_lumberjack_floating/",
        "title": "[11/05/2014] Challenge #187 [Hard] Lumberjack Floating Log Problem",
        "difficulty": "Hard"
    },
    {
        "selfText": "\n: Alphabetizing cipher\nThis challenge is an optimization problem. Your solution will be a string of the 26 letters of the alphabet in some order, such as:\n\n    jfbqpwcvuamozhilgrxtkndesy\n\nThe string is a cipher. For this cipher, the letter `a` maps to `j`, the letter `b` maps to `f`, and so on. This cipher maps the word `bakery` to `fjmprs`. Notice that `fjmprs` is in alphabetical order. Your cipher's score is the number of words from the word list that it maps to a string in alphabetical order.\n\n[The word list for this problem is here.](http://pastebin.com/9aFn1r27) It consists of the 7,260 six-letter words from the Enable word list that are made up of 6 different letters.\n\nSince there are 60 words from the list that my example cipher maps to sorted strings, my score is 60. Can you do better? Post your solution, your score, and the program you used to generate it (if any).\n\nHere's a python script that will evaluate your solution:\n\n    abc = \"abcdefghijklmnopqrstuvwxyz\"\n    words = open(\"enable-6.txt\").read().splitlines()\n    newabc = raw_input()\n    assert len(newabc) == 26 and set(abc) == set(newabc)\n    cipher = dict(zip(abc, newabc))\n    for word in words:\n      nword = \"\".join(map(cipher.get, word))\n      if sorted(nword) == list(nword):\n        print word, nword\n\n*Author: Cosmologicon*\n# Formal Inputs &amp; Outputs\n## Input Description\n&lt;Field to be removed&gt;\n## Output Description\n&lt;Field to be removed&gt; \n# Sample Inputs &amp; Outputs\n## Sample Input\n&lt;Field to be removed&gt; \n## Sample Output\n&lt;Field to be removed&gt; \n# Challenge Input\n&lt;Field to be removed&gt; \n## Challenge Input Solution\n&lt;Field to be removed&gt; \n# Note\nNone\n\t\t\t\t",
        "selfText_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"#HardIcon\"&gt;&lt;/a&gt; &lt;em&gt;(Hard)&lt;/em&gt;: Alphabetizing cipher&lt;/h1&gt;\n\n&lt;p&gt;This challenge is an optimization problem. Your solution will be a string of the 26 letters of the alphabet in some order, such as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;jfbqpwcvuamozhilgrxtkndesy\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The string is a cipher. For this cipher, the letter &lt;code&gt;a&lt;/code&gt; maps to &lt;code&gt;j&lt;/code&gt;, the letter &lt;code&gt;b&lt;/code&gt; maps to &lt;code&gt;f&lt;/code&gt;, and so on. This cipher maps the word &lt;code&gt;bakery&lt;/code&gt; to &lt;code&gt;fjmprs&lt;/code&gt;. Notice that &lt;code&gt;fjmprs&lt;/code&gt; is in alphabetical order. Your cipher&amp;#39;s score is the number of words from the word list that it maps to a string in alphabetical order.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://pastebin.com/9aFn1r27\"&gt;The word list for this problem is here.&lt;/a&gt; It consists of the 7,260 six-letter words from the Enable word list that are made up of 6 different letters.&lt;/p&gt;\n\n&lt;p&gt;Since there are 60 words from the list that my example cipher maps to sorted strings, my score is 60. Can you do better? Post your solution, your score, and the program you used to generate it (if any).&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s a python script that will evaluate your solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;abc = &amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;\nwords = open(&amp;quot;enable-6.txt&amp;quot;).read().splitlines()\nnewabc = raw_input()\nassert len(newabc) == 26 and set(abc) == set(newabc)\ncipher = dict(zip(abc, newabc))\nfor word in words:\n  nword = &amp;quot;&amp;quot;.join(map(cipher.get, word))\n  if sorted(nword) == list(nword):\n    print word, nword\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Author: Cosmologicon&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;&amp;lt;Field to be removed&amp;gt;&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;&amp;lt;Field to be removed&amp;gt; &lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input&lt;/h2&gt;\n\n&lt;p&gt;&amp;lt;Field to be removed&amp;gt; &lt;/p&gt;\n\n&lt;h2&gt;Sample Output&lt;/h2&gt;\n\n&lt;p&gt;&amp;lt;Field to be removed&amp;gt; &lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;&amp;lt;Field to be removed&amp;gt; &lt;/p&gt;\n\n&lt;h2&gt;Challenge Input Solution&lt;/h2&gt;\n\n&lt;p&gt;&amp;lt;Field to be removed&amp;gt; &lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;None&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "url": "https://www.reddit.com/r/dailyprogrammer/comments/178vsz/012513_challenge_118_hard_alphabetizing_cipher/",
        "title": "[01/25/13] Challenge #118 [Hard] Alphabetizing cipher",
        "difficulty": "Hard"
    }
]